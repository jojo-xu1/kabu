(this["webpackJsonp"] = this["webpackJsonp"] || []).push([["app-service"],[
/* 0 */
/*!**********************************!*\
  !*** D:/GitProject/kabu/main.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("__webpack_require__(/*! uni-pages */ 1);__webpack_require__(/*! @dcloudio/uni-stat */ 15);var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 19));\nvar _App = _interopRequireDefault(__webpack_require__(/*! ./App */ 20));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}\n\n_vue.default.config.productionTip = false;\n\n_vue.default.prototype.$host = 'https://unidemo.dcloud.net.cn/';\n\n_App.default.mpType = 'app';\n\nvar app = new _vue.default(_objectSpread({},\n_App.default));\n\napp.$mount();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbWFpbi5qcyJdLCJuYW1lcyI6WyJWdWUiLCJjb25maWciLCJwcm9kdWN0aW9uVGlwIiwicHJvdG90eXBlIiwiJGhvc3QiLCJBcHAiLCJtcFR5cGUiLCJhcHAiLCIkbW91bnQiXSwibWFwcGluZ3MiOiJBQUFBLHdDQUFtQixrREFBNEI7QUFDL0Msd0U7O0FBRUFBLGFBQUlDLE1BQUosQ0FBV0MsYUFBWCxHQUEyQixLQUEzQjs7QUFFQUYsYUFBSUcsU0FBSixDQUFjQyxLQUFkLEdBQXNCLGdDQUF0Qjs7QUFFQUMsYUFBSUMsTUFBSixHQUFhLEtBQWI7O0FBRUEsSUFBTUMsR0FBRyxHQUFHLElBQUlQLFlBQUo7QUFDTEssWUFESyxFQUFaOztBQUdBRSxHQUFHLENBQUNDLE1BQUoiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAndW5pLXBhZ2VzJztpbXBvcnQgJ0BkY2xvdWRpby91bmktc3RhdCc7aW1wb3J0IFZ1ZSBmcm9tICd2dWUnXHJcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAnXHJcblxyXG5WdWUuY29uZmlnLnByb2R1Y3Rpb25UaXAgPSBmYWxzZVxyXG5cclxuVnVlLnByb3RvdHlwZS4kaG9zdCA9ICdodHRwczovL3VuaWRlbW8uZGNsb3VkLm5ldC5jbi8nO1xyXG5cclxuQXBwLm1wVHlwZSA9ICdhcHAnXHJcblxyXG5jb25zdCBhcHAgPSBuZXcgVnVlKHtcclxuICAgIC4uLkFwcFxyXG59KVxyXG5hcHAuJG1vdW50KCkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/*!*************************************!*\
  !*** D:/GitProject/kabu/pages.json ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


if (typeof Promise !== 'undefined' && !Promise.prototype.finally) {
  Promise.prototype.finally = function (callback) {
    var promise = this.constructor;
    return this.then(
    function (value) {return promise.resolve(callback()).then(function () {return value;});},
    function (reason) {return promise.resolve(callback()).then(function () {
        throw reason;
      });});

  };
}

if (uni.restoreGlobal) {
  uni.restoreGlobal(weex, plus, setTimeout, clearTimeout, setInterval, clearInterval);
}



__definePage('pages/stockquot/Kline', function () {return Vue.extend(__webpack_require__(/*! pages/stockquot/Kline.vue?mpType=page */ 2).default);});

/***/ }),
/* 2 */
/*!****************************************************************!*\
  !*** D:/GitProject/kabu/pages/stockquot/Kline.vue?mpType=page ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Kline_vue_vue_type_template_id_581db136_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Kline.vue?vue&type=template&id=581db136&mpType=page */ 3);\n/* harmony import */ var _Kline_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Kline.vue?vue&type=script&lang=js&mpType=page */ 5);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _Kline_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _Kline_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js */ 14);\n\nvar renderjs\n\n\n\n\n/* normalize component */\n\nvar component = Object(_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _Kline_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _Kline_vue_vue_type_template_id_581db136_mpType_page__WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _Kline_vue_vue_type_template_id_581db136_mpType_page__WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  null,\n  null,\n  false,\n  _Kline_vue_vue_type_template_id_581db136_mpType_page__WEBPACK_IMPORTED_MODULE_0__[\"components\"],\n  renderjs\n)\n\ncomponent.options.__file = \"pages/stockquot/Kline.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBNkg7QUFDN0g7QUFDb0U7QUFDTDs7O0FBRy9EO0FBQ21NO0FBQ25NLGdCQUFnQix3TUFBVTtBQUMxQixFQUFFLHNGQUFNO0FBQ1IsRUFBRSwyRkFBTTtBQUNSLEVBQUUsb0dBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsK0ZBQVU7QUFDWjtBQUNBOztBQUVBO0FBQ2UsZ0YiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zLCByZWN5Y2xhYmxlUmVuZGVyLCBjb21wb25lbnRzIH0gZnJvbSBcIi4vS2xpbmUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTU4MWRiMTM2Jm1wVHlwZT1wYWdlXCJcbnZhciByZW5kZXJqc1xuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9LbGluZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmbXBUeXBlPXBhZ2VcIlxuZXhwb3J0ICogZnJvbSBcIi4vS2xpbmUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJm1wVHlwZT1wYWdlXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIUU6XFxcXOW8gOWPkVxcXFxIQnVpbGRlclguMi43LjkuMjAyMDA1MjdcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx2dWUtbG9hZGVyXFxcXGxpYlxcXFxydW50aW1lXFxcXGNvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsLFxuICBmYWxzZSxcbiAgY29tcG9uZW50cyxcbiAgcmVuZGVyanNcbilcblxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJwYWdlcy9zdG9ja3F1b3QvS2xpbmUudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/*!**********************************************************************************************!*\
  !*** D:/GitProject/kabu/pages/stockquot/Kline.vue?vue&type=template&id=581db136&mpType=page ***!
  \**********************************************************************************************/
/*! exports provided: render, staticRenderFns, recyclableRender, components */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_Kline_vue_vue_type_template_id_581db136_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--10-0!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/filter-modules-template.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./Kline.vue?vue&type=template&id=581db136&mpType=page */ 4);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_Kline_vue_vue_type_template_id_581db136_mpType_page__WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_Kline_vue_vue_type_template_id_581db136_mpType_page__WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "recyclableRender", function() { return _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_Kline_vue_vue_type_template_id_581db136_mpType_page__WEBPACK_IMPORTED_MODULE_0__["recyclableRender"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "components", function() { return _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_Kline_vue_vue_type_template_id_581db136_mpType_page__WEBPACK_IMPORTED_MODULE_0__["components"]; });



/***/ }),
/* 4 */

  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--10-0!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/filter-modules-template.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!D:/GitProject/kabu/pages/stockquot/Kline.vue?vue&type=template&id=581db136&mpType=page ***!

/*! exports provided: render, staticRenderFns, recyclableRender, components */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "recyclableRender", function() { return recyclableRender; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "components", function() { return components; });
var components
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "view",
    [
      _c(
        "view",
        { staticClass: _vm._$s(1, "sc", "search-block"), attrs: { _i: 1 } },
        [
          _c("input", {
            staticClass: _vm._$s(2, "sc", "search-text"),
            attrs: { id: "IDsearch", _i: 2 },
            on: { input: _vm.onKeyInput, confirm: _vm.kabuSearch }
          })
        ]
      ),
      _c("view", [
        _vm._v(
          _vm._$s(3, "t0-0", _vm._s(_vm.chartData1.series[0].name)) +
            _vm._$s(3, "t0-1", _vm._s(_vm.chartData1.series[0].ID))
        )
      ]),
      _c("uni-segmented-control", {
        attrs: {
          current: _vm.current,
          values: _vm.items,
          styleType: "button",
          activeColor: "#d9ce2c",
          _i: 4
        },
        on: { clickItem: _vm.onClickItem }
      }),
      _c(
        "view",
        { staticClass: _vm._$s(5, "sc", "content"), attrs: { _i: 5 } },
        [
          _c(
            "view",
            {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm._$s(6, "v-show", _vm.current === 0),
                  expression: "_$s(6,'v-show',current === 0)"
                }
              ],
              attrs: { _i: 6 }
            },
            [
              _c(
                "view",
                {
                  staticClass: _vm._$s(7, "sc", "qiun-columns"),
                  attrs: { _i: 7 }
                },
                [
                  _c(
                    "view",
                    {
                      staticClass: _vm._$s(8, "sc", "qiun-charts"),
                      attrs: { _i: 8 }
                    },
                    [
                      _c("canvas", {
                        staticClass: _vm._$s(9, "sc", "charts"),
                        attrs: { id: "canvasCandle", _i: 9 },
                        on: {
                          touchstart: _vm.touchCandle,
                          touchmove: _vm.moveCandle,
                          touchend: _vm.touchEndCandle
                        }
                      })
                    ]
                  ),
                  _c(
                    "view",
                    {
                      staticClass: _vm._$s(10, "sc", "qiun-charts2"),
                      attrs: { _i: 10 }
                    },
                    [
                      _c("canvas", {
                        staticClass: _vm._$s(11, "sc", "charts2"),
                        attrs: { id: "canvasColumn", _i: 11 }
                      })
                    ]
                  ),
                  _c(
                    "view",
                    {
                      staticClass: _vm._$s(
                        12,
                        "sc",
                        "qiun-padding qiun-bg-white "
                      ),
                      attrs: { _i: 12 }
                    },
                    [
                      _c("slider", {
                        attrs: {
                          value: _vm._$s(13, "a-value", _vm.itemCount),
                          max: _vm._$s(13, "a-max", _vm.sliderMax),
                          _i: 13
                        },
                        on: { changing: _vm.sliderMove, change: _vm.sliderMove }
                      })
                    ]
                  )
                ]
              )
            ]
          ),
          _c("view", {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm._$s(14, "v-show", _vm.current === 1),
                expression: "_$s(14,'v-show',current === 1)"
              }
            ],
            attrs: { _i: 14 }
          }),
          _c("view", {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm._$s(15, "v-show", _vm.current === 2),
                expression: "_$s(15,'v-show',current === 2)"
              }
            ],
            attrs: { _i: 15 }
          })
        ]
      )
    ],
    1
  )
}
var recyclableRender = false
var staticRenderFns = []
render._withStripped = true



/***/ }),
/* 5 */
/*!****************************************************************************************!*\
  !*** D:/GitProject/kabu/pages/stockquot/Kline.vue?vue&type=script&lang=js&mpType=page ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_Kline_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./Kline.vue?vue&type=script&lang=js&mpType=page */ 6);\n/* harmony import */ var _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_Kline_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_Kline_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_Kline_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_Kline_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_Kline_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQW1xQixDQUFnQixrckJBQUcsRUFBQyIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLSFFOlxcXFzlvIDlj5FcXFxcSEJ1aWxkZXJYLjIuNy45LjIwMjAwNTI3XFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXGJhYmVsLWxvYWRlclxcXFxsaWJcXFxcaW5kZXguanMhRTpcXFxc5byA5Y+RXFxcXEhCdWlsZGVyWC4yLjcuOS4yMDIwMDUyN1xcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHdlYnBhY2stcHJlcHJvY2Vzcy1sb2FkZXJcXFxcaW5kZXguanM/P3JlZi0tNi0xIUU6XFxcXOW8gOWPkVxcXFxIQnVpbGRlclguMi43LjkuMjAyMDA1MjdcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx3ZWJwYWNrLXVuaS1hcHAtbG9hZGVyXFxcXHVzaW5nLWNvbXBvbmVudHMuanMhRTpcXFxc5byA5Y+RXFxcXEhCdWlsZGVyWC4yLjcuOS4yMDIwMDUyN1xcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHZ1ZS1sb2FkZXJcXFxcbGliXFxcXGluZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9LbGluZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmbXBUeXBlPXBhZ2VcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSFFOlxcXFzlvIDlj5FcXFxcSEJ1aWxkZXJYLjIuNy45LjIwMjAwNTI3XFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXGJhYmVsLWxvYWRlclxcXFxsaWJcXFxcaW5kZXguanMhRTpcXFxc5byA5Y+RXFxcXEhCdWlsZGVyWC4yLjcuOS4yMDIwMDUyN1xcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHdlYnBhY2stcHJlcHJvY2Vzcy1sb2FkZXJcXFxcaW5kZXguanM/P3JlZi0tNi0xIUU6XFxcXOW8gOWPkVxcXFxIQnVpbGRlclguMi43LjkuMjAyMDA1MjdcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx3ZWJwYWNrLXVuaS1hcHAtbG9hZGVyXFxcXHVzaW5nLWNvbXBvbmVudHMuanMhRTpcXFxc5byA5Y+RXFxcXEhCdWlsZGVyWC4yLjcuOS4yMDIwMDUyN1xcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHZ1ZS1sb2FkZXJcXFxcbGliXFxcXGluZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9LbGluZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmbXBUeXBlPXBhZ2VcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!D:/GitProject/kabu/pages/stockquot/Kline.vue?vue&type=script&lang=js&mpType=page ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _uCharts = _interopRequireDefault(__webpack_require__(/*! @/components/u-charts/u-charts/u-charts.js */ 8));\nvar _uniSegmentedControl = _interopRequireDefault(__webpack_require__(/*! @/components/uni-segmented-control.vue */ 9));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _self;var canvaCandle = null;var canvaColumn = null;var _default = { components: { uniSegmentedControl: _uniSegmentedControl.default }, data: function data() {return { cWidth: '', cHeight: '', cHeight2: '', items: ['1日', '1週', '1か月'], current: 0, pixelRatio: 1, serverData: '', itemCount: 20, //x轴单屏数据密度\n      sliderMax: 50, IDsearch: \"\", chartData: {}, categories: [], series: [{ name: \"\", ID: \"\", data: [] }], chartData1: { //后台调取数据需清空\n        categories: ['20190501', '2019/5/2', '2019/5/3', '2019/5/4', '2019/5/5', '2019/5/6', '2019/5/7', '2019/5/8', '2019/5/9', '2019/5/10', '2019/5/11', '2019/5/12', '2019/5/13', '2019/5/14', '2019/5/15', '2019/5/16', '2019/5/17', '2019/5/18', '2019/5/19', '2019/5/20', '2019/5/21', '2019/5/22', '2019/5/23', '2019/5/24', '2019/5/25', '2019/5/26', '2019/5/27', '2019/5/2', '2019/5/29', '2019/5/30', '2019/5/31', '2019/6/1'], series: [{ name: '日清食品ホールディングス(株)', ID: \"2897\", data: [//开盘，收盘，最低，最高\n          [2320.26, 2302.6, 2287.3, 2362.94], [2300, 2291.3, 2288.26, 2308.38], [2376.35, 2336.5, 2335.35, 2426.92], [2347.22, 2358.98, 2337.35, 2363.8], [2370.75, 2382.48, 2347.89, 2383.76], [2363.43, 2385.42, 2360.23, 2386.82], [2277.41, 2419.02, 2369.57, 2421.15], [2483.43, 2385.42, 2371.23, 2379.82], [2277.41, 2419.02, 2369.57, 2421.15], [2380, 2391.3, 2288.26, 2308.38], [2365.35, 2346.5, 2395.35, 2346.92], [2447.22, 2358.98, 2337.35, 2363.8], [2330.75, 2382.48, 2347.89, 2383.76], [2383.43, 2385.42, 2371.23, 2391.82], [2377.41, 2419.02, 2369.57, 2421.15], [2373.43, 2385.42, 2371.23, 2391.82],\n          [2375.41, 2359.02, 2369.57, 2421.15],\n          [2343.43, 2385.42, 2371.23, 2391.82],\n          [2407.41, 2411.02, 2369.57, 2421.15],\n          [2303.43, 2407.42, 2371.23, 2391.82],\n          [2287.41, 2401.02, 2369.57, 2421.15],\n          [2303.43, 2396.42, 2371.23, 2391.82],\n          [2397.41, 2399.02, 2369.57, 2421.15],\n          [2413.43, 2390.42, 2371.23, 2391.82],\n          [2357.41, 2394.02, 2369.57, 2421.15],\n          [2333.43, 2397.42, 2371.23, 2391.82],\n          [2339.41, 2407.02, 2369.57, 2421.15],\n          [2343.43, 2396.42, 2371.23, 2391.82],\n          [2345.41, 2401.02, 2369.57, 2421.15],\n          [2349.43, 2408.42, 2371.23, 2391.82],\n          [2346.41, 2419.02, 2369.57, 2421.15],\n          [2348, 2291.3, 2288.26, 2308.38]] }] },\n\n\n\n      chartData2: { //后台调取数据需清空\n        categories: ['2019/5/1', '2019/5/2', '2019/5/3', '2019/5/4', '2019/5/5', '2019/5/6',\n        '2019/5/7', '2019/5/8', '2019/5/9', '2019/5/10'],\n\n        series: [{\n          name: 'J T ',\n          ID: \"2914\",\n          data: [//开盘，收盘，最低，最高\n          [2320.26, 2302.6, 2287.3, 2362.94],\n          [2300, 2291.3, 2288.26, 2308.38],\n          [2376.35, 2336.5, 2335.35, 2426.92],\n          [2347.22, 2358.98, 2337.35, 2363.8],\n          [2370.75, 2382.48, 2347.89, 2383.76],\n          [2363.43, 2385.42, 2360.23, 2386.82],\n          [2277.41, 2419.02, 2369.57, 2421.15],\n          [2483.43, 2385.42, 2371.23, 2379.82],\n          [2277.41, 2419.02, 2369.57, 2421.15],\n          [2380, 2391.3, 2288.26, 2308.38]] }] },\n\n\n\n      Candle: {\n        \"categories\": [\n        \"2013/1/24\", \"2013/1/25\", \"2013/1/28\", \"2013/1/29\", \"2013/1/30\",\n        \"2013/1/31\", \"2013/2/1\", \"2013/2/4\", \"2013/2/5\", \"2013/2/6\",\n        \"2013/2/7\", \"2013/2/8\", \"2013/2/18\", \"2013/2/19\", \"2013/2/20\",\n        \"2013/2/21\", \"2013/2/22\", \"2013/2/25\", \"2013/2/26\", \"2013/2/27\",\n        \"2013/2/28\", \"2013/3/1\", \"2013/3/4\", \"2013/3/5\", \"2013/3/6\",\n        \"2013/3/7\", \"2013/3/8\", \"2013/3/11\", \"2013/3/12\", \"2013/3/13\",\n        \"2013/3/14\", \"2013/3/15\", \"2013/3/18\", \"2013/3/19\", \"2013/3/20\",\n        \"2013/3/21\", \"2013/3/22\", \"2013/3/25\", \"2013/3/26\", \"2013/3/27\",\n        \"2013/3/28\", \"2013/3/29\", \"2013/4/1\", \"2013/4/2\", \"2013/4/3\",\n        \"2013/4/8\", \"2013/4/9\", \"2013/4/10\", \"2013/4/11\", \"2013/4/12\",\n        \"2013/4/15\", \"2013/4/16\", \"2013/4/17\", \"2013/4/18\", \"2013/4/19\",\n        \"2013/4/22\", \"2013/4/23\", \"2013/4/24\", \"2013/4/25\", \"2013/4/26\",\n        \"2013/5/2\", \"2013/5/3\", \"2013/5/6\", \"2013/5/7\", \"2013/5/8\",\n        \"2013/5/9\", \"2013/5/10\", \"2013/5/13\", \"2013/5/14\", \"2013/5/15\",\n        \"2013/5/16\", \"2013/5/17\", \"2013/5/20\", \"2013/5/21\", \"2013/5/22\",\n        \"2013/5/23\", \"2013/5/24\", \"2013/5/27\", \"2013/5/28\", \"2013/5/29\",\n        \"2013/5/30\", \"2013/5/31\", \"2013/6/3\", \"2013/6/4\", \"2013/6/5\",\n        \"2013/6/6\", \"2013/6/7\", \"2013/6/13\"],\n\n        \"series\": [{\n          \"name\": \"上证指数\",\n          \"data\": [\n          [2320.26, 2302.6, 2287.3, 2362.94],\n          [2300, 2291.3, 2288.26, 2308.38],\n          [2295.35, 2346.5, 2295.35, 2346.92],\n          [2347.22, 2358.98, 2337.35, 2363.8],\n          [2360.75, 2382.48, 2347.89, 2383.76],\n          [2383.43, 2385.42, 2371.23, 2391.82],\n          [2377.41, 2419.02, 2369.57, 2421.15],\n          [2425.92, 2428.15, 2417.58, 2440.38],\n          [2411, 2433.13, 2403.3, 2437.42],\n          [2432.68, 2434.48, 2427.7, 2441.73],\n          [2430.69, 2418.53, 2394.22, 2433.89],\n          [2416.62, 2432.4, 2414.4, 2443.03],\n          [2441.91, 2421.56, 2415.43, 2444.8],\n          [2420.26, 2382.91, 2373.53, 2427.07],\n          [2383.49, 2397.18, 2370.61, 2397.94],\n          [2378.82, 2325.95, 2309.17, 2378.82],\n          [2322.94, 2314.16, 2308.76, 2330.88],\n          [2320.62, 2325.82, 2315.01, 2338.78],\n          [2313.74, 2293.34, 2289.89, 2340.71],\n          [2297.77, 2313.22, 2292.03, 2324.63],\n          [2322.32, 2365.59, 2308.92, 2366.16],\n          [2364.54, 2359.51, 2330.86, 2369.65],\n          [2332.08, 2273.4, 2259.25, 2333.54],\n          [2274.81, 2326.31, 2270.1, 2328.14],\n          [2333.61, 2347.18, 2321.6, 2351.44],\n          [2340.44, 2324.29, 2304.27, 2352.02],\n          [2326.42, 2318.61, 2314.59, 2333.67],\n          [2314.68, 2310.59, 2296.58, 2320.96],\n          [2309.16, 2286.6, 2264.83, 2333.29],\n          [2282.17, 2263.97, 2253.25, 2286.33],\n          [2255.77, 2270.28, 2253.31, 2276.22],\n          [2269.31, 2278.4, 2250, 2312.08],\n          [2267.29, 2240.02, 2239.21, 2276.05],\n          [2244.26, 2257.43, 2232.02, 2261.31],\n          [2257.74, 2317.37, 2257.42, 2317.86],\n          [2318.21, 2324.24, 2311.6, 2330.81],\n          [2321.4, 2328.28, 2314.97, 2332],\n          [2334.74, 2326.72, 2319.91, 2344.89],\n          [2318.58, 2297.67, 2281.12, 2319.99],\n          [2299.38, 2301.26, 2289, 2323.48],\n          [2273.55, 2236.3, 2232.91, 2273.55],\n          [2238.49, 2236.62, 2228.81, 2246.87],\n          [2229.46, 2234.4, 2227.31, 2243.95],\n          [2234.9, 2227.74, 2220.44, 2253.42],\n          [2232.69, 2225.29, 2217.25, 2241.34],\n          [2196.24, 2211.59, 2180.67, 2212.59],\n          [2215.47, 2225.77, 2215.47, 2234.73],\n          [2224.93, 2226.13, 2212.56, 2233.04],\n          [2236.98, 2219.55, 2217.26, 2242.48],\n          [2218.09, 2206.78, 2204.44, 2226.26],\n          [2199.91, 2181.94, 2177.39, 2204.99],\n          [2169.63, 2194.85, 2165.78, 2196.43],\n          [2195.03, 2193.8, 2178.47, 2197.51],\n          [2181.82, 2197.6, 2175.44, 2206.03],\n          [2201.12, 2244.64, 2200.58, 2250.11],\n          [2236.4, 2242.17, 2232.26, 2245.12],\n          [2242.62, 2184.54, 2182.81, 2242.62],\n          [2187.35, 2218.32, 2184.11, 2226.12],\n          [2213.19, 2199.31, 2191.85, 2224.63],\n          [2203.89, 2177.91, 2173.86, 2210.58],\n          [2170.78, 2174.12, 2161.14, 2179.65],\n          [2179.05, 2205.5, 2179.05, 2222.81],\n          [2212.5, 2231.17, 2212.5, 2236.07],\n          [2227.86, 2235.57, 2219.44, 2240.26],\n          [2242.39, 2246.3, 2235.42, 2255.21],\n          [2246.96, 2232.97, 2221.38, 2247.86],\n          [2228.82, 2246.83, 2225.81, 2247.67],\n          [2247.68, 2241.92, 2231.36, 2250.85],\n          [2238.9, 2217.01, 2205.87, 2239.93],\n          [2217.09, 2224.8, 2213.58, 2225.19],\n          [2221.34, 2251.81, 2210.77, 2252.87],\n          [2249.81, 2282.87, 2248.41, 2288.09],\n          [2286.33, 2299.99, 2281.9, 2309.39],\n          [2297.11, 2305.11, 2290.12, 2305.3],\n          [2303.75, 2302.4, 2292.43, 2314.18],\n          [2293.81, 2275.67, 2274.1, 2304.95],\n          [2281.45, 2288.53, 2270.25, 2292.59],\n          [2286.66, 2293.08, 2283.94, 2301.7],\n          [2293.4, 2321.32, 2281.47, 2322.1],\n          [2323.54, 2324.02, 2321.17, 2334.33],\n          [2316.25, 2317.75, 2310.49, 2325.72],\n          [2320.74, 2300.59, 2299.37, 2325.53],\n          [2300.21, 2299.25, 2294.11, 2313.43],\n          [2297.1, 2272.42, 2264.76, 2297.1],\n          [2270.71, 2270.93, 2260.87, 2276.86],\n          [2264.43, 2242.11, 2240.07, 2266.69],\n          [2242.26, 2210.9, 2205.07, 2250.63],\n          [2190.1, 2148.35, 2126.22, 2190.1]] }] },\n\n\n\n      CandleColumn: {\n        \"categories\": [\n        \"2013/1/24\", \"2013/1/25\", \"2013/1/28\", \"2013/1/29\", \"2013/1/30\",\n        \"2013/1/31\", \"2013/2/1\", \"2013/2/4\", \"2013/2/5\", \"2013/2/6\",\n        \"2013/2/7\", \"2013/2/8\", \"2013/2/18\", \"2013/2/19\", \"2013/2/20\",\n        \"2013/2/21\", \"2013/2/22\", \"2013/2/25\", \"2013/2/26\", \"2013/2/27\",\n        \"2013/2/28\", \"2013/3/1\", \"2013/3/4\", \"2013/3/5\", \"2013/3/6\",\n        \"2013/3/7\", \"2013/3/8\", \"2013/3/11\", \"2013/3/12\", \"2013/3/13\",\n        \"2013/3/14\", \"2013/3/15\", \"2013/3/18\", \"2013/3/19\", \"2013/3/20\",\n        \"2013/3/21\", \"2013/3/22\", \"2013/3/25\", \"2013/3/26\", \"2013/3/27\",\n        \"2013/3/28\", \"2013/3/29\", \"2013/4/1\", \"2013/4/2\", \"2013/4/3\",\n        \"2013/4/8\", \"2013/4/9\", \"2013/4/10\", \"2013/4/11\", \"2013/4/12\",\n        \"2013/4/15\", \"2013/4/16\", \"2013/4/17\", \"2013/4/18\", \"2013/4/19\",\n        \"2013/4/22\", \"2013/4/23\", \"2013/4/24\", \"2013/4/25\", \"2013/4/26\",\n        \"2013/5/2\", \"2013/5/3\", \"2013/5/6\", \"2013/5/7\", \"2013/5/8\",\n        \"2013/5/9\", \"2013/5/10\", \"2013/5/13\", \"2013/5/14\", \"2013/5/15\",\n        \"2013/5/16\", \"2013/5/17\", \"2013/5/20\", \"2013/5/21\", \"2013/5/22\",\n        \"2013/5/23\", \"2013/5/24\", \"2013/5/27\", \"2013/5/28\", \"2013/5/29\",\n        \"2013/5/30\", \"2013/5/31\", \"2013/6/3\", \"2013/6/4\", \"2013/6/5\",\n        \"2013/6/6\", \"2013/6/7\", \"2013/6/13\"],\n\n        \"series\": [{\n          \"name\": \"成交量1\",\n          \"data\": [15, 20, 45, 37, 43, 15, 20, 45, 37, 43, 15, 20, 45, 37, 43, 15, 20,\n          45, 37, 43, 15, 20, 45, 37, 43, 15, 20, 45, 37, 43, 15, 20, 45, 37, 43, 15, 20,\n          45, 37, 43, 15, 20, 45, 37, 43, 15, 20, 45, 37, 43, 15, 20, 45, 37, 43, 15, 20,\n          45, 37, 43, 15, 20, 45, 37, 43, 15, 20, 45, 37, 43, 15, 20, 45, 37, 43, 15, 20,\n          45, 37, 43, 15, 20, 45, 37, 43, 15, 20, 45] }] } };\n\n\n\n\n  },\n  onLoad: function onLoad() {\n    _self = this;\n\n\n\n\n\n\n\n\n\n\n\n    this.cWidth = uni.upx2px(750);\n    this.cHeight = uni.upx2px(500);\n    this.cHeight2 = uni.upx2px(200);\n    // this.getServerData();\n    _self.showCandle(\"canvasCandle\", this.Candle);\n    _self.showColumn(\"canvasColumn\", this.CandleColumn);\n  },\n  methods: {\n    // getServerData() {\n    // \tuni.request({\n    // \t\turl: 'https://www.ucharts.cn/data.json',\n    // \t\tdata: {},\n    // \t\tsuccess: function(res) {\n    // \t\t\tconsole.log(res.data.data)\n    // \t\t\tlet Candle = {\n    // \t\t\t\tcategories: [],\n    // \t\t\t\tseries: []\n    // \t\t\t};\n    // \t\t\t//这里我后台返回的是数组，所以用等于，如果您后台返回的是单条数据，需要push进去\n    // \t\t\tCandle.categories = res.data.data.Candle.categories;\n    // \t\t\tCandle.series = res.data.data.Candle.series;\n    // \t\t\t_self.showCandle(\"canvasCandle\", Candle);\n    // \t\t},\n    // \t\tfail: () => {\n    // \t\t\t_self.tips = \"网络错误，小程序端请检查合法域名\";\n    // \t\t},\n    // \t});\n    // },\n    showCandle: function showCandle(canvasId, chartData) {\n      __f__(\"log\", \"kabu name:\", this.chartData1.series[0].name, \" at pages/stockquot/Kline.vue:339\");\n      canvaCandle = new _uCharts.default({\n        $this: _self,\n        canvasId: canvasId,\n        type: 'candle',\n        fontSize: 11,\n        padding: [10, 15, 0, 15],\n        legend: {\n          show: true },\n\n        background: '#FFFFFF',\n        pixelRatio: _self.pixelRatio,\n        categories: chartData.categories,\n        series: chartData.series,\n        animation: false,\n        enableScroll: true,\n        xAxis: {\n          disableGrid: true,\n          labelCount: 4,\n          //type:'grid',\n          //gridType:'dash',\n          itemCount: _self.itemCount,\n          scrollShow: true,\n          scrollAlign: 'right' },\n\n        yAxis: {\n          //disabled:true\n          gridType: 'dash',\n          splitNumber: 5,\n          format: function format(val) {\n            return val.toFixed(0);\n          } },\n\n        width: _self.cWidth * _self.pixelRatio,\n        height: _self.cHeight * _self.pixelRatio,\n        dataLabel: false,\n        dataPointShape: true,\n        extra: {\n          candle: {\n            color: {\n              upLine: '#f04864',\n              upFill: '#f04864',\n              downLine: '#2fc25b',\n              downFill: '#2fc25b' },\n\n            average: {\n              show: true,\n              name: ['MA5', 'MA10', 'MA30'],\n              day: [5, 10, 20],\n              color: ['#1890ff', '#2fc25b', '#facc14'] } },\n\n\n          tooltip: {\n            bgColor: '#000000',\n            bgOpacity: 0.7,\n            gridType: 'dash',\n            dashLength: 5,\n            gridColor: '#1890ff',\n            fontColor: '#FFFFFF',\n            horizentalLine: true,\n            xAxisLabel: true,\n            yAxisLabel: true,\n            labelBgColor: '#DFE8FF',\n            labelBgOpacity: 0.95,\n            labelAlign: 'left',\n            labelFontColor: '#666666' } } });\n\n\n\n      __f__(\"log\", \"NEW：：：\", canvaCandle, \" at pages/stockquot/Kline.vue:408\");\n\n    },\n    touchCandle: function touchCandle(e) {\n      canvaCandle.scrollStart(e);\n    },\n    moveCandle: function moveCandle(e) {\n      var distance = canvaCandle.scroll(e);\n      if (distance !== undefined) {\n        canvaColumn.translate(distance);\n      }\n    },\n    touchEndCandle: function touchEndCandle(e) {\n      canvaCandle.scrollEnd(e);\n      //下面是toolTip事件，如果滚动后不需要显示，可不填写\n      canvaCandle.showToolTip(e, {\n        format: function format(item, category) {\n          return category + ' ' + item.name + ':' + item.data;\n        } });\n\n    },\n    tapButton: function tapButton(type) {\n      var step = 5;\n      if (type == 'in') {\n        _self.itemCount -= step;\n        if (_self.itemCount <= 5) {\n          _self.itemCount = 5;\n        }\n      } else {\n        _self.itemCount += step;\n        if (_self.itemCount >= _self.sliderMax) {\n          _self.itemCount = _self.sliderMax;\n        }\n      }\n      _self.zoomCandle(_self.itemCount);\n    },\n    sliderMove: function sliderMove(e) {\n      _self.itemCount = e.detail.value;\n      _self.zoomCandle(e.detail.value);\n    },\n    zoomCandle: function zoomCandle(val) {\n      canvaCandle.zoom({\n        itemCount: val });\n\n      canvaColumn.zoom({\n        itemCount: val });\n\n    },\n    onClickItem: function onClickItem(e) {\n      if (this.current !== e.currentIndex) {\n        this.current = e.currentIndex;\n        if (this.current === 0) {\n          this.chartData = this.chartData1;\n          __f__(\"log\", \"data1:\", this.chartData, \" at pages/stockquot/Kline.vue:461\");\n          this.showCandle(\"canvasCandle\", this.chartData);\n        } else if (this.current === 1) {\n          this.chartData = this.chartData2;\n          __f__(\"log\", \"data2:\", this.chartData, \" at pages/stockquot/Kline.vue:465\");\n          this.showCandle(\"canvasCandle\", this.chartData);\n        } else {\n          this.chartData = this.chartData3;\n          this.showCandle(\"canvasCandle\", this.chartData);\n        }\n      }\n    },\n    onKeyInput: function onKeyInput(event) {\n      this.inputValue = event.target.value;\n      __f__(\"log\", \"id:\", this.inputValue, \" at pages/stockquot/Kline.vue:475\");\n    },\n    kabuSearch: function kabuSearch() {\n      __f__(\"log\", \"kabu  Search\", \" at pages/stockquot/Kline.vue:478\");\n      var that = this;\n      var searchid = this.inputValue;\n      __f__(\"log\", 'ID :', this.inputValue, \" at pages/stockquot/Kline.vue:481\");\n      if (searchid === '2897') {\n        this.ChartData1 = this.Candle;\n        __f__(\"log\", \"chartdata:\", this.ChartData, \" at pages/stockquot/Kline.vue:484\");\n        this.showCandle(\"canvasCandle\", this.chartData);\n        this.chartData1.series[0].name = \"日清食品ホールディングス(株)\";\n        this.chartData1.series[0].ID = \"2897\";\n      } else if (searchid === '2914') {\n        this.ChartData = this.chartData2;\n        __f__(\"log\", \"chartdata:\", this.ChartData, \" at pages/stockquot/Kline.vue:490\");\n        this.showCandle(\"canvasCandle\", this.chartData2);\n        this.chartData1.series[0].name = \"ＪＴ\";\n        this.chartData1.series[0].ID = \"2914\";\n      }\n    },\n    showColumn: function showColumn(canvasId, chartData) {\n      __f__(\"log\", \"cahrtdata:\", chartData, \" at pages/stockquot/Kline.vue:497\");\n      __f__(\"log\", \"canvasId:\", canvasId, \" at pages/stockquot/Kline.vue:498\");\n      canvaColumn = new _uCharts.default({\n        $this: _self,\n        canvasId: canvasId,\n        type: 'column',\n        padding: [10, 15, 0, 15],\n        legend: {\n          show: false },\n\n        fontSize: 11,\n        background: '#FFFFFF',\n        pixelRatio: _self.pixelRatio,\n        animation: false,\n        enableScroll: true,\n        dataLabel: false,\n        categories: chartData.categories,\n        series: chartData.series,\n        xAxis: {\n          disabled: true,\n          disableGrid: true,\n          labelCount: 4,\n          itemCount: _self.itemCount,\n          scrollAlign: 'right' },\n\n        yAxis: {\n          disableGrid: true,\n          splitNumber: 3,\n          min: 0,\n          format: function format(val) {\n            return val.toFixed(0);\n          } },\n\n        width: _self.cWidth * _self.pixelRatio,\n        height: _self.cHeight2 * _self.pixelRatio,\n        extra: {\n          column: {\n            type: 'group' } } });\n\n\n\n\n    },\n    touchColumn: function touchColumn(e) {\n      canvaColumn.showToolTip(e, {\n        format: function format(item, category) {\n          if (typeof item.data === 'object') {\n            return category + ' ' + item.name + ':' + item.data.value;\n          } else {\n            return category + ' ' + item.name + ':' + item.data;\n          }\n        } });\n\n    } } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 7)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! exports provided: log, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "log", function() { return log; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return formatLog; });
function typof (v) {
  var s = Object.prototype.toString.call(v)
  return s.substring(8, s.length - 1)
}

function isDebugMode () {
  /* eslint-disable no-undef */
  return typeof __channelId__ === 'string' && __channelId__
}

function jsonStringifyReplacer (k, p) {
  switch (typof(p)) {
    case 'Function':
      return 'function() { [native code] }'
    default :
      return p
  }
}

function log (type) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key]
  }
  console[type].apply(console, args)
}

function formatLog () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key]
  }
  var type = args.shift()
  if (isDebugMode()) {
    args.push(args.pop().replace('at ', 'uni-app:///'))
    return console[type].apply(console, args)
  }

  var msgs = args.map(function (v) {
    var type = Object.prototype.toString.call(v).toLowerCase()

    if (type === '[object object]' || type === '[object array]') {
      try {
        v = '---BEGIN:JSON---' + JSON.stringify(v, jsonStringifyReplacer) + '---END:JSON---'
      } catch (e) {
        v = type
      }
    } else {
      if (v === null) {
        v = '---NULL---'
      } else if (v === undefined) {
        v = '---UNDEFINED---'
      } else {
        var vType = typof(v).toUpperCase()

        if (vType === 'NUMBER' || vType === 'BOOLEAN') {
          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---'
        } else {
          v = String(v)
        }
      }
    }

    return v
  })
  var msg = ''

  if (msgs.length > 1) {
    var lastMsg = msgs.pop()
    msg = msgs.join('---COMMA---')

    if (lastMsg.indexOf(' at ') === 0) {
      msg += lastMsg
    } else {
      msg += '---COMMA---' + lastMsg
    }
  } else {
    msg = msgs[0]
  }

  console[type](msg)
}


/***/ }),
/* 8 */
/*!*******************************************************************!*\
  !*** D:/GitProject/kabu/components/u-charts/u-charts/u-charts.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {/*\r\n * uCharts v1.9.6.20210214\r\n * uni-app平台高性能跨全端图表，支持H5、APP、小程序（微信/支付宝/百度/头条/QQ/360）\r\n * Copyright (c) 2021 QIUN秋云 https://www.ucharts.cn All rights reserved.\r\n * Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )\r\n * \r\n * uCharts官方网站\r\n * https://www.uCharts.cn\r\n * \r\n * 开源地址:\r\n * https://gitee.com/uCharts/uCharts\r\n * \r\n * uni-app插件市场地址：\r\n * http://ext.dcloud.net.cn/plugin?id=271\r\n * \r\n */\n\n\n\nvar config = {\n  yAxisWidth: 15,\n  yAxisSplit: 5,\n  xAxisHeight: 15,\n  xAxisLineHeight: 15,\n  legendHeight: 15,\n  yAxisTitleWidth: 15,\n  padding: [10, 10, 10, 10],\n  pixelRatio: 1,\n  rotate: false,\n  columePadding: 3,\n  fontSize: 13,\n  //dataPointShape: ['diamond', 'circle', 'triangle', 'rect'],\n  dataPointShape: ['circle', 'circle', 'circle', 'circle'],\n  colors: ['#1890ff', '#2fc25b', '#facc14', '#f04864', '#8543e0', '#90ed7d'],\n  pieChartLinePadding: 15,\n  pieChartTextPadding: 5,\n  xAxisTextPadding: 3,\n  titleColor: '#333333',\n  titleFontSize: 20,\n  subtitleColor: '#999999',\n  subtitleFontSize: 15,\n  toolTipPadding: 3,\n  toolTipBackground: '#000000',\n  toolTipOpacity: 0.7,\n  toolTipLineHeight: 20,\n  radarLabelTextMargin: 15,\n  gaugeLabelTextMargin: 15 };\n\n\nvar assign = function assign(target) {for (var _len2 = arguments.length, varArgs = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {varArgs[_key2 - 1] = arguments[_key2];}\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n  if (!varArgs || varArgs.length <= 0) {\n    return target;\n  }\n  // 深度合并对象\n  function deepAssign(obj1, obj2) {\n    for (var key in obj2) {\n      obj1[key] = obj1[key] && obj1[key].toString() === \"[object Object]\" ?\n      deepAssign(obj1[key], obj2[key]) : obj1[key] = obj2[key];\n    }\n    return obj1;\n  }\n\n  varArgs.forEach(function (val) {\n    target = deepAssign(target, val);\n  });\n  return target;\n};\n\nvar util = {\n  toFixed: function toFixed(num, limit) {\n    limit = limit || 2;\n    if (this.isFloat(num)) {\n      num = num.toFixed(limit);\n    }\n    return num;\n  },\n  isFloat: function isFloat(num) {\n    return num % 1 !== 0;\n  },\n  approximatelyEqual: function approximatelyEqual(num1, num2) {\n    return Math.abs(num1 - num2) < 1e-10;\n  },\n  isSameSign: function isSameSign(num1, num2) {\n    return Math.abs(num1) === num1 && Math.abs(num2) === num2 || Math.abs(num1) !== num1 && Math.abs(num2) !== num2;\n  },\n  isSameXCoordinateArea: function isSameXCoordinateArea(p1, p2) {\n    return this.isSameSign(p1.x, p2.x);\n  },\n  isCollision: function isCollision(obj1, obj2) {\n    obj1.end = {};\n    obj1.end.x = obj1.start.x + obj1.width;\n    obj1.end.y = obj1.start.y - obj1.height;\n    obj2.end = {};\n    obj2.end.x = obj2.start.x + obj2.width;\n    obj2.end.y = obj2.start.y - obj2.height;\n    var flag = obj2.start.x > obj1.end.x || obj2.end.x < obj1.start.x || obj2.end.y > obj1.start.y || obj2.start.y < obj1.end.y;\n    return !flag;\n  } };\n\n\n//兼容H5点击事件\nfunction getH5Offset(e) {\n  e.mp = {\n    changedTouches: [] };\n\n  e.mp.changedTouches.push({\n    x: e.offsetX,\n    y: e.offsetY });\n\n  return e;\n}\n\n// hex 转 rgba\nfunction hexToRgb(hexValue, opc) {\n  var rgx = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  var hex = hexValue.replace(rgx, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n  var rgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  var r = parseInt(rgb[1], 16);\n  var g = parseInt(rgb[2], 16);\n  var b = parseInt(rgb[3], 16);\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + opc + ')';\n}\n\nfunction findRange(num, type, limit) {\n  if (isNaN(num)) {\n    throw new Error('[uCharts] unvalid series data!');\n  }\n  limit = limit || 10;\n  type = type ? type : 'upper';\n  var multiple = 1;\n  while (limit < 1) {\n    limit *= 10;\n    multiple *= 10;\n  }\n  if (type === 'upper') {\n    num = Math.ceil(num * multiple);\n  } else {\n    num = Math.floor(num * multiple);\n  }\n  while (num % limit !== 0) {\n    if (type === 'upper') {\n      num++;\n    } else {\n      num--;\n    }\n  }\n  return num / multiple;\n}\n\nfunction calCandleMA(dayArr, nameArr, colorArr, kdata) {\n  var seriesTemp = [];\n  for (var k = 0; k < dayArr.length; k++) {\n    var seriesItem = {\n      data: [],\n      name: nameArr[k],\n      color: colorArr[k] };\n\n    for (var i = 0, len = kdata.length; i < len; i++) {\n      if (i < dayArr[k]) {\n        seriesItem.data.push(null);\n        continue;\n      }\n      var sum = 0;\n      for (var j = 0; j < dayArr[k]; j++) {\n        sum += kdata[i - j][1];\n      }\n      seriesItem.data.push(+(sum / dayArr[k]).toFixed(3));\n    }\n    seriesTemp.push(seriesItem);\n  }\n  return seriesTemp;\n}\n\nfunction calValidDistance(self, distance, chartData, config, opts) {\n  var dataChartAreaWidth = opts.width - opts.area[1] - opts.area[3];\n  var dataChartWidth = chartData.eachSpacing * (opts.chartData.xAxisData.xAxisPoints.length - 1);\n  var validDistance = distance;\n  if (distance >= 0) {\n    validDistance = 0;\n    self.event.trigger('scrollLeft');\n  } else if (Math.abs(distance) >= dataChartWidth - dataChartAreaWidth) {\n    validDistance = dataChartAreaWidth - dataChartWidth;\n    self.event.trigger('scrollRight');\n  }\n  return validDistance;\n}\n\nfunction isInAngleRange(angle, startAngle, endAngle) {\n  function adjust(angle) {\n    while (angle < 0) {\n      angle += 2 * Math.PI;\n    }\n    while (angle > 2 * Math.PI) {\n      angle -= 2 * Math.PI;\n    }\n    return angle;\n  }\n  angle = adjust(angle);\n  startAngle = adjust(startAngle);\n  endAngle = adjust(endAngle);\n  if (startAngle > endAngle) {\n    endAngle += 2 * Math.PI;\n    if (angle < startAngle) {\n      angle += 2 * Math.PI;\n    }\n  }\n  return angle >= startAngle && angle <= endAngle;\n}\n\nfunction calRotateTranslate(x, y, h) {\n  var xv = x;\n  var yv = h - y;\n  var transX = xv + (h - yv - xv) / Math.sqrt(2);\n  transX *= -1;\n  var transY = (h - yv) * (Math.sqrt(2) - 1) - (h - yv - xv) / Math.sqrt(2);\n  return {\n    transX: transX,\n    transY: transY };\n\n}\n\nfunction createCurveControlPoints(points, i) {\n\n  function isNotMiddlePoint(points, i) {\n    if (points[i - 1] && points[i + 1]) {\n      return points[i].y >= Math.max(points[i - 1].y, points[i + 1].y) || points[i].y <= Math.min(points[i - 1].y, points[i + 1].y);\n    } else {\n      return false;\n    }\n  }\n  function isNotMiddlePointX(points, i) {\n    if (points[i - 1] && points[i + 1]) {\n      return points[i].x >= Math.max(points[i - 1].x, points[i + 1].x) || points[i].x <= Math.min(points[i - 1].x, points[i + 1].x);\n    } else {\n      return false;\n    }\n  }\n  var a = 0.2;\n  var b = 0.2;\n  var pAx = null;\n  var pAy = null;\n  var pBx = null;\n  var pBy = null;\n  if (i < 1) {\n    pAx = points[0].x + (points[1].x - points[0].x) * a;\n    pAy = points[0].y + (points[1].y - points[0].y) * a;\n  } else {\n    pAx = points[i].x + (points[i + 1].x - points[i - 1].x) * a;\n    pAy = points[i].y + (points[i + 1].y - points[i - 1].y) * a;\n  }\n\n  if (i > points.length - 3) {\n    var last = points.length - 1;\n    pBx = points[last].x - (points[last].x - points[last - 1].x) * b;\n    pBy = points[last].y - (points[last].y - points[last - 1].y) * b;\n  } else {\n    pBx = points[i + 1].x - (points[i + 2].x - points[i].x) * b;\n    pBy = points[i + 1].y - (points[i + 2].y - points[i].y) * b;\n  }\n  if (isNotMiddlePoint(points, i + 1)) {\n    pBy = points[i + 1].y;\n  }\n  if (isNotMiddlePoint(points, i)) {\n    pAy = points[i].y;\n  }\n  if (isNotMiddlePointX(points, i + 1)) {\n    pBx = points[i + 1].x;\n  }\n  if (isNotMiddlePointX(points, i)) {\n    pAx = points[i].x;\n  }\n  if (pAy >= Math.max(points[i].y, points[i + 1].y) || pAy <= Math.min(points[i].y, points[i + 1].y)) {\n    pAy = points[i].y;\n  }\n  if (pBy >= Math.max(points[i].y, points[i + 1].y) || pBy <= Math.min(points[i].y, points[i + 1].y)) {\n    pBy = points[i + 1].y;\n  }\n  if (pAx >= Math.max(points[i].x, points[i + 1].x) || pAx <= Math.min(points[i].x, points[i + 1].x)) {\n    pAx = points[i].x;\n  }\n  if (pBx >= Math.max(points[i].x, points[i + 1].x) || pBx <= Math.min(points[i].x, points[i + 1].x)) {\n    pBx = points[i + 1].x;\n  }\n  return {\n    ctrA: {\n      x: pAx,\n      y: pAy },\n\n    ctrB: {\n      x: pBx,\n      y: pBy } };\n\n\n}\n\nfunction convertCoordinateOrigin(x, y, center) {\n  return {\n    x: center.x + x,\n    y: center.y - y };\n\n}\n\nfunction avoidCollision(obj, target) {\n  if (target) {\n    // is collision test\n    while (util.isCollision(obj, target)) {\n      if (obj.start.x > 0) {\n        obj.start.y--;\n      } else if (obj.start.x < 0) {\n        obj.start.y++;\n      } else {\n        if (obj.start.y > 0) {\n          obj.start.y++;\n        } else {\n          obj.start.y--;\n        }\n      }\n    }\n  }\n  return obj;\n}\n\nfunction fillSeries(series, opts, config) {\n  var index = 0;\n  return series.map(function (item) {\n    if (!item.color) {\n      item.color = config.colors[index];\n      index = (index + 1) % config.colors.length;\n    }\n    if (!item.index) {\n      item.index = 0;\n    }\n    if (!item.type) {\n      item.type = opts.type;\n    }\n    if (typeof item.show == \"undefined\") {\n      item.show = true;\n    }\n    if (!item.type) {\n      item.type = opts.type;\n    }\n    if (!item.pointShape) {\n      item.pointShape = \"circle\";\n    }\n    if (!item.legendShape) {\n      switch (item.type) {\n        case 'line':\n          item.legendShape = \"line\";\n          break;\n        case 'column':\n          item.legendShape = \"rect\";\n          break;\n        case 'area':\n          item.legendShape = \"triangle\";\n          break;\n        default:\n          item.legendShape = \"circle\";}\n\n    }\n    return item;\n  });\n}\n\nfunction getDataRange(minData, maxData) {\n  var limit = 0;\n  var range = maxData - minData;\n  if (range >= 10000) {\n    limit = 1000;\n  } else if (range >= 1000) {\n    limit = 100;\n  } else if (range >= 100) {\n    limit = 10;\n  } else if (range >= 10) {\n    limit = 5;\n  } else if (range >= 1) {\n    limit = 1;\n  } else if (range >= 0.1) {\n    limit = 0.1;\n  } else if (range >= 0.01) {\n    limit = 0.01;\n  } else if (range >= 0.001) {\n    limit = 0.001;\n  } else if (range >= 0.0001) {\n    limit = 0.0001;\n  } else if (range >= 0.00001) {\n    limit = 0.00001;\n  } else {\n    limit = 0.000001;\n  }\n  return {\n    minRange: findRange(minData, 'lower', limit),\n    maxRange: findRange(maxData, 'upper', limit) };\n\n}\n\nfunction measureText(text) {\n  var fontSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : config.fontSize;\n  text = String(text);\n  var text = text.split('');\n  var width = 0;\n  for (var i = 0; i < text.length; i++) {\n    var item = text[i];\n    if (/[a-zA-Z]/.test(item)) {\n      width += 7;\n    } else if (/[0-9]/.test(item)) {\n      width += 5.5;\n    } else if (/\\./.test(item)) {\n      width += 2.7;\n    } else if (/-/.test(item)) {\n      width += 3.25;\n    } else if (/[\\u4e00-\\u9fa5]/.test(item)) {\n      width += 10;\n    } else if (/\\(|\\)/.test(item)) {\n      width += 3.73;\n    } else if (/\\s/.test(item)) {\n      width += 2.5;\n    } else if (/%/.test(item)) {\n      width += 8;\n    } else {\n      width += 10;\n    }\n  }\n  return width * fontSize / 10;\n}\n\nfunction dataCombine(series) {\n  return series.reduce(function (a, b) {\n    return (a.data ? a.data : a).concat(b.data);\n  }, []);\n}\n\nfunction dataCombineStack(series, len) {\n  var sum = new Array(len);\n  for (var j = 0; j < sum.length; j++) {\n    sum[j] = 0;\n  }\n  for (var i = 0; i < series.length; i++) {\n    for (var j = 0; j < sum.length; j++) {\n      sum[j] += series[i].data[j];\n    }\n  }\n  return series.reduce(function (a, b) {\n    return (a.data ? a.data : a).concat(b.data).concat(sum);\n  }, []);\n}\n\nfunction getTouches(touches, opts, e) {\n  var x, y;\n  if (touches.clientX) {\n    if (opts.rotate) {\n      y = opts.height - touches.clientX * opts.pixelRatio;\n      x = (touches.pageY - e.currentTarget.offsetTop - opts.height / opts.pixelRatio / 2 * (opts.pixelRatio - 1)) * opts.pixelRatio;\n    } else {\n      x = touches.clientX * opts.pixelRatio;\n      y = (touches.pageY - e.currentTarget.offsetTop - opts.height / opts.pixelRatio / 2 * (opts.pixelRatio - 1)) * opts.pixelRatio;\n    }\n  } else {\n    if (opts.rotate) {\n      y = opts.height - touches.x * opts.pixelRatio;\n      x = touches.y * opts.pixelRatio;\n    } else {\n      x = touches.x * opts.pixelRatio;\n      y = touches.y * opts.pixelRatio;\n    }\n  }\n  return {\n    x: x,\n    y: y };\n\n}\n\nfunction getSeriesDataItem(series, index) {\n  var data = [];\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    if (item.data[index] !== null && typeof item.data[index] !== 'undefined' && item.show) {\n      var seriesItem = {};\n      seriesItem.color = item.color;\n      seriesItem.type = item.type;\n      seriesItem.style = item.style;\n      seriesItem.pointShape = item.pointShape;\n      seriesItem.disableLegend = item.disableLegend;\n      seriesItem.name = item.name;\n      seriesItem.show = item.show;\n      seriesItem.data = item.format ? item.format(item.data[index]) : item.data[index];\n      data.push(seriesItem);\n    }\n  }\n  return data;\n}\n\nfunction getMaxTextListLength(list) {\n  var lengthList = list.map(function (item) {\n    return measureText(item);\n  });\n  return Math.max.apply(null, lengthList);\n}\n\nfunction getRadarCoordinateSeries(length) {\n  var eachAngle = 2 * Math.PI / length;\n  var CoordinateSeries = [];\n  for (var i = 0; i < length; i++) {\n    CoordinateSeries.push(eachAngle * i);\n  }\n\n  return CoordinateSeries.map(function (item) {\n    return -1 * item + Math.PI / 2;\n  });\n}\n\nfunction getToolTipData(seriesData, calPoints, index, categories) {\n  var option = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n  var textList = seriesData.map(function (item) {\n    var titleText = [];\n    if (categories) {\n      titleText = categories;\n    } else {\n      titleText = item.data;\n    }\n    return {\n      text: option.format ? option.format(item, titleText[index]) : item.name + ': ' + item.data,\n      color: item.color };\n\n  });\n  var validCalPoints = [];\n  var offset = {\n    x: 0,\n    y: 0 };\n\n  for (var i = 0; i < calPoints.length; i++) {\n    var points = calPoints[i];\n    if (typeof points[index] !== 'undefined' && points[index] !== null) {\n      validCalPoints.push(points[index]);\n    }\n  }\n  for (var _i = 0; _i < validCalPoints.length; _i++) {\n    var item = validCalPoints[_i];\n    offset.x = Math.round(item.x);\n    offset.y += item.y;\n  }\n  offset.y /= validCalPoints.length;\n  return {\n    textList: textList,\n    offset: offset };\n\n}\n\nfunction getMixToolTipData(seriesData, calPoints, index, categories) {\n  var option = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  var textList = seriesData.map(function (item) {\n    return {\n      text: option.format ? option.format(item, categories[index]) : item.name + ': ' + item.data,\n      color: item.color,\n      disableLegend: item.disableLegend ? true : false };\n\n  });\n  textList = textList.filter(function (item) {\n    if (item.disableLegend !== true) {\n      return item;\n    }\n  });\n  var validCalPoints = [];\n  var offset = {\n    x: 0,\n    y: 0 };\n\n  for (var i = 0; i < calPoints.length; i++) {\n    var points = calPoints[i];\n    if (typeof points[index] !== 'undefined' && points[index] !== null) {\n      validCalPoints.push(points[index]);\n    }\n  }\n  for (var _i2 = 0; _i2 < validCalPoints.length; _i2++) {\n    var item = validCalPoints[_i2];\n    offset.x = Math.round(item.x);\n    offset.y += item.y;\n  }\n  offset.y /= validCalPoints.length;\n  return {\n    textList: textList,\n    offset: offset };\n\n}\n\nfunction getCandleToolTipData(series, seriesData, calPoints, index, categories, extra) {\n  var option = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n  var upColor = extra.color.upFill;\n  var downColor = extra.color.downFill;\n  //颜色顺序为开盘，收盘，最低，最高\n  var color = [upColor, upColor, downColor, upColor];\n  var textList = [];\n  var text0 = {\n    text: categories[index],\n    color: null };\n\n  textList.push(text0);\n  seriesData.map(function (item) {\n    if (index == 0) {\n      if (item.data[1] - item.data[0] < 0) {\n        color[1] = downColor;\n      } else {\n        color[1] = upColor;\n      }\n    } else {\n      if (item.data[0] < series[index - 1][1]) {\n        color[0] = downColor;\n      }\n      if (item.data[1] < item.data[0]) {\n        color[1] = downColor;\n      }\n      if (item.data[2] > series[index - 1][1]) {\n        color[2] = upColor;\n      }\n      if (item.data[3] < series[index - 1][1]) {\n        color[3] = downColor;\n      }\n    }\n    var text1 = {\n      text: 'open：' + item.data[0],\n      color: color[0] };\n\n    var text2 = {\n      text: 'close：' + item.data[1],\n      color: color[1] };\n\n    var text3 = {\n      text: 'min：' + item.data[2],\n      color: color[2] };\n\n    var text4 = {\n      text: 'max：' + item.data[3],\n      color: color[3] };\n\n    textList.push(text1, text2, text3, text4);\n  });\n  var validCalPoints = [];\n  var offset = {\n    x: 0,\n    y: 0 };\n\n  for (var i = 0; i < calPoints.length; i++) {\n    var points = calPoints[i];\n    if (typeof points[index] !== 'undefined' && points[index] !== null) {\n      validCalPoints.push(points[index]);\n    }\n  }\n  offset.x = Math.round(validCalPoints[0][0].x);\n  return {\n    textList: textList,\n    offset: offset };\n\n}\n\nfunction filterSeries(series) {\n  var tempSeries = [];\n  for (var i = 0; i < series.length; i++) {\n    if (series[i].show == true) {\n      tempSeries.push(series[i]);\n    }\n  }\n  return tempSeries;\n}\n\nfunction findCurrentIndex(currentPoints, calPoints, opts, config) {\n  var offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  var currentIndex = -1;\n  var spacing = opts.chartData.eachSpacing / 2;\n  var xAxisPoints = [];\n  if (calPoints.length > 0) {\n    for (var i = 1; i < opts.chartData.xAxisPoints.length; i++) {\n      xAxisPoints.push(opts.chartData.xAxisPoints[i] - spacing);\n    }\n    if ((opts.type == 'line' || opts.type == 'area') && opts.xAxis.boundaryGap == 'justify') {\n      spacing = opts.chartData.eachSpacing / 2;\n    }\n    if (!opts.categories) {\n      spacing = 0;\n    }\n    if (isInExactChartArea(currentPoints, opts, config)) {\n      xAxisPoints.forEach(function (item, index) {\n        if (currentPoints.x + offset + spacing > item) {\n          currentIndex = index;\n        }\n      });\n    }\n  }\n  return currentIndex;\n}\n\nfunction findLegendIndex(currentPoints, legendData, opts) {\n  var currentIndex = -1;\n  if (isInExactLegendArea(currentPoints, legendData.area)) {\n    var points = legendData.points;\n    var index = -1;\n    for (var i = 0, len = points.length; i < len; i++) {\n      var item = points[i];\n      for (var j = 0; j < item.length; j++) {\n        index += 1;\n        var area = item[j]['area'];\n        if (currentPoints.x > area[0] && currentPoints.x < area[2] && currentPoints.y > area[1] && currentPoints.y < area[3]) {\n          currentIndex = index;\n          break;\n        }\n      }\n    }\n    return currentIndex;\n  }\n  return currentIndex;\n}\n\nfunction isInExactLegendArea(currentPoints, area) {\n  return currentPoints.x > area.start.x && currentPoints.x < area.end.x && currentPoints.y > area.start.y &&\n  currentPoints.y < area.end.y;\n}\n\nfunction isInExactChartArea(currentPoints, opts, config) {\n  return currentPoints.x <= opts.width - opts.area[1] + 10 && currentPoints.x >= opts.area[3] - 10 && currentPoints.y >= opts.area[0] && currentPoints.y <= opts.height - opts.area[2];\n}\n\nfunction findRadarChartCurrentIndex(currentPoints, radarData, count) {\n  var eachAngleArea = 2 * Math.PI / count;\n  var currentIndex = -1;\n  if (isInExactPieChartArea(currentPoints, radarData.center, radarData.radius)) {\n    var fixAngle = function fixAngle(angle) {\n      if (angle < 0) {\n        angle += 2 * Math.PI;\n      }\n      if (angle > 2 * Math.PI) {\n        angle -= 2 * Math.PI;\n      }\n      return angle;\n    };\n\n    var angle = Math.atan2(radarData.center.y - currentPoints.y, currentPoints.x - radarData.center.x);\n    angle = -1 * angle;\n    if (angle < 0) {\n      angle += 2 * Math.PI;\n    }\n\n    var angleList = radarData.angleList.map(function (item) {\n      item = fixAngle(-1 * item);\n\n      return item;\n    });\n\n    angleList.forEach(function (item, index) {\n      var rangeStart = fixAngle(item - eachAngleArea / 2);\n      var rangeEnd = fixAngle(item + eachAngleArea / 2);\n      if (rangeEnd < rangeStart) {\n        rangeEnd += 2 * Math.PI;\n      }\n      if (angle >= rangeStart && angle <= rangeEnd || angle + 2 * Math.PI >= rangeStart && angle + 2 * Math.PI <=\n      rangeEnd) {\n        currentIndex = index;\n      }\n    });\n  }\n\n  return currentIndex;\n}\n\nfunction findFunnelChartCurrentIndex(currentPoints, funnelData) {\n  var currentIndex = -1;\n  for (var i = 0, len = funnelData.series.length; i < len; i++) {\n    var item = funnelData.series[i];\n    if (currentPoints.x > item.funnelArea[0] && currentPoints.x < item.funnelArea[2] && currentPoints.y > item.funnelArea[1] && currentPoints.y < item.funnelArea[3]) {\n      currentIndex = i;\n      break;\n    }\n  }\n  return currentIndex;\n}\n\nfunction findWordChartCurrentIndex(currentPoints, wordData) {\n  var currentIndex = -1;\n  for (var i = 0, len = wordData.length; i < len; i++) {\n    var item = wordData[i];\n    if (currentPoints.x > item.area[0] && currentPoints.x < item.area[2] && currentPoints.y > item.area[1] && currentPoints.y < item.area[3]) {\n      currentIndex = i;\n      break;\n    }\n  }\n  return currentIndex;\n}\n\nfunction findMapChartCurrentIndex(currentPoints, opts) {\n  var currentIndex = -1;\n  var cData = opts.chartData.mapData;\n  var data = opts.series;\n  var tmp = pointToCoordinate(currentPoints.y, currentPoints.x, cData.bounds, cData.scale, cData.xoffset, cData.yoffset);\n  var poi = [tmp.x, tmp.y];\n  for (var i = 0, len = data.length; i < len; i++) {\n    var item = data[i].geometry.coordinates;\n    if (isPoiWithinPoly(poi, item)) {\n      currentIndex = i;\n      break;\n    }\n  }\n  return currentIndex;\n}\n\nfunction findPieChartCurrentIndex(currentPoints, pieData) {\n  var currentIndex = -1;\n  if (isInExactPieChartArea(currentPoints, pieData.center, pieData.radius)) {\n    var angle = Math.atan2(pieData.center.y - currentPoints.y, currentPoints.x - pieData.center.x);\n    angle = -angle;\n    for (var i = 0, len = pieData.series.length; i < len; i++) {\n      var item = pieData.series[i];\n      if (isInAngleRange(angle, item._start_, item._start_ + item._proportion_ * 2 * Math.PI)) {\n        currentIndex = i;\n        break;\n      }\n    }\n  }\n\n  return currentIndex;\n}\n\nfunction isInExactPieChartArea(currentPoints, center, radius) {\n  return Math.pow(currentPoints.x - center.x, 2) + Math.pow(currentPoints.y - center.y, 2) <= Math.pow(radius, 2);\n}\n\nfunction splitPoints(points) {\n  var newPoints = [];\n  var items = [];\n  points.forEach(function (item, index) {\n    if (item !== null) {\n      items.push(item);\n    } else {\n      if (items.length) {\n        newPoints.push(items);\n      }\n      items = [];\n    }\n  });\n  if (items.length) {\n    newPoints.push(items);\n  }\n\n  return newPoints;\n}\n\nfunction calLegendData(series, opts, config, chartData) {\n  var legendData = {\n    area: {\n      start: {\n        x: 0,\n        y: 0 },\n\n      end: {\n        x: 0,\n        y: 0 },\n\n      width: 0,\n      height: 0,\n      wholeWidth: 0,\n      wholeHeight: 0 },\n\n    points: [],\n    widthArr: [],\n    heightArr: [] };\n\n  if (opts.legend.show === false) {\n    chartData.legendData = legendData;\n    return legendData;\n  }\n\n  var padding = opts.legend.padding;\n  var margin = opts.legend.margin;\n  var fontSize = opts.legend.fontSize;\n  var shapeWidth = 15 * opts.pixelRatio;\n  var shapeRight = 5 * opts.pixelRatio;\n  var lineHeight = Math.max(opts.legend.lineHeight * opts.pixelRatio, fontSize);\n  if (opts.legend.position == 'top' || opts.legend.position == 'bottom') {\n    var legendList = [];\n    var widthCount = 0;\n    var widthCountArr = [];\n    var currentRow = [];\n    for (var i = 0; i < series.length; i++) {\n      var item = series[i];\n      var itemWidth = shapeWidth + shapeRight + measureText(item.name || 'undefined', fontSize) + opts.legend.itemGap;\n      if (widthCount + itemWidth > opts.width - opts.padding[1] - opts.padding[3]) {\n        legendList.push(currentRow);\n        widthCountArr.push(widthCount - opts.legend.itemGap);\n        widthCount = itemWidth;\n        currentRow = [item];\n      } else {\n        widthCount += itemWidth;\n        currentRow.push(item);\n      }\n    }\n    if (currentRow.length) {\n      legendList.push(currentRow);\n      widthCountArr.push(widthCount - opts.legend.itemGap);\n      legendData.widthArr = widthCountArr;\n      var legendWidth = Math.max.apply(null, widthCountArr);\n      switch (opts.legend.float) {\n        case 'left':\n          legendData.area.start.x = opts.padding[3];\n          legendData.area.end.x = opts.padding[3] + 2 * padding;\n          break;\n        case 'right':\n          legendData.area.start.x = opts.width - opts.padding[1] - legendWidth - 2 * padding;\n          legendData.area.end.x = opts.width - opts.padding[1];\n          break;\n        default:\n          legendData.area.start.x = (opts.width - legendWidth) / 2 - padding;\n          legendData.area.end.x = (opts.width + legendWidth) / 2 + padding;}\n\n      legendData.area.width = legendWidth + 2 * padding;\n      legendData.area.wholeWidth = legendWidth + 2 * padding;\n      legendData.area.height = legendList.length * lineHeight + 2 * padding;\n      legendData.area.wholeHeight = legendList.length * lineHeight + 2 * padding + 2 * margin;\n      legendData.points = legendList;\n    }\n  } else {\n    var len = series.length;\n    var maxHeight = opts.height - opts.padding[0] - opts.padding[2] - 2 * margin - 2 * padding;\n    var maxLength = Math.min(Math.floor(maxHeight / lineHeight), len);\n    legendData.area.height = maxLength * lineHeight + padding * 2;\n    legendData.area.wholeHeight = maxLength * lineHeight + padding * 2;\n    switch (opts.legend.float) {\n      case 'top':\n        legendData.area.start.y = opts.padding[0] + margin;\n        legendData.area.end.y = opts.padding[0] + margin + legendData.area.height;\n        break;\n      case 'bottom':\n        legendData.area.start.y = opts.height - opts.padding[2] - margin - legendData.area.height;\n        legendData.area.end.y = opts.height - opts.padding[2] - margin;\n        break;\n      default:\n        legendData.area.start.y = (opts.height - legendData.area.height) / 2;\n        legendData.area.end.y = (opts.height + legendData.area.height) / 2;}\n\n    var lineNum = len % maxLength === 0 ? len / maxLength : Math.floor(len / maxLength + 1);\n    var _currentRow = [];\n    for (var _i3 = 0; _i3 < lineNum; _i3++) {\n      var temp = series.slice(_i3 * maxLength, _i3 * maxLength + maxLength);\n      _currentRow.push(temp);\n    }\n\n    legendData.points = _currentRow;\n\n    if (_currentRow.length) {\n      for (var _i4 = 0; _i4 < _currentRow.length; _i4++) {\n        var _item = _currentRow[_i4];\n        var maxWidth = 0;\n        for (var j = 0; j < _item.length; j++) {\n          var _itemWidth = shapeWidth + shapeRight + measureText(_item[j].name || 'undefined', fontSize) + opts.legend.itemGap;\n          if (_itemWidth > maxWidth) {\n            maxWidth = _itemWidth;\n          }\n        }\n        legendData.widthArr.push(maxWidth);\n        legendData.heightArr.push(_item.length * lineHeight + padding * 2);\n      }\n      var _legendWidth = 0;\n      for (var _i5 = 0; _i5 < legendData.widthArr.length; _i5++) {\n        _legendWidth += legendData.widthArr[_i5];\n      }\n      legendData.area.width = _legendWidth - opts.legend.itemGap + 2 * padding;\n      legendData.area.wholeWidth = legendData.area.width + padding;\n    }\n  }\n\n  switch (opts.legend.position) {\n    case 'top':\n      legendData.area.start.y = opts.padding[0] + margin;\n      legendData.area.end.y = opts.padding[0] + margin + legendData.area.height;\n      break;\n    case 'bottom':\n      legendData.area.start.y = opts.height - opts.padding[2] - legendData.area.height - margin;\n      legendData.area.end.y = opts.height - opts.padding[2] - margin;\n      break;\n    case 'left':\n      legendData.area.start.x = opts.padding[3];\n      legendData.area.end.x = opts.padding[3] + legendData.area.width;\n      break;\n    case 'right':\n      legendData.area.start.x = opts.width - opts.padding[1] - legendData.area.width;\n      legendData.area.end.x = opts.width - opts.padding[1];\n      break;}\n\n  chartData.legendData = legendData;\n  return legendData;\n}\n\nfunction calCategoriesData(categories, opts, config, eachSpacing) {\n  var result = {\n    angle: 0,\n    xAxisHeight: config.xAxisHeight };\n\n  var categoriesTextLenth = categories.map(function (item) {\n    return measureText(item, opts.xAxis.fontSize || config.fontSize);\n  });\n  var maxTextLength = Math.max.apply(this, categoriesTextLenth);\n\n  if (opts.xAxis.rotateLabel == true && maxTextLength + 2 * config.xAxisTextPadding > eachSpacing) {\n    result.angle = 45 * Math.PI / 180;\n    result.xAxisHeight = 2 * config.xAxisTextPadding + maxTextLength * Math.sin(result.angle);\n  }\n  return result;\n}\n\nfunction getXAxisTextList(series, opts, config) {\n  var index = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\n  var data = dataCombine(series);\n  var sorted = [];\n  // remove null from data\n  data = data.filter(function (item) {\n    //return item !== null;\n    if (typeof item === 'object' && item !== null) {\n      if (item.constructor.toString().indexOf('Array') > -1) {\n        return item !== null;\n      } else {\n        return item.value !== null;\n      }\n    } else {\n      return item !== null;\n    }\n  });\n  data.map(function (item) {\n    if (typeof item === 'object') {\n      if (item.constructor.toString().indexOf('Array') > -1) {\n        if (opts.type == 'candle') {\n          item.map(function (subitem) {\n            sorted.push(subitem);\n          });\n        } else {\n          sorted.push(item[0]);\n        }\n      } else {\n        sorted.push(item.value);\n      }\n    } else {\n      sorted.push(item);\n    }\n  });\n\n  var minData = 0;\n  var maxData = 0;\n  if (sorted.length > 0) {\n    minData = Math.min.apply(this, sorted);\n    maxData = Math.max.apply(this, sorted);\n  }\n  //为了兼容v1.9.0之前的项目\n  if (index > -1) {\n    if (typeof opts.xAxis.data[index].min === 'number') {\n      minData = Math.min(opts.xAxis.data[index].min, minData);\n    }\n    if (typeof opts.xAxis.data[index].max === 'number') {\n      maxData = Math.max(opts.xAxis.data[index].max, maxData);\n    }\n  } else {\n    if (typeof opts.xAxis.min === 'number') {\n      minData = Math.min(opts.xAxis.min, minData);\n    }\n    if (typeof opts.xAxis.max === 'number') {\n      maxData = Math.max(opts.xAxis.max, maxData);\n    }\n  }\n\n\n  if (minData === maxData) {\n    var rangeSpan = maxData || 10;\n    maxData += rangeSpan;\n  }\n\n  //var dataRange = getDataRange(minData, maxData);\n  var minRange = minData;\n  var maxRange = maxData;\n\n  var range = [];\n  var eachRange = (maxRange - minRange) / opts.xAxis.splitNumber;\n\n  for (var i = 0; i <= opts.xAxis.splitNumber; i++) {\n    range.push(minRange + eachRange * i);\n  }\n  return range;\n}\n\nfunction calXAxisData(series, opts, config) {\n  var result = {\n    angle: 0,\n    xAxisHeight: config.xAxisHeight };\n\n\n  result.ranges = getXAxisTextList(series, opts, config);\n  result.rangesFormat = result.ranges.map(function (item) {\n    item = opts.xAxis.format ? opts.xAxis.format(item) : util.toFixed(item, 2);\n    return item;\n  });\n\n  var xAxisScaleValues = result.ranges.map(function (item) {\n    // 如果刻度值是浮点数,则保留两位小数\n    item = util.toFixed(item, 2);\n    // 若有自定义格式则调用自定义的格式化函数\n    item = opts.xAxis.format ? opts.xAxis.format(Number(item)) : item;\n    return item;\n  });\n\n  result = Object.assign(result, getXAxisPoints(xAxisScaleValues, opts, config));\n  // 计算X轴刻度的属性譬如每个刻度的间隔,刻度的起始点\\结束点以及总长\n  var eachSpacing = result.eachSpacing;\n\n  var textLength = xAxisScaleValues.map(function (item) {\n    return measureText(item);\n  });\n\n  // get max length of categories text\n  var maxTextLength = Math.max.apply(this, textLength);\n\n  // 如果刻度值文本内容过长,则将其逆时针旋转45°\n  if (maxTextLength + 2 * config.xAxisTextPadding > eachSpacing) {\n    result.angle = 45 * Math.PI / 180;\n    result.xAxisHeight = 2 * config.xAxisTextPadding + maxTextLength * Math.sin(result.angle);\n  }\n\n  if (opts.xAxis.disabled === true) {\n    result.xAxisHeight = 0;\n  }\n\n  return result;\n}\n\nfunction getRadarDataPoints(angleList, center, radius, series, opts) {\n  var process = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n\n  var radarOption = opts.extra.radar || {};\n  radarOption.max = radarOption.max || 0;\n  var maxData = Math.max(radarOption.max, Math.max.apply(null, dataCombine(series)));\n\n  var data = [];var _loop2 = function _loop2(\n  i) {\n    var each = series[i];\n    var listItem = {};\n    listItem.color = each.color;\n    listItem.legendShape = each.legendShape;\n    listItem.pointShape = each.pointShape;\n    listItem.data = [];\n    each.data.forEach(function (item, index) {\n      var tmp = {};\n      tmp.angle = angleList[index];\n\n      tmp.proportion = item / maxData;\n      tmp.position = convertCoordinateOrigin(radius * tmp.proportion * process * Math.cos(tmp.angle), radius * tmp.proportion *\n      process * Math.sin(tmp.angle), center);\n      listItem.data.push(tmp);\n    });\n\n    data.push(listItem);};for (var i = 0; i < series.length; i++) {_loop2(i);\n  }\n\n  return data;\n}\n\nfunction getPieDataPoints(series, radius) {\n  var process = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  var count = 0;\n  var _start_ = 0;\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    item.data = item.data === null ? 0 : item.data;\n    count += item.data;\n  }\n  for (var _i6 = 0; _i6 < series.length; _i6++) {\n    var _item2 = series[_i6];\n    _item2.data = _item2.data === null ? 0 : _item2.data;\n    if (count === 0) {\n      _item2._proportion_ = 1 / series.length * process;\n    } else {\n      _item2._proportion_ = _item2.data / count * process;\n    }\n    _item2._radius_ = radius;\n  }\n  for (var _i7 = 0; _i7 < series.length; _i7++) {\n    var _item3 = series[_i7];\n    _item3._start_ = _start_;\n    _start_ += 2 * _item3._proportion_ * Math.PI;\n  }\n\n  return series;\n}\n\nfunction getFunnelDataPoints(series, radius) {\n  var process = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  series = series.sort(function (a, b) {return parseInt(b.data) - parseInt(a.data);});\n  for (var i = 0; i < series.length; i++) {\n    series[i].radius = series[i].data / series[0].data * radius * process;\n    series[i]._proportion_ = series[i].data / series[0].data;\n  }\n  return series.reverse();\n}\n\nfunction getRoseDataPoints(series, type, minRadius, radius) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var count = 0;\n  var _start_ = 0;\n\n  var dataArr = [];\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    item.data = item.data === null ? 0 : item.data;\n    count += item.data;\n    dataArr.push(item.data);\n  }\n\n  var minData = Math.min.apply(null, dataArr);\n  var maxData = Math.max.apply(null, dataArr);\n  var radiusLength = radius - minRadius;\n\n  for (var _i8 = 0; _i8 < series.length; _i8++) {\n    var _item4 = series[_i8];\n    _item4.data = _item4.data === null ? 0 : _item4.data;\n    if (count === 0 || type == 'area') {\n      _item4._proportion_ = _item4.data / count * process;\n      _item4._rose_proportion_ = 1 / series.length * process;\n    } else {\n      _item4._proportion_ = _item4.data / count * process;\n      _item4._rose_proportion_ = _item4.data / count * process;\n    }\n    _item4._radius_ = minRadius + radiusLength * ((_item4.data - minData) / (maxData - minData));\n  }\n  for (var _i9 = 0; _i9 < series.length; _i9++) {\n    var _item5 = series[_i9];\n    _item5._start_ = _start_;\n    _start_ += 2 * _item5._rose_proportion_ * Math.PI;\n  }\n\n  return series;\n}\n\nfunction getArcbarDataPoints(series, arcbarOption) {\n  var process = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (process == 1) {\n    process = 0.999999;\n  }\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    item.data = item.data === null ? 0 : item.data;\n    var totalAngle = void 0;\n    if (arcbarOption.type == 'circle') {\n      totalAngle = 2;\n    } else {\n      if (arcbarOption.endAngle < arcbarOption.startAngle) {\n        totalAngle = 2 + arcbarOption.endAngle - arcbarOption.startAngle;\n      } else {\n        totalAngle = arcbarOption.startAngle - arcbarOption.endAngle;\n      }\n    }\n    item._proportion_ = totalAngle * item.data * process + arcbarOption.startAngle;\n    if (item._proportion_ >= 2) {\n      item._proportion_ = item._proportion_ % 2;\n    }\n  }\n  return series;\n}\n\nfunction getGaugeAxisPoints(categories, startAngle, endAngle) {\n  var totalAngle = startAngle - endAngle + 1;\n  var tempStartAngle = startAngle;\n  for (var i = 0; i < categories.length; i++) {\n    categories[i].value = categories[i].value === null ? 0 : categories[i].value;\n    categories[i]._startAngle_ = tempStartAngle;\n    categories[i]._endAngle_ = totalAngle * categories[i].value + startAngle;\n    if (categories[i]._endAngle_ >= 2) {\n      categories[i]._endAngle_ = categories[i]._endAngle_ % 2;\n    }\n    tempStartAngle = categories[i]._endAngle_;\n  }\n  return categories;\n}\n\nfunction getGaugeDataPoints(series, categories, gaugeOption) {\n  var process = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    item.data = item.data === null ? 0 : item.data;\n    if (gaugeOption.pointer.color == 'auto') {\n      for (var _i10 = 0; _i10 < categories.length; _i10++) {\n        if (item.data <= categories[_i10].value) {\n          item.color = categories[_i10].color;\n          break;\n        }\n      }\n    } else {\n      item.color = gaugeOption.pointer.color;\n    }\n    var totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\n    item._endAngle_ = totalAngle * item.data + gaugeOption.startAngle;\n    item._oldAngle_ = gaugeOption.oldAngle;\n    if (gaugeOption.oldAngle < gaugeOption.endAngle) {\n      item._oldAngle_ += 2;\n    }\n    if (item.data >= gaugeOption.oldData) {\n      item._proportion_ = (item._endAngle_ - item._oldAngle_) * process + gaugeOption.oldAngle;\n    } else {\n      item._proportion_ = item._oldAngle_ - (item._oldAngle_ - item._endAngle_) * process;\n    }\n    if (item._proportion_ >= 2) {\n      item._proportion_ = item._proportion_ % 2;\n    }\n  }\n  return series;\n}\n\nfunction getPieTextMaxLength(series) {\n  series = getPieDataPoints(series);\n  var maxLength = 0;\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    var text = item.format ? item.format(+item._proportion_.toFixed(2)) : util.toFixed(item._proportion_ * 100) + '%';\n    maxLength = Math.max(maxLength, measureText(text));\n  }\n\n  return maxLength;\n}\n\nfunction fixColumeData(points, eachSpacing, columnLen, index, config, opts) {\n  return points.map(function (item) {\n    if (item === null) {\n      return null;\n    }\n    item.width = Math.ceil((eachSpacing - 2 * config.columePadding) / columnLen);\n\n    if (opts.extra.column && opts.extra.column.width && +opts.extra.column.width > 0) {\n      item.width = Math.min(item.width, +opts.extra.column.width);\n    }\n    if (item.width <= 0) {\n      item.width = 1;\n    }\n    item.x += (index + 0.5 - columnLen / 2) * item.width;\n    return item;\n  });\n}\n\nfunction fixColumeMeterData(points, eachSpacing, columnLen, index, config, opts, border) {\n  return points.map(function (item) {\n    if (item === null) {\n      return null;\n    }\n    item.width = Math.ceil((eachSpacing - 2 * config.columePadding) / 2);\n\n    if (opts.extra.column && opts.extra.column.width && +opts.extra.column.width > 0) {\n      item.width = Math.min(item.width, +opts.extra.column.width);\n    }\n\n    if (index > 0) {\n      item.width -= 2 * border;\n    }\n    return item;\n  });\n}\n\nfunction fixColumeStackData(points, eachSpacing, columnLen, index, config, opts, series) {\n\n  return points.map(function (item, indexn) {\n\n    if (item === null) {\n      return null;\n    }\n    item.width = Math.ceil((eachSpacing - 2 * config.columePadding) / 2);\n\n    if (opts.extra.column && opts.extra.column.width && +opts.extra.column.width > 0) {\n      item.width = Math.min(item.width, +opts.extra.column.width);\n    }\n    return item;\n  });\n}\n\nfunction getXAxisPoints(categories, opts, config) {\n  var spacingValid = opts.width - opts.area[1] - opts.area[3];\n  var dataCount = opts.enableScroll ? Math.min(opts.xAxis.itemCount, categories.length) : categories.length;\n  if ((opts.type == 'line' || opts.type == 'area') && dataCount > 1 && opts.xAxis.boundaryGap == 'justify') {\n    dataCount -= 1;\n  }\n  var eachSpacing = spacingValid / dataCount;\n\n  var xAxisPoints = [];\n  var startX = opts.area[3];\n  var endX = opts.width - opts.area[1];\n  categories.forEach(function (item, index) {\n    xAxisPoints.push(startX + index * eachSpacing);\n  });\n  if (opts.xAxis.boundaryGap !== 'justify') {\n    if (opts.enableScroll === true) {\n      xAxisPoints.push(startX + categories.length * eachSpacing);\n    } else {\n      xAxisPoints.push(endX);\n    }\n  }\n  return {\n    xAxisPoints: xAxisPoints,\n    startX: startX,\n    endX: endX,\n    eachSpacing: eachSpacing };\n\n}\n\nfunction getCandleDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config) {\n  var process = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\n  var points = [];\n  var validHeight = opts.height - opts.area[0] - opts.area[2];\n  data.forEach(function (item, index) {\n    if (item === null) {\n      points.push(null);\n    } else {\n      var cPoints = [];\n      item.forEach(function (items, indexs) {\n        var point = {};\n        point.x = xAxisPoints[index] + Math.round(eachSpacing / 2);\n        var value = items.value || items;\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\n        height *= process;\n        point.y = opts.height - Math.round(height) - opts.area[2];\n        cPoints.push(point);\n      });\n      points.push(cPoints);\n    }\n  });\n\n  return points;\n}\n\nfunction getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config) {\n  var process = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\n  var boundaryGap = 'center';\n  if (opts.type == 'line' || opts.type == 'area') {\n    boundaryGap = opts.xAxis.boundaryGap;\n  }\n  var points = [];\n  var validHeight = opts.height - opts.area[0] - opts.area[2];\n  var validWidth = opts.width - opts.area[1] - opts.area[3];\n  data.forEach(function (item, index) {\n    if (item === null) {\n      points.push(null);\n    } else {\n      var point = {};\n      point.color = item.color;\n      point.x = xAxisPoints[index];\n      var value = item;\n      if (typeof item === 'object' && item !== null) {\n        if (item.constructor.toString().indexOf('Array') > -1) {\n          var xranges, xminRange, xmaxRange;\n          xranges = [].concat(opts.chartData.xAxisData.ranges);\n          xminRange = xranges.shift();\n          xmaxRange = xranges.pop();\n          value = item[1];\n          point.x = opts.area[3] + validWidth * (item[0] - xminRange) / (xmaxRange - xminRange);\n        } else {\n          value = item.value;\n        }\n      }\n      if (boundaryGap == 'center') {\n        point.x += Math.round(eachSpacing / 2);\n      }\n      var height = validHeight * (value - minRange) / (maxRange - minRange);\n      height *= process;\n      point.y = opts.height - Math.round(height) - opts.area[2];\n      points.push(point);\n    }\n  });\n\n  return points;\n}\n\nfunction getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, seriesIndex, stackSeries) {\n  var process = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 1;\n  var points = [];\n  var validHeight = opts.height - opts.area[0] - opts.area[2];\n\n  data.forEach(function (item, index) {\n    if (item === null) {\n      points.push(null);\n    } else {\n      var point = {};\n      point.color = item.color;\n      point.x = xAxisPoints[index] + Math.round(eachSpacing / 2);\n\n      if (seriesIndex > 0) {\n        var value = 0;\n        for (var i = 0; i <= seriesIndex; i++) {\n          value += stackSeries[i].data[index];\n        }\n        var value0 = value - item;\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\n        var height0 = validHeight * (value0 - minRange) / (maxRange - minRange);\n      } else {\n        var value = item;\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\n        var height0 = 0;\n      }\n      var heightc = height0;\n      height *= process;\n      heightc *= process;\n      point.y = opts.height - Math.round(height) - opts.area[2];\n      point.y0 = opts.height - Math.round(heightc) - opts.area[2];\n      points.push(point);\n    }\n  });\n\n  return points;\n}\n\nfunction getYAxisTextList(series, opts, config, stack) {\n  var index = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\n  var data;\n  if (stack == 'stack') {\n    data = dataCombineStack(series, opts.categories.length);\n  } else {\n    data = dataCombine(series);\n  }\n  var sorted = [];\n  // remove null from data\n  data = data.filter(function (item) {\n    //return item !== null;\n    if (typeof item === 'object' && item !== null) {\n      if (item.constructor.toString().indexOf('Array') > -1) {\n        return item !== null;\n      } else {\n        return item.value !== null;\n      }\n    } else {\n      return item !== null;\n    }\n  });\n  data.map(function (item) {\n    if (typeof item === 'object') {\n      if (item.constructor.toString().indexOf('Array') > -1) {\n        if (opts.type == 'candle') {\n          item.map(function (subitem) {\n            sorted.push(subitem);\n          });\n        } else {\n          sorted.push(item[1]);\n        }\n      } else {\n        sorted.push(item.value);\n      }\n    } else {\n      sorted.push(item);\n    }\n  });\n\n  var minData = 0;\n  var maxData = 0;\n  if (sorted.length > 0) {\n    minData = Math.min.apply(this, sorted);\n    maxData = Math.max.apply(this, sorted);\n  }\n  //为了兼容v1.9.0之前的项目\n  if (index > -1) {\n    if (typeof opts.yAxis.data[index].min === 'number') {\n      minData = Math.min(opts.yAxis.data[index].min, minData);\n    }\n    if (typeof opts.yAxis.data[index].max === 'number') {\n      maxData = Math.max(opts.yAxis.data[index].max, maxData);\n    }\n  } else {\n    if (typeof opts.yAxis.min === 'number') {\n      minData = Math.min(opts.yAxis.min, minData);\n    }\n    if (typeof opts.yAxis.max === 'number') {\n      maxData = Math.max(opts.yAxis.max, maxData);\n    }\n  }\n\n\n  if (minData === maxData) {\n    var rangeSpan = maxData || 10;\n    maxData += rangeSpan;\n  }\n\n  var dataRange = getDataRange(minData, maxData);\n  var minRange = dataRange.minRange;\n  var maxRange = dataRange.maxRange;\n\n  var range = [];\n  var eachRange = (maxRange - minRange) / opts.yAxis.splitNumber;\n\n  for (var i = 0; i <= opts.yAxis.splitNumber; i++) {\n    range.push(minRange + eachRange * i);\n  }\n  return range.reverse();\n}\n\nfunction calYAxisData(series, opts, config) {\n  //堆叠图重算Y轴\n  var columnstyle = assign({}, {\n    type: \"\" },\n  opts.extra.column);\n  //如果是多Y轴，重新计算\n  var YLength = opts.yAxis.data.length;\n  var newSeries = new Array(YLength);\n  if (YLength > 0) {\n    for (var i = 0; i < YLength; i++) {\n      newSeries[i] = [];\n      for (var j = 0; j < series.length; j++) {\n        if (series[j].index == i) {\n          newSeries[i].push(series[j]);\n        }\n      }\n    }\n    var rangesArr = new Array(YLength);\n    var rangesFormatArr = new Array(YLength);\n    var yAxisWidthArr = new Array(YLength);var _loop3 = function _loop3(\n\n    _i11) {\n      var yData = opts.yAxis.data[_i11];\n      //如果总开关不显示，强制每个Y轴为不显示\n      if (opts.yAxis.disabled == true) {\n        yData.disabled = true;\n      }\n      rangesArr[_i11] = getYAxisTextList(newSeries[_i11], opts, config, columnstyle.type, _i11);\n      var yAxisFontSizes = yData.fontSize || config.fontSize;\n      yAxisWidthArr[_i11] = { position: yData.position ? yData.position : 'left', width: 0 };\n      rangesFormatArr[_i11] = rangesArr[_i11].map(function (items) {\n        items = util.toFixed(items, 6);\n        items = yData.format ? yData.format(Number(items)) : items;\n        yAxisWidthArr[_i11].width = Math.max(yAxisWidthArr[_i11].width, measureText(items, yAxisFontSizes) + 5);\n        return items;\n      });\n      var calibration = yData.calibration ? 4 * opts.pixelRatio : 0;\n      yAxisWidthArr[_i11].width += calibration + 3 * opts.pixelRatio;\n      if (yData.disabled === true) {\n        yAxisWidthArr[_i11].width = 0;\n      }};for (var _i11 = 0; _i11 < YLength; _i11++) {_loop3(_i11);\n    }\n\n  } else {\n    var rangesArr = new Array(1);\n    var rangesFormatArr = new Array(1);\n    var yAxisWidthArr = new Array(1);\n    rangesArr[0] = getYAxisTextList(series, opts, config, columnstyle.type);\n    yAxisWidthArr[0] = { position: 'left', width: 0 };\n    var yAxisFontSize = opts.yAxis.fontSize || config.fontSize;\n    rangesFormatArr[0] = rangesArr[0].map(function (item) {\n      item = util.toFixed(item, 6);\n      item = opts.yAxis.format ? opts.yAxis.format(Number(item)) : item;\n      yAxisWidthArr[0].width = Math.max(yAxisWidthArr[0].width, measureText(item, yAxisFontSize) + 5);\n      return item;\n    });\n    yAxisWidthArr[0].width += 3 * opts.pixelRatio;\n    if (opts.yAxis.disabled === true) {\n      yAxisWidthArr[0] = { position: 'left', width: 0 };\n      opts.yAxis.data[0] = { disabled: true };\n    } else {\n      opts.yAxis.data[0] = { disabled: false, position: 'left', max: opts.yAxis.max, min: opts.yAxis.min, format: opts.yAxis.format };\n    }\n\n  }\n\n  return {\n    rangesFormat: rangesFormatArr,\n    ranges: rangesArr,\n    yAxisWidth: yAxisWidthArr };\n\n\n}\n\nfunction calTooltipYAxisData(point, series, opts, config, eachSpacing) {\n  var ranges = [].concat(opts.chartData.yAxisData.ranges);\n  var spacingValid = opts.height - opts.area[0] - opts.area[2];\n  var minAxis = opts.area[0];\n  var items = [];\n  for (var i = 0; i < ranges.length; i++) {\n    var maxVal = ranges[i].shift();\n    var minVal = ranges[i].pop();\n    var item = maxVal - (maxVal - minVal) * (point - minAxis) / spacingValid;\n    item = opts.yAxis.data[i].format ? opts.yAxis.data[i].format(Number(item)) : item.toFixed(0);\n    items.push(String(item));\n  }\n  return items;\n}\n\nfunction calMarkLineData(points, opts) {\n  var minRange, maxRange;\n  var spacingValid = opts.height - opts.area[0] - opts.area[2];\n  for (var i = 0; i < points.length; i++) {\n    points[i].yAxisIndex = points[i].yAxisIndex ? points[i].yAxisIndex : 0;\n    var range = [].concat(opts.chartData.yAxisData.ranges[points[i].yAxisIndex]);\n    minRange = range.pop();\n    maxRange = range.shift();\n    var height = spacingValid * (points[i].value - minRange) / (maxRange - minRange);\n    points[i].y = opts.height - Math.round(height) - opts.area[2];\n  }\n  return points;\n}\n\nfunction contextRotate(context, opts) {\n  if (opts.rotateLock !== true) {\n    context.translate(opts.height, 0);\n    context.rotate(90 * Math.PI / 180);\n  } else if (opts._rotate_ !== true) {\n    context.translate(opts.height, 0);\n    context.rotate(90 * Math.PI / 180);\n    opts._rotate_ = true;\n  }\n}\n\nfunction drawPointShape(points, color, shape, context, opts) {\n  context.beginPath();\n  if (opts.dataPointShapeType == 'hollow') {\n    context.setStrokeStyle(color);\n    context.setFillStyle(opts.background);\n    context.setLineWidth(2 * opts.pixelRatio);\n  } else {\n    context.setStrokeStyle(\"#ffffff\");\n    context.setFillStyle(color);\n    context.setLineWidth(1 * opts.pixelRatio);\n  }\n  if (shape === 'diamond') {\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        context.moveTo(item.x, item.y - 4.5);\n        context.lineTo(item.x - 4.5, item.y);\n        context.lineTo(item.x, item.y + 4.5);\n        context.lineTo(item.x + 4.5, item.y);\n        context.lineTo(item.x, item.y - 4.5);\n      }\n    });\n  } else if (shape === 'circle') {\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        context.moveTo(item.x + 2.5 * opts.pixelRatio, item.y);\n        context.arc(item.x, item.y, 3 * opts.pixelRatio, 0, 2 * Math.PI, false);\n      }\n    });\n  } else if (shape === 'rect') {\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        context.moveTo(item.x - 3.5, item.y - 3.5);\n        context.rect(item.x - 3.5, item.y - 3.5, 7, 7);\n      }\n    });\n  } else if (shape === 'triangle') {\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        context.moveTo(item.x, item.y - 4.5);\n        context.lineTo(item.x - 4.5, item.y + 4.5);\n        context.lineTo(item.x + 4.5, item.y + 4.5);\n        context.lineTo(item.x, item.y - 4.5);\n      }\n    });\n  }\n  context.closePath();\n  context.fill();\n  context.stroke();\n}\n\nfunction drawRingTitle(opts, config, context, center) {\n  var titlefontSize = opts.title.fontSize || config.titleFontSize;\n  var subtitlefontSize = opts.subtitle.fontSize || config.subtitleFontSize;\n  var title = opts.title.name || '';\n  var subtitle = opts.subtitle.name || '';\n  var titleFontColor = opts.title.color || config.titleColor;\n  var subtitleFontColor = opts.subtitle.color || config.subtitleColor;\n  var titleHeight = title ? titlefontSize : 0;\n  var subtitleHeight = subtitle ? subtitlefontSize : 0;\n  var margin = 5;\n\n  if (subtitle) {\n    var textWidth = measureText(subtitle, subtitlefontSize);\n    var startX = center.x - textWidth / 2 + (opts.subtitle.offsetX || 0);\n    var startY = center.y + subtitlefontSize / 2 + (opts.subtitle.offsetY || 0);\n    if (title) {\n      startY += (titleHeight + margin) / 2;\n    }\n    context.beginPath();\n    context.setFontSize(subtitlefontSize);\n    context.setFillStyle(subtitleFontColor);\n    context.fillText(subtitle, startX, startY);\n    context.closePath();\n    context.stroke();\n  }\n  if (title) {\n    var _textWidth = measureText(title, titlefontSize);\n    var _startX = center.x - _textWidth / 2 + (opts.title.offsetX || 0);\n    var _startY = center.y + titlefontSize / 2 + (opts.title.offsetY || 0);\n    if (subtitle) {\n      _startY -= (subtitleHeight + margin) / 2;\n    }\n    context.beginPath();\n    context.setFontSize(titlefontSize);\n    context.setFillStyle(titleFontColor);\n    context.fillText(title, _startX, _startY);\n    context.closePath();\n    context.stroke();\n  }\n}\n\nfunction drawPointText(points, series, config, context) {\n  // 绘制数据文案\n  var data = series.data;\n  points.forEach(function (item, index) {\n    if (item !== null) {\n      //var formatVal = series.format ? series.format(data[index]) : data[index];\n      context.beginPath();\n      context.setFontSize(series.textSize || config.fontSize);\n      context.setFillStyle(series.textColor || '#666666');\n      var value = data[index];\n      if (typeof data[index] === 'object' && data[index] !== null) {\n        if (data[index].constructor == Array) {\n          value = data[index][1];\n        } else {\n          value = data[index].value;\n        }\n      }\n      var formatVal = series.format ? series.format(value) : value;\n      context.fillText(String(formatVal), item.x - measureText(formatVal, series.textSize || config.fontSize) / 2, item.y - 4);\n      context.closePath();\n      context.stroke();\n    }\n  });\n\n}\n\nfunction drawGaugeLabel(gaugeOption, radius, centerPosition, opts, config, context) {\n  radius -= gaugeOption.width / 2 + config.gaugeLabelTextMargin;\n\n  var totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\n  var splitAngle = totalAngle / gaugeOption.splitLine.splitNumber;\n  var totalNumber = gaugeOption.endNumber - gaugeOption.startNumber;\n  var splitNumber = totalNumber / gaugeOption.splitLine.splitNumber;\n  var nowAngle = gaugeOption.startAngle;\n  var nowNumber = gaugeOption.startNumber;\n  for (var i = 0; i < gaugeOption.splitLine.splitNumber + 1; i++) {\n    var pos = {\n      x: radius * Math.cos(nowAngle * Math.PI),\n      y: radius * Math.sin(nowAngle * Math.PI) };\n\n    var labelText = gaugeOption.labelFormat ? gaugeOption.labelFormat(nowNumber) : nowNumber;\n    pos.x += centerPosition.x - measureText(labelText) / 2;\n    pos.y += centerPosition.y;\n    var startX = pos.x;\n    var startY = pos.y;\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(gaugeOption.labelColor || '#666666');\n    context.fillText(labelText, startX, startY + config.fontSize / 2);\n    context.closePath();\n    context.stroke();\n\n    nowAngle += splitAngle;\n    if (nowAngle >= 2) {\n      nowAngle = nowAngle % 2;\n    }\n    nowNumber += splitNumber;\n  }\n\n}\n\nfunction drawRadarLabel(angleList, radius, centerPosition, opts, config, context) {\n  var radarOption = opts.extra.radar || {};\n  radius += config.radarLabelTextMargin;\n\n  angleList.forEach(function (angle, index) {\n    var pos = {\n      x: radius * Math.cos(angle),\n      y: radius * Math.sin(angle) };\n\n    var posRelativeCanvas = convertCoordinateOrigin(pos.x, pos.y, centerPosition);\n    var startX = posRelativeCanvas.x;\n    var startY = posRelativeCanvas.y;\n    if (util.approximatelyEqual(pos.x, 0)) {\n      startX -= measureText(opts.categories[index] || '') / 2;\n    } else if (pos.x < 0) {\n      startX -= measureText(opts.categories[index] || '');\n    }\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(radarOption.labelColor || '#666666');\n    context.fillText(opts.categories[index] || '', startX, startY + config.fontSize / 2);\n    context.closePath();\n    context.stroke();\n  });\n\n}\n\nfunction drawPieText(series, opts, config, context, radius, center) {\n  var lineRadius = config.pieChartLinePadding;\n  var textObjectCollection = [];\n  var lastTextObject = null;\n\n  var seriesConvert = series.map(function (item) {\n    var text = item.format ? item.format(+item._proportion_.toFixed(2)) : util.toFixed(item._proportion_.toFixed(4) * 100) + '%';\n    if (item._rose_proportion_) item._proportion_ = item._rose_proportion_;\n    var arc = 2 * Math.PI - (item._start_ + 2 * Math.PI * item._proportion_ / 2);\n    var color = item.color;\n    var radius = item._radius_;\n    return {\n      arc: arc,\n      text: text,\n      color: color,\n      radius: radius,\n      textColor: item.textColor,\n      textSize: item.textSize };\n\n  });\n  for (var i = 0; i < seriesConvert.length; i++) {\n    var item = seriesConvert[i];\n    // line end\n    var orginX1 = Math.cos(item.arc) * (item.radius + lineRadius);\n    var orginY1 = Math.sin(item.arc) * (item.radius + lineRadius);\n\n    // line start\n    var orginX2 = Math.cos(item.arc) * item.radius;\n    var orginY2 = Math.sin(item.arc) * item.radius;\n\n    // text start\n    var orginX3 = orginX1 >= 0 ? orginX1 + config.pieChartTextPadding : orginX1 - config.pieChartTextPadding;\n    var orginY3 = orginY1;\n    var textWidth = measureText(item.text, item.textSize || config.fontSize);\n    var startY = orginY3;\n\n    if (lastTextObject && util.isSameXCoordinateArea(lastTextObject.start, {\n      x: orginX3 }))\n    {\n      if (orginX3 > 0) {\n        startY = Math.min(orginY3, lastTextObject.start.y);\n      } else if (orginX1 < 0) {\n        startY = Math.max(orginY3, lastTextObject.start.y);\n      } else {\n        if (orginY3 > 0) {\n          startY = Math.max(orginY3, lastTextObject.start.y);\n        } else {\n          startY = Math.min(orginY3, lastTextObject.start.y);\n        }\n      }\n    }\n    if (orginX3 < 0) {\n      orginX3 -= textWidth;\n    }\n\n    var textObject = {\n      lineStart: {\n        x: orginX2,\n        y: orginY2 },\n\n      lineEnd: {\n        x: orginX1,\n        y: orginY1 },\n\n      start: {\n        x: orginX3,\n        y: startY },\n\n      width: textWidth,\n      height: config.fontSize,\n      text: item.text,\n      color: item.color,\n      textColor: item.textColor,\n      textSize: item.textSize };\n\n    lastTextObject = avoidCollision(textObject, lastTextObject);\n    textObjectCollection.push(lastTextObject);\n  }\n\n  for (var _i12 = 0; _i12 < textObjectCollection.length; _i12++) {\n    var _item6 = textObjectCollection[_i12];\n    var lineStartPoistion = convertCoordinateOrigin(_item6.lineStart.x, _item6.lineStart.y, center);\n    var lineEndPoistion = convertCoordinateOrigin(_item6.lineEnd.x, _item6.lineEnd.y, center);\n    var textPosition = convertCoordinateOrigin(_item6.start.x, _item6.start.y, center);\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.setFontSize(config.fontSize);\n    context.beginPath();\n    context.setStrokeStyle(_item6.color);\n    context.setFillStyle(_item6.color);\n    context.moveTo(lineStartPoistion.x, lineStartPoistion.y);\n    var curveStartX = _item6.start.x < 0 ? textPosition.x + _item6.width : textPosition.x;\n    var textStartX = _item6.start.x < 0 ? textPosition.x - 5 : textPosition.x + 5;\n    context.quadraticCurveTo(lineEndPoistion.x, lineEndPoistion.y, curveStartX, textPosition.y);\n    context.moveTo(lineStartPoistion.x, lineStartPoistion.y);\n    context.stroke();\n    context.closePath();\n    context.beginPath();\n    context.moveTo(textPosition.x + _item6.width, textPosition.y);\n    context.arc(curveStartX, textPosition.y, 2, 0, 2 * Math.PI);\n    context.closePath();\n    context.fill();\n    context.beginPath();\n    context.setFontSize(_item6.textSize || config.fontSize);\n    context.setFillStyle(_item6.textColor || '#666666');\n    context.fillText(_item6.text, textStartX, textPosition.y + 3);\n    context.closePath();\n    context.stroke();\n    context.closePath();\n  }\n}\n\nfunction drawToolTipSplitLine(offsetX, opts, config, context) {\n  var toolTipOption = opts.extra.tooltip || {};\n  toolTipOption.gridType = toolTipOption.gridType == undefined ? 'solid' : toolTipOption.gridType;\n  toolTipOption.dashLength = toolTipOption.dashLength == undefined ? 4 : toolTipOption.dashLength;\n  var startY = opts.area[0];\n  var endY = opts.height - opts.area[2];\n\n  if (toolTipOption.gridType == 'dash') {\n    context.setLineDash([toolTipOption.dashLength, toolTipOption.dashLength]);\n  }\n  context.setStrokeStyle(toolTipOption.gridColor || '#cccccc');\n  context.setLineWidth(1 * opts.pixelRatio);\n  context.beginPath();\n  context.moveTo(offsetX, startY);\n  context.lineTo(offsetX, endY);\n  context.stroke();\n  context.setLineDash([]);\n\n  if (toolTipOption.xAxisLabel) {\n    var labelText = opts.categories[opts.tooltip.index];\n    context.setFontSize(config.fontSize);\n    var textWidth = measureText(labelText, config.fontSize);\n\n    var textX = offsetX - 0.5 * textWidth;\n    var textY = endY;\n    context.beginPath();\n    context.setFillStyle(hexToRgb(toolTipOption.labelBgColor || config.toolTipBackground, toolTipOption.labelBgOpacity || config.toolTipOpacity));\n    context.setStrokeStyle(toolTipOption.labelBgColor || config.toolTipBackground);\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.rect(textX - config.toolTipPadding, textY, textWidth + 2 * config.toolTipPadding, config.fontSize + 2 * config.toolTipPadding);\n    context.closePath();\n    context.stroke();\n    context.fill();\n\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(toolTipOption.labelFontColor || config.fontColor);\n    context.fillText(String(labelText), textX, textY + config.toolTipPadding + config.fontSize);\n    context.closePath();\n    context.stroke();\n  }\n}\n\nfunction drawMarkLine(opts, config, context) {\n  var markLineOption = assign({}, {\n    type: 'solid',\n    dashLength: 4,\n    data: [] },\n  opts.extra.markLine);\n  var startX = opts.area[3];\n  var endX = opts.width - opts.area[1];\n  var points = calMarkLineData(markLineOption.data, opts);\n\n  for (var i = 0; i < points.length; i++) {\n    var item = assign({}, {\n      lineColor: '#DE4A42',\n      showLabel: false,\n      labelFontColor: '#666666',\n      labelBgColor: '#DFE8FF',\n      labelBgOpacity: 0.8,\n      yAxisIndex: 0 },\n    points[i]);\n\n    if (markLineOption.type == 'dash') {\n      context.setLineDash([markLineOption.dashLength, markLineOption.dashLength]);\n    }\n    context.setStrokeStyle(item.lineColor);\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.beginPath();\n    context.moveTo(startX, item.y);\n    context.lineTo(endX, item.y);\n    context.stroke();\n    context.setLineDash([]);\n    if (item.showLabel) {\n      var labelText = opts.yAxis.format ? opts.yAxis.format(Number(item.value)) : item.value;\n      context.setFontSize(config.fontSize);\n      var textWidth = measureText(labelText, config.fontSize);\n      var bgStartX = opts.padding[3] + config.yAxisTitleWidth - config.toolTipPadding;\n      var bgEndX = Math.max(opts.area[3], textWidth + config.toolTipPadding * 2);\n      var bgWidth = bgEndX - bgStartX;\n\n      var textX = bgStartX + (bgWidth - textWidth) / 2;\n      var textY = item.y;\n      context.setFillStyle(hexToRgb(item.labelBgColor, item.labelBgOpacity));\n      context.setStrokeStyle(item.labelBgColor);\n      context.setLineWidth(1 * opts.pixelRatio);\n      context.beginPath();\n      context.rect(bgStartX, textY - 0.5 * config.fontSize - config.toolTipPadding, bgWidth, config.fontSize + 2 * config.toolTipPadding);\n      context.closePath();\n      context.stroke();\n      context.fill();\n\n      context.beginPath();\n      context.setFontSize(config.fontSize);\n      context.setFillStyle(item.labelFontColor);\n      context.fillText(String(labelText), textX, textY + 0.5 * config.fontSize);\n      context.stroke();\n    }\n  }\n}\n\nfunction drawToolTipHorizentalLine(opts, config, context, eachSpacing, xAxisPoints) {\n  var toolTipOption = assign({}, {\n    gridType: 'solid',\n    dashLength: 4 },\n  opts.extra.tooltip);\n\n  var startX = opts.area[3];\n  var endX = opts.width - opts.area[1];\n\n  if (toolTipOption.gridType == 'dash') {\n    context.setLineDash([toolTipOption.dashLength, toolTipOption.dashLength]);\n  }\n  context.setStrokeStyle(toolTipOption.gridColor || '#cccccc');\n  context.setLineWidth(1 * opts.pixelRatio);\n  context.beginPath();\n  context.moveTo(startX, opts.tooltip.offset.y);\n  context.lineTo(endX, opts.tooltip.offset.y);\n  context.stroke();\n  context.setLineDash([]);\n\n  if (toolTipOption.yAxisLabel) {\n    var labelText = calTooltipYAxisData(opts.tooltip.offset.y, opts.series, opts, config, eachSpacing);\n    var widthArr = opts.chartData.yAxisData.yAxisWidth;\n    var tStartLeft = opts.area[3];\n    var tStartRight = opts.width - opts.area[1];\n    for (var i = 0; i < labelText.length; i++) {\n      context.setFontSize(config.fontSize);\n      var textWidth = measureText(labelText[i], config.fontSize);\n      var bgStartX = void 0,bgEndX = void 0,bgWidth = void 0;\n      if (widthArr[i].position == 'left') {\n        bgStartX = tStartLeft - widthArr[i].width;\n        bgEndX = Math.max(bgStartX, bgStartX + textWidth + config.toolTipPadding * 2);\n      } else {\n        bgStartX = tStartRight;\n        bgEndX = Math.max(bgStartX + widthArr[i].width, bgStartX + textWidth + config.toolTipPadding * 2);\n      }\n      bgWidth = bgEndX - bgStartX;\n\n      var textX = bgStartX + (bgWidth - textWidth) / 2;\n      var textY = opts.tooltip.offset.y;\n      context.beginPath();\n      context.setFillStyle(hexToRgb(toolTipOption.labelBgColor || config.toolTipBackground, toolTipOption.labelBgOpacity || config.toolTipOpacity));\n      context.setStrokeStyle(toolTipOption.labelBgColor || config.toolTipBackground);\n      context.setLineWidth(1 * opts.pixelRatio);\n      context.rect(bgStartX, textY - 0.5 * config.fontSize - config.toolTipPadding, bgWidth, config.fontSize + 2 * config.toolTipPadding);\n      context.closePath();\n      context.stroke();\n      context.fill();\n\n      context.beginPath();\n      context.setFontSize(config.fontSize);\n      context.setFillStyle(toolTipOption.labelFontColor || config.fontColor);\n      context.fillText(labelText[i], textX, textY + 0.5 * config.fontSize);\n      context.closePath();\n      context.stroke();\n      if (widthArr[i].position == 'left') {\n        tStartLeft -= widthArr[i].width + opts.yAxis.padding;\n      } else {\n        tStartRight += widthArr[i].width + opts.yAxis.padding;\n      }\n    }\n  }\n}\n\nfunction drawToolTipSplitArea(offsetX, opts, config, context, eachSpacing) {\n  var toolTipOption = assign({}, {\n    activeBgColor: '#000000',\n    activeBgOpacity: 0.08 },\n  opts.extra.tooltip);\n  var startY = opts.area[0];\n  var endY = opts.height - opts.area[2];\n  context.beginPath();\n  context.setFillStyle(hexToRgb(toolTipOption.activeBgColor, toolTipOption.activeBgOpacity));\n  context.rect(offsetX - eachSpacing / 2, startY, eachSpacing, endY - startY);\n  context.closePath();\n  context.fill();\n}\n\nfunction drawToolTip(textList, offset, opts, config, context, eachSpacing, xAxisPoints) {\n  var toolTipOption = assign({}, {\n    showBox: true,\n    bgColor: '#000000',\n    bgOpacity: 0.7,\n    fontColor: '#FFFFFF' },\n  opts.extra.tooltip);\n  var legendWidth = 4 * opts.pixelRatio;\n  var legendMarginRight = 5 * opts.pixelRatio;\n  var arrowWidth = 8 * opts.pixelRatio;\n  var isOverRightBorder = false;\n  if (opts.type == 'line' || opts.type == 'area' || opts.type == 'candle' || opts.type == 'mix') {\n    drawToolTipSplitLine(opts.tooltip.offset.x, opts, config, context);\n  }\n\n  offset = assign({\n    x: 0,\n    y: 0 },\n  offset);\n  offset.y -= 8 * opts.pixelRatio;\n  var textWidth = textList.map(function (item) {\n    return measureText(item.text, config.fontSize);\n  });\n  var toolTipWidth = legendWidth + legendMarginRight + 4 * config.toolTipPadding + Math.max.apply(null, textWidth);\n  var toolTipHeight = 2 * config.toolTipPadding + textList.length * config.toolTipLineHeight;\n\n  if (toolTipOption.showBox == false) {return;}\n  // if beyond the right border\n  if (offset.x - Math.abs(opts._scrollDistance_) + arrowWidth + toolTipWidth > opts.width) {\n    isOverRightBorder = true;\n  }\n  if (toolTipHeight + offset.y > opts.height) {\n    offset.y = opts.height - toolTipHeight;\n  }\n  // draw background rect\n  context.beginPath();\n  context.setFillStyle(hexToRgb(toolTipOption.bgColor || config.toolTipBackground, toolTipOption.bgOpacity || config.toolTipOpacity));\n  if (isOverRightBorder) {\n    context.moveTo(offset.x, offset.y + 10 * opts.pixelRatio);\n    context.lineTo(offset.x - arrowWidth, offset.y + 10 * opts.pixelRatio - 5 * opts.pixelRatio);\n    context.lineTo(offset.x - arrowWidth, offset.y);\n    context.lineTo(offset.x - arrowWidth - Math.round(toolTipWidth), offset.y);\n    context.lineTo(offset.x - arrowWidth - Math.round(toolTipWidth), offset.y + toolTipHeight);\n    context.lineTo(offset.x - arrowWidth, offset.y + toolTipHeight);\n    context.lineTo(offset.x - arrowWidth, offset.y + 10 * opts.pixelRatio + 5 * opts.pixelRatio);\n    context.lineTo(offset.x, offset.y + 10 * opts.pixelRatio);\n  } else {\n    context.moveTo(offset.x, offset.y + 10 * opts.pixelRatio);\n    context.lineTo(offset.x + arrowWidth, offset.y + 10 * opts.pixelRatio - 5 * opts.pixelRatio);\n    context.lineTo(offset.x + arrowWidth, offset.y);\n    context.lineTo(offset.x + arrowWidth + Math.round(toolTipWidth), offset.y);\n    context.lineTo(offset.x + arrowWidth + Math.round(toolTipWidth), offset.y + toolTipHeight);\n    context.lineTo(offset.x + arrowWidth, offset.y + toolTipHeight);\n    context.lineTo(offset.x + arrowWidth, offset.y + 10 * opts.pixelRatio + 5 * opts.pixelRatio);\n    context.lineTo(offset.x, offset.y + 10 * opts.pixelRatio);\n  }\n\n  context.closePath();\n  context.fill();\n\n  // draw legend\n  textList.forEach(function (item, index) {\n    if (item.color !== null) {\n      context.beginPath();\n      context.setFillStyle(item.color);\n      var startX = offset.x + arrowWidth + 2 * config.toolTipPadding;\n      var startY = offset.y + (config.toolTipLineHeight - config.fontSize) / 2 + config.toolTipLineHeight * index +\n      config.toolTipPadding + 1;\n      if (isOverRightBorder) {\n        startX = offset.x - toolTipWidth - arrowWidth + 2 * config.toolTipPadding;\n      }\n      context.fillRect(startX, startY, legendWidth, config.fontSize);\n      context.closePath();\n    }\n  });\n\n  // draw text list\n\n  textList.forEach(function (item, index) {\n    var startX = offset.x + arrowWidth + 2 * config.toolTipPadding + legendWidth + legendMarginRight;\n    if (isOverRightBorder) {\n      startX = offset.x - toolTipWidth - arrowWidth + 2 * config.toolTipPadding + +legendWidth + legendMarginRight;\n    }\n    var startY = offset.y + (config.toolTipLineHeight - config.fontSize) / 2 + config.toolTipLineHeight * index +\n    config.toolTipPadding;\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(toolTipOption.fontColor);\n    context.fillText(item.text, startX, startY + config.fontSize);\n    context.closePath();\n    context.stroke();\n  });\n}\n\nfunction drawYAxisTitle(title, opts, config, context) {\n  var startX = config.xAxisHeight + (opts.height - config.xAxisHeight - measureText(title)) / 2;\n  context.save();\n  context.beginPath();\n  context.setFontSize(config.fontSize);\n  context.setFillStyle(opts.yAxis.titleFontColor || '#333333');\n  context.translate(0, opts.height);\n  context.rotate(-90 * Math.PI / 180);\n  context.fillText(title, startX, opts.padding[3] + 0.5 * config.fontSize);\n  context.closePath();\n  context.stroke();\n  context.restore();\n}\n\nfunction drawColumnDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var xAxisData = opts.chartData.xAxisData,\n  xAxisPoints = xAxisData.xAxisPoints,\n  eachSpacing = xAxisData.eachSpacing;\n  var columnOption = assign({}, {\n    type: 'group',\n    width: eachSpacing / 2,\n    meter: {\n      border: 4,\n      fillColor: '#FFFFFF' } },\n\n  opts.extra.column);\n\n  var calPoints = [];\n  context.save();\n\n  var leftNum = -2;\n  var rightNum = xAxisPoints.length + 2;\n\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n    leftNum = Math.floor(-opts._scrollDistance_ / eachSpacing) - 2;\n    rightNum = leftNum + opts.xAxis.itemCount + 4;\n  }\n  if (opts.tooltip && opts.tooltip.textList && opts.tooltip.textList.length && process === 1) {\n    drawToolTipSplitArea(opts.tooltip.offset.x, opts, config, context, eachSpacing);\n  }\n\n  series.forEach(function (eachSeries, seriesIndex) {\n    var ranges, minRange, maxRange;\n    ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\n    minRange = ranges.pop();\n    maxRange = ranges.shift();\n\n    var data = eachSeries.data;\n    switch (columnOption.type) {\n      case 'group':\n        var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n        var tooltipPoints = getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, seriesIndex, series, process);\n        calPoints.push(tooltipPoints);\n        points = fixColumeData(points, eachSpacing, series.length, seriesIndex, config, opts);\n        for (var i = 0; i < points.length; i++) {\n          var item = points[i];\n          if (item !== null && i > leftNum && i < rightNum) {\n            context.beginPath();\n            context.setStrokeStyle(item.color || eachSeries.color);\n            context.setLineWidth(1);\n            context.setFillStyle(item.color || eachSeries.color);\n            var startX = item.x - item.width / 2;\n            var height = opts.height - item.y - opts.area[2];\n            context.moveTo(startX, item.y);\n            context.lineTo(startX + item.width - 2, item.y);\n            context.lineTo(startX + item.width - 2, opts.height - opts.area[2]);\n            context.lineTo(startX, opts.height - opts.area[2]);\n            context.lineTo(startX, item.y);\n            context.closePath();\n            context.stroke();\n            context.fill();\n          }\n        };\n        break;\n      case 'stack':\n        // 绘制堆叠数据图\n        var points = getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, seriesIndex, series, process);\n        calPoints.push(points);\n        points = fixColumeStackData(points, eachSpacing, series.length, seriesIndex, config, opts, series);\n\n        for (var _i13 = 0; _i13 < points.length; _i13++) {\n          var _item7 = points[_i13];\n          if (_item7 !== null && _i13 > leftNum && _i13 < rightNum) {\n            context.beginPath();\n            context.setFillStyle(_item7.color || eachSeries.color);\n            var startX = _item7.x - _item7.width / 2 + 1;\n            var height = opts.height - _item7.y - opts.area[2];\n            var height0 = opts.height - _item7.y0 - opts.area[2];\n            if (seriesIndex > 0) {\n              height -= height0;\n            }\n            context.moveTo(startX, _item7.y);\n            context.fillRect(startX, _item7.y, _item7.width - 2, height);\n            context.closePath();\n            context.fill();\n          }\n        };\n        break;\n      case 'meter':\n        // 绘制温度计数据图\n        var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n        calPoints.push(points);\n        points = fixColumeMeterData(points, eachSpacing, series.length, seriesIndex, config, opts, columnOption.meter.border);\n        if (seriesIndex == 0) {\n          for (var _i14 = 0; _i14 < points.length; _i14++) {\n            var _item8 = points[_i14];\n            if (_item8 !== null && _i14 > leftNum && _i14 < rightNum) {\n              //画背景颜色\n              context.beginPath();\n              context.setFillStyle(columnOption.meter.fillColor);\n              var startX = _item8.x - _item8.width / 2;\n              var height = opts.height - _item8.y - opts.area[2];\n              context.moveTo(startX, _item8.y);\n              context.fillRect(startX, _item8.y, _item8.width, height);\n              context.closePath();\n              context.fill();\n              //画边框线\n              if (columnOption.meter.border > 0) {\n                context.beginPath();\n                context.setStrokeStyle(eachSeries.color);\n                context.setLineWidth(columnOption.meter.border * opts.pixelRatio);\n                context.moveTo(startX + columnOption.meter.border * 0.5, _item8.y + height);\n                context.lineTo(startX + columnOption.meter.border * 0.5, _item8.y + columnOption.meter.border * 0.5);\n                context.lineTo(startX + _item8.width - columnOption.meter.border * 0.5, _item8.y + columnOption.meter.border * 0.5);\n                context.lineTo(startX + _item8.width - columnOption.meter.border * 0.5, _item8.y + height);\n                context.stroke();\n              }\n            }\n          };\n        } else {\n          for (var _i15 = 0; _i15 < points.length; _i15++) {\n            var _item9 = points[_i15];\n            if (_item9 !== null && _i15 > leftNum && _i15 < rightNum) {\n              context.beginPath();\n              context.setFillStyle(_item9.color || eachSeries.color);\n              var startX = _item9.x - _item9.width / 2;\n              var height = opts.height - _item9.y - opts.area[2];\n              context.moveTo(startX, _item9.y);\n              context.fillRect(startX, _item9.y, _item9.width, height);\n              context.closePath();\n              context.fill();\n            }\n          };\n        }\n        break;}\n\n  });\n\n  if (opts.dataLabel !== false && process === 1) {\n    series.forEach(function (eachSeries, seriesIndex) {\n      var ranges, minRange, maxRange;\n      ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\n      minRange = ranges.pop();\n      maxRange = ranges.shift();\n      var data = eachSeries.data;\n      switch (columnOption.type) {\n        case 'group':\n          var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n          points = fixColumeData(points, eachSpacing, series.length, seriesIndex, config, opts);\n          drawPointText(points, eachSeries, config, context);\n          break;\n        case 'stack':\n          var points = getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, seriesIndex, series, process);\n          drawPointText(points, eachSeries, config, context);\n          break;\n        case 'meter':\n          var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n          drawPointText(points, eachSeries, config, context);\n          break;}\n\n    });\n  }\n\n  context.restore();\n\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing };\n\n}\n\nfunction drawCandleDataPoints(series, seriesMA, opts, config, context) {\n  var process = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  var candleOption = assign({}, {\n    color: {},\n    average: {} },\n  opts.extra.candle);\n  candleOption.color = assign({}, {\n    upLine: '#f04864',\n    upFill: '#f04864',\n    downLine: '#2fc25b',\n    downFill: '#2fc25b' },\n  candleOption.color);\n  candleOption.average = assign({}, {\n    show: false,\n    name: [],\n    day: [],\n    color: config.colors },\n  candleOption.average);\n  opts.extra.candle = candleOption;\n\n  var xAxisData = opts.chartData.xAxisData,\n  xAxisPoints = xAxisData.xAxisPoints,\n  eachSpacing = xAxisData.eachSpacing;\n\n  var calPoints = [];\n\n  context.save();\n\n  var leftNum = -2;\n  var rightNum = xAxisPoints.length + 2;\n  var leftSpace = 0;\n  var rightSpace = opts.width + eachSpacing;\n\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n    leftNum = Math.floor(-opts._scrollDistance_ / eachSpacing) - 2;\n    rightNum = leftNum + opts.xAxis.itemCount + 4;\n    leftSpace = -opts._scrollDistance_ - eachSpacing + opts.area[3];\n    rightSpace = leftSpace + (opts.xAxis.itemCount + 4) * eachSpacing;\n  }\n\n  //画均线\n  if (candleOption.average.show || seriesMA) {//Merge pull request !12 from 邱贵翔\n    seriesMA.forEach(function (eachSeries, seriesIndex) {\n      var ranges, minRange, maxRange;\n      ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\n      minRange = ranges.pop();\n      maxRange = ranges.shift();\n\n      var data = eachSeries.data;\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n      var splitPointList = splitPoints(points);\n\n      for (var i = 0; i < splitPointList.length; i++) {\n        var _points = splitPointList[i];\n        context.beginPath();\n        context.setStrokeStyle(eachSeries.color);\n        context.setLineWidth(1);\n        if (_points.length === 1) {\n          context.moveTo(_points[0].x, _points[0].y);\n          context.arc(_points[0].x, _points[0].y, 1, 0, 2 * Math.PI);\n        } else {\n          context.moveTo(_points[0].x, _points[0].y);\n          var startPoint = 0;\n          for (var j = 0; j < _points.length; j++) {\n            var item = _points[j];\n            if (startPoint == 0 && item.x > leftSpace) {\n              context.moveTo(item.x, item.y);\n              startPoint = 1;\n            }\n            if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\n              var ctrlPoint = createCurveControlPoints(_points, j - 1);\n              context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\n            }\n          }\n          context.moveTo(_points[0].x, _points[0].y);\n        }\n        context.closePath();\n        context.stroke();\n      }\n    });\n  }\n  //画K线\n  series.forEach(function (eachSeries, seriesIndex) {\n    var ranges, minRange, maxRange;\n    ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\n    minRange = ranges.pop();\n    maxRange = ranges.shift();\n    var data = eachSeries.data;\n    var points = getCandleDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n    calPoints.push(points);\n    var splitPointList = splitPoints(points);\n\n    for (var i = 0; i < splitPointList[0].length; i++) {\n      if (i > leftNum && i < rightNum) {\n        var item = splitPointList[0][i];\n        context.beginPath();\n        //如果上涨\n        if (data[i][1] - data[i][0] > 0) {\n          context.setStrokeStyle(candleOption.color.upLine);\n          context.setFillStyle(candleOption.color.upFill);\n          context.setLineWidth(1 * opts.pixelRatio);\n          context.moveTo(item[3].x, item[3].y); //顶点\n          context.lineTo(item[1].x, item[1].y); //收盘中间点\n          context.lineTo(item[1].x - eachSpacing / 4, item[1].y); //收盘左侧点\n          context.lineTo(item[0].x - eachSpacing / 4, item[0].y); //开盘左侧点\n          context.lineTo(item[0].x, item[0].y); //开盘中间点\n          context.lineTo(item[2].x, item[2].y); //底点\n          context.lineTo(item[0].x, item[0].y); //开盘中间点\n          context.lineTo(item[0].x + eachSpacing / 4, item[0].y); //开盘右侧点\n          context.lineTo(item[1].x + eachSpacing / 4, item[1].y); //收盘右侧点\n          context.lineTo(item[1].x, item[1].y); //收盘中间点\n          context.moveTo(item[3].x, item[3].y); //顶点\n        } else {\n          context.setStrokeStyle(candleOption.color.downLine);\n          context.setFillStyle(candleOption.color.downFill);\n          context.setLineWidth(1 * opts.pixelRatio);\n          context.moveTo(item[3].x, item[3].y); //顶点\n          context.lineTo(item[0].x, item[0].y); //开盘中间点\n          context.lineTo(item[0].x - eachSpacing / 4, item[0].y); //开盘左侧点\n          context.lineTo(item[1].x - eachSpacing / 4, item[1].y); //收盘左侧点\n          context.lineTo(item[1].x, item[1].y); //收盘中间点\n          context.lineTo(item[2].x, item[2].y); //底点\n          context.lineTo(item[1].x, item[1].y); //收盘中间点\n          context.lineTo(item[1].x + eachSpacing / 4, item[1].y); //收盘右侧点\n          context.lineTo(item[0].x + eachSpacing / 4, item[0].y); //开盘右侧点\n          context.lineTo(item[0].x, item[0].y); //开盘中间点\n          context.moveTo(item[3].x, item[3].y); //顶点\n        }\n        context.closePath();\n        context.fill();\n        context.stroke();\n      }\n    }\n  });\n\n  context.restore();\n\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing };\n\n}\n\nfunction drawAreaDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var areaOption = assign({}, {\n    type: 'straight',\n    opacity: 0.2,\n    addLine: false,\n    width: 2,\n    gradient: false },\n  opts.extra.area);\n\n  var xAxisData = opts.chartData.xAxisData,\n  xAxisPoints = xAxisData.xAxisPoints,\n  eachSpacing = xAxisData.eachSpacing;\n\n  var endY = opts.height - opts.area[2];\n  var calPoints = [];\n\n  context.save();\n  var leftSpace = 0;\n  var rightSpace = opts.width + eachSpacing;\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n    leftSpace = -opts._scrollDistance_ - eachSpacing + opts.area[3];\n    rightSpace = leftSpace + (opts.xAxis.itemCount + 4) * eachSpacing;\n  }\n\n  series.forEach(function (eachSeries, seriesIndex) {\n    var ranges, minRange, maxRange;\n    ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\n    minRange = ranges.pop();\n    maxRange = ranges.shift();\n    var data = eachSeries.data;\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n    calPoints.push(points);\n\n    var splitPointList = splitPoints(points);\n    for (var i = 0; i < splitPointList.length; i++) {\n      var _points2 = splitPointList[i];\n      // 绘制区域数\n      context.beginPath();\n      context.setStrokeStyle(hexToRgb(eachSeries.color, areaOption.opacity));\n      if (areaOption.gradient) {\n        var gradient = context.createLinearGradient(0, opts.area[0], 0, opts.height - opts.area[2]);\n        gradient.addColorStop('0', hexToRgb(eachSeries.color, areaOption.opacity));\n        gradient.addColorStop('1.0', hexToRgb(\"#FFFFFF\", 0.1));\n        context.setFillStyle(gradient);\n      } else {\n        context.setFillStyle(hexToRgb(eachSeries.color, areaOption.opacity));\n      }\n      context.setLineWidth(areaOption.width * opts.pixelRatio);\n      if (_points2.length > 1) {\n        var firstPoint = _points2[0];\n        var lastPoint = _points2[_points2.length - 1];\n        context.moveTo(firstPoint.x, firstPoint.y);\n        var startPoint = 0;\n        if (areaOption.type === 'curve') {\n          for (var j = 0; j < _points2.length; j++) {\n            var item = _points2[j];\n            if (startPoint == 0 && item.x > leftSpace) {\n              context.moveTo(item.x, item.y);\n              startPoint = 1;\n            }\n            if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\n              var ctrlPoint = createCurveControlPoints(_points2, j - 1);\n              context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\n            }\n          };\n        } else {\n          for (var _j = 0; _j < _points2.length; _j++) {\n            var _item10 = _points2[_j];\n            if (startPoint == 0 && _item10.x > leftSpace) {\n              context.moveTo(_item10.x, _item10.y);\n              startPoint = 1;\n            }\n            if (_j > 0 && _item10.x > leftSpace && _item10.x < rightSpace) {\n              context.lineTo(_item10.x, _item10.y);\n            }\n          };\n        }\n\n        context.lineTo(lastPoint.x, endY);\n        context.lineTo(firstPoint.x, endY);\n        context.lineTo(firstPoint.x, firstPoint.y);\n      } else {\n        var _item11 = _points2[0];\n        context.moveTo(_item11.x - eachSpacing / 2, _item11.y);\n        context.lineTo(_item11.x + eachSpacing / 2, _item11.y);\n        context.lineTo(_item11.x + eachSpacing / 2, endY);\n        context.lineTo(_item11.x - eachSpacing / 2, endY);\n        context.moveTo(_item11.x - eachSpacing / 2, _item11.y);\n      }\n      context.closePath();\n      context.fill();\n\n      //画连线\n      if (areaOption.addLine) {\n        if (eachSeries.lineType == 'dash') {\n          var dashLength = eachSeries.dashLength ? eachSeries.dashLength : 8;\n          dashLength *= opts.pixelRatio;\n          context.setLineDash([dashLength, dashLength]);\n        }\n        context.beginPath();\n        context.setStrokeStyle(eachSeries.color);\n        context.setLineWidth(areaOption.width * opts.pixelRatio);\n        if (_points2.length === 1) {\n          context.moveTo(_points2[0].x, _points2[0].y);\n          context.arc(_points2[0].x, _points2[0].y, 1, 0, 2 * Math.PI);\n        } else {\n          context.moveTo(_points2[0].x, _points2[0].y);\n          var _startPoint = 0;\n          if (areaOption.type === 'curve') {\n            for (var _j2 = 0; _j2 < _points2.length; _j2++) {\n              var _item12 = _points2[_j2];\n              if (_startPoint == 0 && _item12.x > leftSpace) {\n                context.moveTo(_item12.x, _item12.y);\n                _startPoint = 1;\n              }\n              if (_j2 > 0 && _item12.x > leftSpace && _item12.x < rightSpace) {\n                var _ctrlPoint = createCurveControlPoints(_points2, _j2 - 1);\n                context.bezierCurveTo(_ctrlPoint.ctrA.x, _ctrlPoint.ctrA.y, _ctrlPoint.ctrB.x, _ctrlPoint.ctrB.y, _item12.x, _item12.y);\n              }\n            };\n          } else {\n            for (var _j3 = 0; _j3 < _points2.length; _j3++) {\n              var _item13 = _points2[_j3];\n              if (_startPoint == 0 && _item13.x > leftSpace) {\n                context.moveTo(_item13.x, _item13.y);\n                _startPoint = 1;\n              }\n              if (_j3 > 0 && _item13.x > leftSpace && _item13.x < rightSpace) {\n                context.lineTo(_item13.x, _item13.y);\n              }\n            };\n          }\n          context.moveTo(_points2[0].x, _points2[0].y);\n        }\n        context.stroke();\n        context.setLineDash([]);\n      }\n    }\n\n    //画点\n    if (opts.dataPointShape !== false) {\n      drawPointShape(points, eachSeries.color, eachSeries.pointShape, context, opts);\n    }\n\n  });\n\n  if (opts.dataLabel !== false && process === 1) {\n    series.forEach(function (eachSeries, seriesIndex) {\n      var ranges, minRange, maxRange;\n      ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\n      minRange = ranges.pop();\n      maxRange = ranges.shift();\n      var data = eachSeries.data;\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n      drawPointText(points, eachSeries, config, context);\n    });\n  }\n\n  context.restore();\n\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing };\n\n}\n\nfunction drawLineDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var lineOption = assign({}, {\n    type: 'straight',\n    width: 2 },\n  opts.extra.line);\n  lineOption.width *= opts.pixelRatio;\n\n  var xAxisData = opts.chartData.xAxisData,\n  xAxisPoints = xAxisData.xAxisPoints,\n  eachSpacing = xAxisData.eachSpacing;\n  var calPoints = [];\n\n  context.save();\n  var leftSpace = 0;\n  var rightSpace = opts.width + eachSpacing;\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n    leftSpace = -opts._scrollDistance_ - eachSpacing + opts.area[3];\n    rightSpace = leftSpace + (opts.xAxis.itemCount + 4) * eachSpacing;\n  }\n\n  series.forEach(function (eachSeries, seriesIndex) {\n    var ranges, minRange, maxRange;\n    ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\n    minRange = ranges.pop();\n    maxRange = ranges.shift();\n    var data = eachSeries.data;\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n    calPoints.push(points);\n    var splitPointList = splitPoints(points);\n\n    if (eachSeries.lineType == 'dash') {\n      var dashLength = eachSeries.dashLength ? eachSeries.dashLength : 8;\n      dashLength *= opts.pixelRatio;\n      context.setLineDash([dashLength, dashLength]);\n    }\n    context.beginPath();\n    context.setStrokeStyle(eachSeries.color);\n    context.setLineWidth(lineOption.width);\n\n    splitPointList.forEach(function (points, index) {\n\n      if (points.length === 1) {\n        context.moveTo(points[0].x, points[0].y);\n        context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\n      } else {\n        context.moveTo(points[0].x, points[0].y);\n        var startPoint = 0;\n        if (lineOption.type === 'curve') {\n          for (var j = 0; j < points.length; j++) {\n            var item = points[j];\n            if (startPoint == 0 && item.x > leftSpace) {\n              context.moveTo(item.x, item.y);\n              startPoint = 1;\n            }\n            if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\n              var ctrlPoint = createCurveControlPoints(points, j - 1);\n              context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\n            }\n          };\n        }\n        if (lineOption.type === 'straight') {\n          for (var _j4 = 0; _j4 < points.length; _j4++) {\n            var _item14 = points[_j4];\n            if (startPoint == 0 && _item14.x > leftSpace) {\n              context.moveTo(_item14.x, _item14.y);\n              startPoint = 1;\n            }\n            if (_j4 > 0 && _item14.x > leftSpace && _item14.x < rightSpace) {\n              context.lineTo(_item14.x, _item14.y);\n            }\n          };\n        }\n        if (lineOption.type === 'step') {\n          for (var _j5 = 0; _j5 < points.length; _j5++) {\n            var _item15 = points[_j5];\n            if (startPoint == 0 && _item15.x > leftSpace) {\n              context.moveTo(_item15.x, _item15.y);\n              startPoint = 1;\n            }\n            if (_j5 > 0 && _item15.x > leftSpace && _item15.x < rightSpace) {\n              context.lineTo(_item15.x, points[_j5 - 1].y);\n              context.lineTo(_item15.x, _item15.y);\n            }\n          };\n        }\n        context.moveTo(points[0].x, points[0].y);\n      }\n\n    });\n\n    context.stroke();\n    context.setLineDash([]);\n\n    if (opts.dataPointShape !== false) {\n      drawPointShape(points, eachSeries.color, eachSeries.pointShape, context, opts);\n    }\n  });\n\n  if (opts.dataLabel !== false && process === 1) {\n    series.forEach(function (eachSeries, seriesIndex) {\n      var ranges, minRange, maxRange;\n      ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\n      minRange = ranges.pop();\n      maxRange = ranges.shift();\n      var data = eachSeries.data;\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n      drawPointText(points, eachSeries, config, context);\n    });\n  }\n\n  context.restore();\n\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing };\n\n}\n\nfunction drawMixDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n\n  var xAxisData = opts.chartData.xAxisData,\n  xAxisPoints = xAxisData.xAxisPoints,\n  eachSpacing = xAxisData.eachSpacing;\n\n  var endY = opts.height - opts.area[2];\n  var calPoints = [];\n\n  var columnIndex = 0;\n  var columnLength = 0;\n  series.forEach(function (eachSeries, seriesIndex) {\n    if (eachSeries.type == 'column') {\n      columnLength += 1;\n    }\n  });\n  context.save();\n  var leftNum = -2;\n  var rightNum = xAxisPoints.length + 2;\n  var leftSpace = 0;\n  var rightSpace = opts.width + eachSpacing;\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n    leftNum = Math.floor(-opts._scrollDistance_ / eachSpacing) - 2;\n    rightNum = leftNum + opts.xAxis.itemCount + 4;\n    leftSpace = -opts._scrollDistance_ - eachSpacing + opts.area[3];\n    rightSpace = leftSpace + (opts.xAxis.itemCount + 4) * eachSpacing;\n  }\n\n  series.forEach(function (eachSeries, seriesIndex) {\n    var ranges, minRange, maxRange;\n\n    ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\n    minRange = ranges.pop();\n    maxRange = ranges.shift();\n\n    var data = eachSeries.data;\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n    calPoints.push(points);\n\n    // 绘制柱状数据图\n    if (eachSeries.type == 'column') {\n      points = fixColumeData(points, eachSpacing, columnLength, columnIndex, config, opts);\n      for (var i = 0; i < points.length; i++) {\n        var item = points[i];\n        if (item !== null && i > leftNum && i < rightNum) {\n          context.beginPath();\n          context.setStrokeStyle(item.color || eachSeries.color);\n          context.setLineWidth(1);\n          context.setFillStyle(item.color || eachSeries.color);\n          var startX = item.x - item.width / 2;\n          var height = opts.height - item.y - opts.area[2];\n          context.moveTo(startX, item.y);\n          context.moveTo(startX, item.y);\n          context.lineTo(startX + item.width - 2, item.y);\n          context.lineTo(startX + item.width - 2, opts.height - opts.area[2]);\n          context.lineTo(startX, opts.height - opts.area[2]);\n          context.lineTo(startX, item.y);\n          context.closePath();\n          context.stroke();\n          context.fill();\n          context.closePath();\n          context.fill();\n        }\n      }\n      columnIndex += 1;\n    }\n\n    //绘制区域图数据\n\n    if (eachSeries.type == 'area') {\n      var _splitPointList = splitPoints(points);\n      for (var _i16 = 0; _i16 < _splitPointList.length; _i16++) {\n        var _points3 = _splitPointList[_i16];\n        // 绘制区域数据\n        context.beginPath();\n        context.setStrokeStyle(eachSeries.color);\n        context.setFillStyle(hexToRgb(eachSeries.color, 0.2));\n        context.setLineWidth(2 * opts.pixelRatio);\n        if (_points3.length > 1) {\n          var firstPoint = _points3[0];\n          var lastPoint = _points3[_points3.length - 1];\n          context.moveTo(firstPoint.x, firstPoint.y);\n          var startPoint = 0;\n          if (eachSeries.style === 'curve') {\n            for (var j = 0; j < _points3.length; j++) {\n              var _item16 = _points3[j];\n              if (startPoint == 0 && _item16.x > leftSpace) {\n                context.moveTo(_item16.x, _item16.y);\n                startPoint = 1;\n              }\n              if (j > 0 && _item16.x > leftSpace && _item16.x < rightSpace) {\n                var ctrlPoint = createCurveControlPoints(_points3, j - 1);\n                context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, _item16.x, _item16.y);\n              }\n            };\n          } else {\n            for (var _j6 = 0; _j6 < _points3.length; _j6++) {\n              var _item17 = _points3[_j6];\n              if (startPoint == 0 && _item17.x > leftSpace) {\n                context.moveTo(_item17.x, _item17.y);\n                startPoint = 1;\n              }\n              if (_j6 > 0 && _item17.x > leftSpace && _item17.x < rightSpace) {\n                context.lineTo(_item17.x, _item17.y);\n              }\n            };\n          }\n          context.lineTo(lastPoint.x, endY);\n          context.lineTo(firstPoint.x, endY);\n          context.lineTo(firstPoint.x, firstPoint.y);\n        } else {\n          var _item18 = _points3[0];\n          context.moveTo(_item18.x - eachSpacing / 2, _item18.y);\n          context.lineTo(_item18.x + eachSpacing / 2, _item18.y);\n          context.lineTo(_item18.x + eachSpacing / 2, endY);\n          context.lineTo(_item18.x - eachSpacing / 2, endY);\n          context.moveTo(_item18.x - eachSpacing / 2, _item18.y);\n        }\n        context.closePath();\n        context.fill();\n      }\n    }\n\n    // 绘制折线数据图\n    if (eachSeries.type == 'line') {\n      var splitPointList = splitPoints(points);\n      splitPointList.forEach(function (points, index) {\n        if (eachSeries.lineType == 'dash') {\n          var dashLength = eachSeries.dashLength ? eachSeries.dashLength : 8;\n          dashLength *= opts.pixelRatio;\n          context.setLineDash([dashLength, dashLength]);\n        }\n        context.beginPath();\n        context.setStrokeStyle(eachSeries.color);\n        context.setLineWidth(2 * opts.pixelRatio);\n        if (points.length === 1) {\n          context.moveTo(points[0].x, points[0].y);\n          context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\n        } else {\n          context.moveTo(points[0].x, points[0].y);\n          var _startPoint2 = 0;\n          if (eachSeries.style == 'curve') {\n            for (var _j7 = 0; _j7 < points.length; _j7++) {\n              var _item19 = points[_j7];\n              if (_startPoint2 == 0 && _item19.x > leftSpace) {\n                context.moveTo(_item19.x, _item19.y);\n                _startPoint2 = 1;\n              }\n              if (_j7 > 0 && _item19.x > leftSpace && _item19.x < rightSpace) {\n                var ctrlPoint = createCurveControlPoints(points, _j7 - 1);\n                context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, _item19.x, _item19.y);\n              }\n            }\n          } else {\n            for (var _j8 = 0; _j8 < points.length; _j8++) {\n              var _item20 = points[_j8];\n              if (_startPoint2 == 0 && _item20.x > leftSpace) {\n                context.moveTo(_item20.x, _item20.y);\n                _startPoint2 = 1;\n              }\n              if (_j8 > 0 && _item20.x > leftSpace && _item20.x < rightSpace) {\n                context.lineTo(_item20.x, _item20.y);\n              }\n            }\n          }\n          context.moveTo(points[0].x, points[0].y);\n        }\n        context.stroke();\n        context.setLineDash([]);\n      });\n    }\n\n    // 绘制点数据图\n    if (eachSeries.type == 'point') {\n      eachSeries.addPoint = true;\n    }\n\n    if (eachSeries.addPoint == true && eachSeries.type !== 'column') {\n      drawPointShape(points, eachSeries.color, eachSeries.pointShape, context, opts);\n    }\n  });\n  if (opts.dataLabel !== false && process === 1) {\n    var columnIndex = 0;\n    series.forEach(function (eachSeries, seriesIndex) {\n      var ranges, minRange, maxRange;\n\n      ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\n      minRange = ranges.pop();\n      maxRange = ranges.shift();\n\n      var data = eachSeries.data;\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n      if (eachSeries.type !== 'column') {\n        drawPointText(points, eachSeries, config, context);\n      } else {\n        points = fixColumeData(points, eachSpacing, columnLength, columnIndex, config, opts);\n        drawPointText(points, eachSeries, config, context);\n        columnIndex += 1;\n      }\n\n    });\n  }\n\n  context.restore();\n\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing };\n\n}\n\nfunction drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints) {\n  var toolTipOption = opts.extra.tooltip || {};\n  if (toolTipOption.horizentalLine && opts.tooltip && process === 1 && (opts.type == 'line' || opts.type == 'area' || opts.type == 'column' || opts.type == 'candle' || opts.type == 'mix')) {\n    drawToolTipHorizentalLine(opts, config, context, eachSpacing, xAxisPoints);\n  }\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n  if (opts.tooltip && opts.tooltip.textList && opts.tooltip.textList.length && process === 1) {\n    drawToolTip(opts.tooltip.textList, opts.tooltip.offset, opts, config, context, eachSpacing, xAxisPoints);\n  }\n  context.restore();\n\n}\n\nfunction drawXAxis(categories, opts, config, context) {\n\n  var xAxisData = opts.chartData.xAxisData,\n  xAxisPoints = xAxisData.xAxisPoints,\n  startX = xAxisData.startX,\n  endX = xAxisData.endX,\n  eachSpacing = xAxisData.eachSpacing;\n  var boundaryGap = 'center';\n  if (opts.type == 'line' || opts.type == 'area') {\n    boundaryGap = opts.xAxis.boundaryGap;\n  }\n  var startY = opts.height - opts.area[2];\n  var endY = opts.area[0];\n\n  //绘制滚动条\n  if (opts.enableScroll && opts.xAxis.scrollShow) {\n    var scrollY = opts.height - opts.area[2] + config.xAxisHeight;\n    var scrollScreenWidth = endX - startX;\n    var scrollTotalWidth = eachSpacing * (xAxisPoints.length - 1);\n    var scrollWidth = scrollScreenWidth * scrollScreenWidth / scrollTotalWidth;\n    var scrollLeft = 0;\n    if (opts._scrollDistance_) {\n      scrollLeft = -opts._scrollDistance_ * scrollScreenWidth / scrollTotalWidth;\n    }\n    context.beginPath();\n    context.setLineCap('round');\n    context.setLineWidth(6 * opts.pixelRatio);\n    context.setStrokeStyle(opts.xAxis.scrollBackgroundColor || \"#EFEBEF\");\n    context.moveTo(startX, scrollY);\n    context.lineTo(endX, scrollY);\n    context.stroke();\n    context.closePath();\n    context.beginPath();\n    context.setLineCap('round');\n    context.setLineWidth(6 * opts.pixelRatio);\n    context.setStrokeStyle(opts.xAxis.scrollColor || \"#A6A6A6\");\n    context.moveTo(startX + scrollLeft, scrollY);\n    context.lineTo(startX + scrollLeft + scrollWidth, scrollY);\n    context.stroke();\n    context.closePath();\n    context.setLineCap('butt');\n  }\n\n  context.save();\n\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n\n  //绘制X轴刻度线\n  if (opts.xAxis.calibration === true) {\n    context.setStrokeStyle(opts.xAxis.gridColor || \"#cccccc\");\n    context.setLineCap('butt');\n    context.setLineWidth(1 * opts.pixelRatio);\n    xAxisPoints.forEach(function (item, index) {\n      if (index > 0) {\n        context.beginPath();\n        context.moveTo(item - eachSpacing / 2, startY);\n        context.lineTo(item - eachSpacing / 2, startY + 3 * opts.pixelRatio);\n        context.closePath();\n        context.stroke();\n      }\n    });\n  }\n  //绘制X轴网格\n  if (opts.xAxis.disableGrid !== true) {\n    context.setStrokeStyle(opts.xAxis.gridColor || \"#cccccc\");\n    context.setLineCap('butt');\n    context.setLineWidth(1 * opts.pixelRatio);\n    if (opts.xAxis.gridType == 'dash') {\n      context.setLineDash([opts.xAxis.dashLength, opts.xAxis.dashLength]);\n    }\n    opts.xAxis.gridEval = opts.xAxis.gridEval || 1;\n    xAxisPoints.forEach(function (item, index) {\n      if (index % opts.xAxis.gridEval == 0) {\n        context.beginPath();\n        context.moveTo(item, startY);\n        context.lineTo(item, endY);\n        context.stroke();\n      }\n    });\n    context.setLineDash([]);\n  }\n\n\n  //绘制X轴文案\n  if (opts.xAxis.disabled !== true) {\n    // 对X轴列表做抽稀处理\n    //默认全部显示X轴标签\n    var maxXAxisListLength = categories.length;\n    //如果设置了X轴单屏数量\n    if (opts.xAxis.labelCount) {\n      //如果设置X轴密度\n      if (opts.xAxis.itemCount) {\n        maxXAxisListLength = Math.ceil(categories.length / opts.xAxis.itemCount * opts.xAxis.labelCount);\n      } else {\n        maxXAxisListLength = opts.xAxis.labelCount;\n      }\n      maxXAxisListLength -= 1;\n    }\n\n    var ratio = Math.ceil(categories.length / maxXAxisListLength);\n\n    var newCategories = [];\n    var cgLength = categories.length;\n    for (var i = 0; i < cgLength; i++) {\n      if (i % ratio !== 0) {\n        newCategories.push(\"\");\n      } else {\n        newCategories.push(categories[i]);\n      }\n    }\n    newCategories[cgLength - 1] = categories[cgLength - 1];\n\n    var xAxisFontSize = opts.xAxis.fontSize || config.fontSize;\n    if (config._xAxisTextAngle_ === 0) {\n      newCategories.forEach(function (item, index) {\n        var offset = -measureText(String(item), xAxisFontSize) / 2;\n        if (boundaryGap == 'center') {\n          offset += eachSpacing / 2;\n        }\n        var scrollHeight = 0;\n        if (opts.xAxis.scrollShow) {\n          scrollHeight = 6 * opts.pixelRatio;\n        }\n        context.beginPath();\n        context.setFontSize(xAxisFontSize);\n        context.setFillStyle(opts.xAxis.fontColor || '#666666');\n        context.fillText(String(item), xAxisPoints[index] + offset, startY + xAxisFontSize + (config.xAxisHeight - scrollHeight - xAxisFontSize) / 2);\n        context.closePath();\n        context.stroke();\n      });\n\n    } else {\n      newCategories.forEach(function (item, index) {\n        context.save();\n        context.beginPath();\n        context.setFontSize(xAxisFontSize);\n        context.setFillStyle(opts.xAxis.fontColor || '#666666');\n        var textWidth = measureText(String(item), xAxisFontSize);\n        var offset = -textWidth;\n        if (boundaryGap == 'center') {\n          offset += eachSpacing / 2;\n        }\n        var _calRotateTranslate = calRotateTranslate(xAxisPoints[index] + eachSpacing / 2, startY + xAxisFontSize / 2 + 5, opts.height),\n        transX = _calRotateTranslate.transX,\n        transY = _calRotateTranslate.transY;\n\n        context.rotate(-1 * config._xAxisTextAngle_);\n        context.translate(transX, transY);\n        context.fillText(String(item), xAxisPoints[index] + offset, startY + xAxisFontSize + 5);\n        context.closePath();\n        context.stroke();\n        context.restore();\n      });\n    }\n  }\n  context.restore();\n\n  //绘制X轴轴线\n  if (opts.xAxis.axisLine) {\n    context.beginPath();\n    context.setStrokeStyle(opts.xAxis.axisLineColor);\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.moveTo(startX, opts.height - opts.area[2]);\n    context.lineTo(endX, opts.height - opts.area[2]);\n    context.stroke();\n  }\n}\n\nfunction drawYAxisGrid(categories, opts, config, context) {\n  if (opts.yAxis.disableGrid === true) {\n    return;\n  }\n  var spacingValid = opts.height - opts.area[0] - opts.area[2];\n  var eachSpacing = spacingValid / opts.yAxis.splitNumber;\n  var startX = opts.area[3];\n  var xAxisPoints = opts.chartData.xAxisData.xAxisPoints,\n  xAxiseachSpacing = opts.chartData.xAxisData.eachSpacing;\n  var TotalWidth = xAxiseachSpacing * (xAxisPoints.length - 1);\n  var endX = startX + TotalWidth;\n\n  var points = [];\n  for (var i = 0; i < opts.yAxis.splitNumber + 1; i++) {\n    points.push(opts.height - opts.area[2] - eachSpacing * i);\n  }\n\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n\n  if (opts.yAxis.gridType == 'dash') {\n    context.setLineDash([opts.yAxis.dashLength, opts.yAxis.dashLength]);\n  }\n  context.setStrokeStyle(opts.yAxis.gridColor);\n  context.setLineWidth(1 * opts.pixelRatio);\n  points.forEach(function (item, index) {\n    context.beginPath();\n    context.moveTo(startX, item);\n    context.lineTo(endX, item);\n    context.stroke();\n  });\n  context.setLineDash([]);\n\n  context.restore();\n}\n\nfunction drawYAxis(series, opts, config, context) {\n  if (opts.yAxis.disabled === true) {\n    return;\n  }\n  var spacingValid = opts.height - opts.area[0] - opts.area[2];\n  var eachSpacing = spacingValid / opts.yAxis.splitNumber;\n  var startX = opts.area[3];\n  var endX = opts.width - opts.area[1];\n  var endY = opts.height - opts.area[2];\n  var fillEndY = endY + config.xAxisHeight;\n  if (opts.xAxis.scrollShow) {\n    fillEndY -= 3 * opts.pixelRatio;\n  }\n  if (opts.xAxis.rotateLabel) {\n    fillEndY = opts.height - opts.area[2] + 3;\n  }\n  // set YAxis background\n  context.beginPath();\n  context.setFillStyle(opts.background || '#ffffff');\n  if (opts._scrollDistance_ < 0) {\n    context.fillRect(0, 0, startX, fillEndY);\n  }\n  if (opts.enableScroll == true) {\n    context.fillRect(endX, 0, opts.width, fillEndY);\n  }\n  context.closePath();\n  context.stroke();\n\n  var points = [];\n  for (var i = 0; i <= opts.yAxis.splitNumber; i++) {\n    points.push(opts.area[0] + eachSpacing * i);\n  }\n\n  var tStartLeft = opts.area[3];\n  var tStartRight = opts.width - opts.area[1];var _loop4 = function _loop4(\n\n  _i17) {\n    var yData = opts.yAxis.data[_i17];\n    if (yData.disabled !== true) {\n      var rangesFormat = opts.chartData.yAxisData.rangesFormat[_i17];\n      var yAxisFontSize = yData.fontSize || config.fontSize;\n      var yAxisWidth = opts.chartData.yAxisData.yAxisWidth[_i17];\n      //画Y轴刻度及文案\n      rangesFormat.forEach(function (item, index) {\n        var pos = points[index] ? points[index] : endY;\n        context.beginPath();\n        context.setFontSize(yAxisFontSize);\n        context.setLineWidth(1 * opts.pixelRatio);\n        context.setStrokeStyle(yData.axisLineColor || '#cccccc');\n        context.setFillStyle(yData.fontColor || '#666666');\n        if (yAxisWidth.position == 'left') {\n          context.fillText(String(item), tStartLeft - yAxisWidth.width, pos + yAxisFontSize / 2);\n          //画刻度线\n          if (yData.calibration == true) {\n            context.moveTo(tStartLeft, pos);\n            context.lineTo(tStartLeft - 3 * opts.pixelRatio, pos);\n          }\n        } else {\n          context.fillText(String(item), tStartRight + 4 * opts.pixelRatio, pos + yAxisFontSize / 2);\n          //画刻度线\n          if (yData.calibration == true) {\n            context.moveTo(tStartRight, pos);\n            context.lineTo(tStartRight + 3 * opts.pixelRatio, pos);\n          }\n        }\n        context.closePath();\n        context.stroke();\n      });\n      //画Y轴轴线\n      if (yData.axisLine !== false) {\n        context.beginPath();\n        context.setStrokeStyle(yData.axisLineColor || '#cccccc');\n        context.setLineWidth(1 * opts.pixelRatio);\n        if (yAxisWidth.position == 'left') {\n          context.moveTo(tStartLeft, opts.height - opts.area[2]);\n          context.lineTo(tStartLeft, opts.area[0]);\n        } else {\n          context.moveTo(tStartRight, opts.height - opts.area[2]);\n          context.lineTo(tStartRight, opts.area[0]);\n        }\n        context.stroke();\n      }\n\n      //画Y轴标题\n      if (opts.yAxis.showTitle) {\n\n        var titleFontSize = yData.titleFontSize || config.fontSize;\n        var title = yData.title;\n        context.beginPath();\n        context.setFontSize(titleFontSize);\n        context.setFillStyle(yData.titleFontColor || '#666666');\n        if (yAxisWidth.position == 'left') {\n          context.fillText(title, tStartLeft - measureText(title, titleFontSize) / 2, opts.area[0] - 10 * opts.pixelRatio);\n        } else {\n          context.fillText(title, tStartRight - measureText(title, titleFontSize) / 2, opts.area[0] - 10 * opts.pixelRatio);\n        }\n        context.closePath();\n        context.stroke();\n      }\n      if (yAxisWidth.position == 'left') {\n        tStartLeft -= yAxisWidth.width + opts.yAxis.padding;\n      } else {\n        tStartRight += yAxisWidth.width + opts.yAxis.padding;\n      }\n    }};for (var _i17 = 0; _i17 < opts.yAxis.data.length; _i17++) {_loop4(_i17);\n  }\n}\n\nfunction drawLegend(series, opts, config, context, chartData) {\n  if (opts.legend.show === false) {\n    return;\n  }\n  var legendData = chartData.legendData;\n  var legendList = legendData.points;\n  var legendArea = legendData.area;\n  var padding = opts.legend.padding;\n  var fontSize = opts.legend.fontSize;\n  var shapeWidth = 15 * opts.pixelRatio;\n  var shapeRight = 5 * opts.pixelRatio;\n  var itemGap = opts.legend.itemGap;\n  var lineHeight = Math.max(opts.legend.lineHeight * opts.pixelRatio, fontSize);\n\n  //画背景及边框\n  context.beginPath();\n  context.setLineWidth(opts.legend.borderWidth);\n  context.setStrokeStyle(opts.legend.borderColor);\n  context.setFillStyle(opts.legend.backgroundColor);\n  context.moveTo(legendArea.start.x, legendArea.start.y);\n  context.rect(legendArea.start.x, legendArea.start.y, legendArea.width, legendArea.height);\n  context.closePath();\n  context.fill();\n  context.stroke();\n\n  legendList.forEach(function (itemList, listIndex) {\n    var width = 0;\n    var height = 0;\n    width = legendData.widthArr[listIndex];\n    height = legendData.heightArr[listIndex];\n    var startX = 0;\n    var startY = 0;\n    if (opts.legend.position == 'top' || opts.legend.position == 'bottom') {\n      startX = legendArea.start.x + (legendArea.width - width) / 2;\n      startY = legendArea.start.y + padding + listIndex * lineHeight;\n    } else {\n      if (listIndex == 0) {\n        width = 0;\n      } else {\n        width = legendData.widthArr[listIndex - 1];\n      }\n      startX = legendArea.start.x + padding + width;\n      startY = legendArea.start.y + padding + (legendArea.height - height) / 2;\n    }\n\n    context.setFontSize(config.fontSize);\n    for (var i = 0; i < itemList.length; i++) {\n      var item = itemList[i];\n      item.area = [0, 0, 0, 0];\n      item.area[0] = startX;\n      item.area[1] = startY;\n      item.area[3] = startY + lineHeight;\n      context.beginPath();\n      context.setLineWidth(1 * opts.pixelRatio);\n      context.setStrokeStyle(item.show ? item.color : opts.legend.hiddenColor);\n      context.setFillStyle(item.show ? item.color : opts.legend.hiddenColor);\n      switch (item.legendShape) {\n        case 'line':\n          context.moveTo(startX, startY + 0.5 * lineHeight - 2 * opts.pixelRatio);\n          context.fillRect(startX, startY + 0.5 * lineHeight - 2 * opts.pixelRatio, 15 * opts.pixelRatio, 4 * opts.pixelRatio);\n          break;\n        case 'triangle':\n          context.moveTo(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight - 5 * opts.pixelRatio);\n          context.lineTo(startX + 2.5 * opts.pixelRatio, startY + 0.5 * lineHeight + 5 * opts.pixelRatio);\n          context.lineTo(startX + 12.5 * opts.pixelRatio, startY + 0.5 * lineHeight + 5 * opts.pixelRatio);\n          context.lineTo(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight - 5 * opts.pixelRatio);\n          break;\n        case 'diamond':\n          context.moveTo(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight - 5 * opts.pixelRatio);\n          context.lineTo(startX + 2.5 * opts.pixelRatio, startY + 0.5 * lineHeight);\n          context.lineTo(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight + 5 * opts.pixelRatio);\n          context.lineTo(startX + 12.5 * opts.pixelRatio, startY + 0.5 * lineHeight);\n          context.lineTo(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight - 5 * opts.pixelRatio);\n          break;\n        case 'circle':\n          context.moveTo(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight);\n          context.arc(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight, 5 * opts.pixelRatio, 0, 2 * Math.PI);\n          break;\n        case 'rect':\n          context.moveTo(startX, startY + 0.5 * lineHeight - 5 * opts.pixelRatio);\n          context.fillRect(startX, startY + 0.5 * lineHeight - 5 * opts.pixelRatio, 15 * opts.pixelRatio, 10 * opts.pixelRatio);\n          break;\n        default:\n          context.moveTo(startX, startY + 0.5 * lineHeight - 5 * opts.pixelRatio);\n          context.fillRect(startX, startY + 0.5 * lineHeight - 5 * opts.pixelRatio, 15 * opts.pixelRatio, 10 * opts.pixelRatio);}\n\n      context.closePath();\n      context.fill();\n      context.stroke();\n\n      startX += shapeWidth + shapeRight;\n      var fontTrans = 0.5 * lineHeight + 0.5 * fontSize - 2;\n      context.beginPath();\n      context.setFontSize(fontSize);\n      context.setFillStyle(item.show ? opts.legend.fontColor : opts.legend.hiddenColor);\n      context.fillText(item.name, startX, startY + fontTrans);\n      context.closePath();\n      context.stroke();\n      if (opts.legend.position == 'top' || opts.legend.position == 'bottom') {\n        startX += measureText(item.name, fontSize) + itemGap;\n        item.area[2] = startX;\n      } else {\n        item.area[2] = startX + measureText(item.name, fontSize) + itemGap;;\n        startX -= shapeWidth + shapeRight;\n        startY += lineHeight;\n      }\n    }\n  });\n}\n\nfunction drawPieDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var pieOption = assign({}, {\n    activeOpacity: 0.5,\n    activeRadius: 10 * opts.pixelRatio,\n    offsetAngle: 0,\n    labelWidth: 15 * opts.pixelRatio,\n    ringWidth: 0,\n    border: false,\n    borderWidth: 2,\n    borderColor: '#FFFFFF' },\n  opts.extra.pie);\n  var centerPosition = {\n    x: opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2,\n    y: opts.area[0] + (opts.height - opts.area[0] - opts.area[2]) / 2 };\n\n  if (config.pieChartLinePadding == 0) {\n    config.pieChartLinePadding = pieOption.activeRadius;\n  }\n\n  var radius = Math.min((opts.width - opts.area[1] - opts.area[3]) / 2 - config.pieChartLinePadding - config.pieChartTextPadding - config._pieTextMaxLength_, (opts.height - opts.area[0] - opts.area[2]) / 2 - config.pieChartLinePadding - config.pieChartTextPadding);\n\n  series = getPieDataPoints(series, radius, process);\n\n  var activeRadius = pieOption.activeRadius;\n\n  series = series.map(function (eachSeries) {\n    eachSeries._start_ += pieOption.offsetAngle * Math.PI / 180;\n    return eachSeries;\n  });\n  series.forEach(function (eachSeries, seriesIndex) {\n    if (opts.tooltip) {\n      if (opts.tooltip.index == seriesIndex) {\n        context.beginPath();\n        context.setFillStyle(hexToRgb(eachSeries.color, opts.extra.pie.activeOpacity || 0.5));\n        context.moveTo(centerPosition.x, centerPosition.y);\n        context.arc(centerPosition.x, centerPosition.y, eachSeries._radius_ + activeRadius, eachSeries._start_,\n        eachSeries._start_ + 2 *\n        eachSeries._proportion_ * Math.PI);\n        context.closePath();\n        context.fill();\n      }\n    }\n    context.beginPath();\n    context.setLineWidth(pieOption.borderWidth * opts.pixelRatio);\n    context.lineJoin = \"round\";\n    context.setStrokeStyle(pieOption.borderColor);\n    context.setFillStyle(eachSeries.color);\n    context.moveTo(centerPosition.x, centerPosition.y);\n    context.arc(centerPosition.x, centerPosition.y, eachSeries._radius_, eachSeries._start_, eachSeries._start_ + 2 * eachSeries._proportion_ * Math.PI);\n    context.closePath();\n    context.fill();\n    if (pieOption.border == true) {\n      context.stroke();\n    }\n  });\n\n  if (opts.type === 'ring') {\n    var innerPieWidth = radius * 0.6;\n    if (typeof opts.extra.pie.ringWidth === 'number' && opts.extra.pie.ringWidth > 0) {\n      innerPieWidth = Math.max(0, radius - opts.extra.pie.ringWidth);\n    }\n    context.beginPath();\n    context.setFillStyle(opts.background || '#ffffff');\n    context.moveTo(centerPosition.x, centerPosition.y);\n    context.arc(centerPosition.x, centerPosition.y, innerPieWidth, 0, 2 * Math.PI);\n    context.closePath();\n    context.fill();\n  }\n\n  if (opts.dataLabel !== false && process === 1) {\n    var valid = false;\n    for (var i = 0, len = series.length; i < len; i++) {\n      if (series[i].data > 0) {\n        valid = true;\n        break;\n      }\n    }\n\n    if (valid) {\n      drawPieText(series, opts, config, context, radius, centerPosition);\n    }\n  }\n\n  if (process === 1 && opts.type === 'ring') {\n    drawRingTitle(opts, config, context, centerPosition);\n  }\n\n  return {\n    center: centerPosition,\n    radius: radius,\n    series: series };\n\n}\n\nfunction drawRoseDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var roseOption = assign({}, {\n    type: 'area',\n    activeOpacity: 0.5,\n    activeRadius: 10 * opts.pixelRatio,\n    offsetAngle: 0,\n    labelWidth: 15 * opts.pixelRatio,\n    border: false,\n    borderWidth: 2,\n    borderColor: '#FFFFFF' },\n  opts.extra.rose);\n  if (config.pieChartLinePadding == 0) {\n    config.pieChartLinePadding = roseOption.activeRadius;\n  }\n  var centerPosition = {\n    x: opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2,\n    y: opts.area[0] + (opts.height - opts.area[0] - opts.area[2]) / 2 };\n\n  var radius = Math.min((opts.width - opts.area[1] - opts.area[3]) / 2 - config.pieChartLinePadding - config.pieChartTextPadding - config._pieTextMaxLength_, (opts.height - opts.area[0] - opts.area[2]) / 2 - config.pieChartLinePadding - config.pieChartTextPadding);\n  var minRadius = roseOption.minRadius || radius * 0.5;\n\n  series = getRoseDataPoints(series, roseOption.type, minRadius, radius, process);\n\n  var activeRadius = roseOption.activeRadius;\n\n  series = series.map(function (eachSeries) {\n    eachSeries._start_ += (roseOption.offsetAngle || 0) * Math.PI / 180;\n    return eachSeries;\n  });\n\n  series.forEach(function (eachSeries, seriesIndex) {\n    if (opts.tooltip) {\n      if (opts.tooltip.index == seriesIndex) {\n        context.beginPath();\n        context.setFillStyle(hexToRgb(eachSeries.color, roseOption.activeOpacity || 0.5));\n        context.moveTo(centerPosition.x, centerPosition.y);\n        context.arc(centerPosition.x, centerPosition.y, activeRadius + eachSeries._radius_, eachSeries._start_,\n        eachSeries._start_ + 2 * eachSeries._rose_proportion_ * Math.PI);\n        context.closePath();\n        context.fill();\n      }\n    }\n    context.beginPath();\n    context.setLineWidth(roseOption.borderWidth * opts.pixelRatio);\n    context.lineJoin = \"round\";\n    context.setStrokeStyle(roseOption.borderColor);\n    context.setFillStyle(eachSeries.color);\n    context.moveTo(centerPosition.x, centerPosition.y);\n    context.arc(centerPosition.x, centerPosition.y, eachSeries._radius_, eachSeries._start_, eachSeries._start_ + 2 *\n    eachSeries._rose_proportion_ * Math.PI);\n    context.closePath();\n    context.fill();\n    if (roseOption.border == true) {\n      context.stroke();\n    }\n  });\n\n  if (opts.dataLabel !== false && process === 1) {\n    var valid = false;\n    for (var i = 0, len = series.length; i < len; i++) {\n      if (series[i].data > 0) {\n        valid = true;\n        break;\n      }\n    }\n\n    if (valid) {\n      drawPieText(series, opts, config, context, radius, centerPosition);\n    }\n  }\n\n  return {\n    center: centerPosition,\n    radius: radius,\n    series: series };\n\n}\n\nfunction drawArcbarDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var arcbarOption = assign({}, {\n    startAngle: 0.75,\n    endAngle: 0.25,\n    type: 'default',\n    width: 12 * opts.pixelRatio,\n    gap: 2 * opts.pixelRatio },\n  opts.extra.arcbar);\n\n  series = getArcbarDataPoints(series, arcbarOption, process);\n\n  var centerPosition;\n  if (arcbarOption.center) {\n    centerPosition = arcbarOption.center;\n  } else {\n    centerPosition = {\n      x: opts.width / 2,\n      y: opts.height / 2 };\n\n  }\n\n  var radius;\n  if (arcbarOption.radius) {\n    radius = arcbarOption.radius;\n  } else {\n    radius = Math.min(centerPosition.x, centerPosition.y);\n    radius -= 5 * opts.pixelRatio;\n    radius -= arcbarOption.width / 2;\n  }\n\n  for (var i = 0; i < series.length; i++) {\n    var eachSeries = series[i];\n    //背景颜色\n    context.setLineWidth(arcbarOption.width);\n    context.setStrokeStyle(arcbarOption.backgroundColor || '#E9E9E9');\n    context.setLineCap('round');\n    context.beginPath();\n    if (arcbarOption.type == 'default') {\n      context.arc(centerPosition.x, centerPosition.y, radius - (arcbarOption.width + arcbarOption.gap) * i, arcbarOption.startAngle * Math.PI, arcbarOption.endAngle * Math.PI, false);\n    } else {\n      context.arc(centerPosition.x, centerPosition.y, radius - (arcbarOption.width + arcbarOption.gap) * i, 0, 2 * Math.PI, false);\n    }\n    context.stroke();\n    //进度条\n    context.setLineWidth(arcbarOption.width);\n    context.setStrokeStyle(eachSeries.color);\n    context.setLineCap('round');\n    context.beginPath();\n    context.arc(centerPosition.x, centerPosition.y, radius - (arcbarOption.width + arcbarOption.gap) * i, arcbarOption.startAngle * Math.PI, eachSeries._proportion_ * Math.PI, false);\n    context.stroke();\n  }\n\n  drawRingTitle(opts, config, context, centerPosition);\n\n  return {\n    center: centerPosition,\n    radius: radius,\n    series: series };\n\n}\n\nfunction drawGaugeDataPoints(categories, series, opts, config, context) {\n  var process = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  var gaugeOption = assign({}, {\n    type: 'default',\n    startAngle: 0.75,\n    endAngle: 0.25,\n    width: 15,\n    splitLine: {\n      fixRadius: 0,\n      splitNumber: 10,\n      width: 15,\n      color: '#FFFFFF',\n      childNumber: 5,\n      childWidth: 5 },\n\n    pointer: {\n      width: 15,\n      color: 'auto' } },\n\n  opts.extra.gauge);\n\n  if (gaugeOption.oldAngle == undefined) {\n    gaugeOption.oldAngle = gaugeOption.startAngle;\n  }\n  if (gaugeOption.oldData == undefined) {\n    gaugeOption.oldData = 0;\n  }\n  categories = getGaugeAxisPoints(categories, gaugeOption.startAngle, gaugeOption.endAngle);\n\n  var centerPosition = {\n    x: opts.width / 2,\n    y: opts.height / 2 };\n\n  var radius = Math.min(centerPosition.x, centerPosition.y);\n  radius -= 5 * opts.pixelRatio;\n  radius -= gaugeOption.width / 2;\n  var innerRadius = radius - gaugeOption.width;\n  var totalAngle = 0;\n\n  //判断仪表盘的样式：default百度样式，progress新样式\n  if (gaugeOption.type == 'progress') {\n\n    //## 第一步画中心圆形背景和进度条背景\n    //中心圆形背景\n    var pieRadius = radius - gaugeOption.width * 3;\n    context.beginPath();\n    var gradient = context.createLinearGradient(centerPosition.x, centerPosition.y - pieRadius, centerPosition.x, centerPosition.y + pieRadius);\n    //配置渐变填充（起点：中心点向上减半径；结束点中心点向下加半径）\n    gradient.addColorStop('0', hexToRgb(series[0].color, 0.3));\n    gradient.addColorStop('1.0', hexToRgb(\"#FFFFFF\", 0.1));\n    context.setFillStyle(gradient);\n    context.arc(centerPosition.x, centerPosition.y, pieRadius, 0, 2 * Math.PI, false);\n    context.fill();\n    //画进度条背景\n    context.setLineWidth(gaugeOption.width);\n    context.setStrokeStyle(hexToRgb(series[0].color, 0.3));\n    context.setLineCap('round');\n    context.beginPath();\n    context.arc(centerPosition.x, centerPosition.y, innerRadius, gaugeOption.startAngle * Math.PI, gaugeOption.endAngle * Math.PI, false);\n    context.stroke();\n\n    //## 第二步画刻度线\n    totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\n    var splitAngle = totalAngle / gaugeOption.splitLine.splitNumber;\n    var childAngle = totalAngle / gaugeOption.splitLine.splitNumber / gaugeOption.splitLine.childNumber;\n    var startX = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius;\n    var endX = -radius - gaugeOption.width - gaugeOption.splitLine.fixRadius + gaugeOption.splitLine.width;\n    context.save();\n    context.translate(centerPosition.x, centerPosition.y);\n    context.rotate((gaugeOption.startAngle - 1) * Math.PI);\n    var len = gaugeOption.splitLine.splitNumber * gaugeOption.splitLine.childNumber + 1;\n    var proc = series[0].data * process;\n    for (var i = 0; i < len; i++) {\n      context.beginPath();\n      //刻度线随进度变色\n      if (proc > i / len) {\n        context.setStrokeStyle(hexToRgb(series[0].color, 1));\n      } else {\n        context.setStrokeStyle(hexToRgb(series[0].color, 0.3));\n      }\n      context.setLineWidth(3 * opts.pixelRatio);\n      context.moveTo(startX, 0);\n      context.lineTo(endX, 0);\n      context.stroke();\n      context.rotate(childAngle * Math.PI);\n    }\n    context.restore();\n\n    //## 第三步画进度条\n    series = getArcbarDataPoints(series, gaugeOption, process);\n    context.setLineWidth(gaugeOption.width);\n    context.setStrokeStyle(series[0].color);\n    context.setLineCap('round');\n    context.beginPath();\n    context.arc(centerPosition.x, centerPosition.y, innerRadius, gaugeOption.startAngle * Math.PI, series[0]._proportion_ * Math.PI, false);\n    context.stroke();\n\n    //## 第四步画指针\n    var pointerRadius = radius - gaugeOption.width * 2.5;\n    context.save();\n    context.translate(centerPosition.x, centerPosition.y);\n    context.rotate((series[0]._proportion_ - 1) * Math.PI);\n    context.beginPath();\n    context.setLineWidth(gaugeOption.width / 3);\n    var gradient3 = context.createLinearGradient(0, -pointerRadius * 0.6, 0, pointerRadius * 0.6);\n    gradient3.addColorStop('0', hexToRgb('#FFFFFF', 0));\n    gradient3.addColorStop('0.5', hexToRgb(series[0].color, 1));\n    gradient3.addColorStop('1.0', hexToRgb('#FFFFFF', 0));\n    context.setStrokeStyle(gradient3);\n    context.arc(0, 0, pointerRadius, 0.85 * Math.PI, 1.15 * Math.PI, false);\n    context.stroke();\n    context.beginPath();\n    context.setLineWidth(1);\n    context.setStrokeStyle(series[0].color);\n    context.setFillStyle(series[0].color);\n    context.moveTo(-pointerRadius - gaugeOption.width / 3 / 2, -4);\n    context.lineTo(-pointerRadius - gaugeOption.width / 3 / 2 - 4, 0);\n    context.lineTo(-pointerRadius - gaugeOption.width / 3 / 2, 4);\n    context.lineTo(-pointerRadius - gaugeOption.width / 3 / 2, -4);\n    context.stroke();\n    context.fill();\n    context.restore();\n\n    //default百度样式\n  } else {\n    //画背景\n    context.setLineWidth(gaugeOption.width);\n    context.setLineCap('butt');\n    for (var _i18 = 0; _i18 < categories.length; _i18++) {\n      var eachCategories = categories[_i18];\n      context.beginPath();\n      context.setStrokeStyle(eachCategories.color);\n      context.arc(centerPosition.x, centerPosition.y, radius, eachCategories._startAngle_ * Math.PI, eachCategories._endAngle_ * Math.PI, false);\n      context.stroke();\n    }\n    context.save();\n\n    //画刻度线\n    totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\n    var _splitAngle = totalAngle / gaugeOption.splitLine.splitNumber;\n    var _childAngle = totalAngle / gaugeOption.splitLine.splitNumber / gaugeOption.splitLine.childNumber;\n    var _startX2 = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius;\n    var _endX = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius + gaugeOption.splitLine.width;\n    var childendX = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius + gaugeOption.splitLine.childWidth;\n\n    context.translate(centerPosition.x, centerPosition.y);\n    context.rotate((gaugeOption.startAngle - 1) * Math.PI);\n\n    for (var _i19 = 0; _i19 < gaugeOption.splitLine.splitNumber + 1; _i19++) {\n      context.beginPath();\n      context.setStrokeStyle(gaugeOption.splitLine.color);\n      context.setLineWidth(2 * opts.pixelRatio);\n      context.moveTo(_startX2, 0);\n      context.lineTo(_endX, 0);\n      context.stroke();\n      context.rotate(_splitAngle * Math.PI);\n    }\n    context.restore();\n\n    context.save();\n    context.translate(centerPosition.x, centerPosition.y);\n    context.rotate((gaugeOption.startAngle - 1) * Math.PI);\n\n    for (var _i20 = 0; _i20 < gaugeOption.splitLine.splitNumber * gaugeOption.splitLine.childNumber + 1; _i20++) {\n      context.beginPath();\n      context.setStrokeStyle(gaugeOption.splitLine.color);\n      context.setLineWidth(1 * opts.pixelRatio);\n      context.moveTo(_startX2, 0);\n      context.lineTo(childendX, 0);\n      context.stroke();\n      context.rotate(_childAngle * Math.PI);\n    }\n    context.restore();\n\n    //画指针\n    series = getGaugeDataPoints(series, categories, gaugeOption, process);\n\n    for (var _i21 = 0; _i21 < series.length; _i21++) {\n      var eachSeries = series[_i21];\n      context.save();\n      context.translate(centerPosition.x, centerPosition.y);\n      context.rotate((eachSeries._proportion_ - 1) * Math.PI);\n      context.beginPath();\n      context.setFillStyle(eachSeries.color);\n      context.moveTo(gaugeOption.pointer.width, 0);\n      context.lineTo(0, -gaugeOption.pointer.width / 2);\n      context.lineTo(-innerRadius, 0);\n      context.lineTo(0, gaugeOption.pointer.width / 2);\n      context.lineTo(gaugeOption.pointer.width, 0);\n      context.closePath();\n      context.fill();\n      context.beginPath();\n      context.setFillStyle('#FFFFFF');\n      context.arc(0, 0, gaugeOption.pointer.width / 6, 0, 2 * Math.PI, false);\n      context.fill();\n      context.restore();\n    }\n\n    if (opts.dataLabel !== false) {\n      drawGaugeLabel(gaugeOption, radius, centerPosition, opts, config, context);\n    }\n  }\n\n  //画仪表盘标题，副标题\n  drawRingTitle(opts, config, context, centerPosition);\n\n  if (process === 1 && opts.type === 'gauge') {\n    opts.extra.gauge.oldAngle = series[0]._proportion_;\n    opts.extra.gauge.oldData = series[0].data;\n  }\n  return {\n    center: centerPosition,\n    radius: radius,\n    innerRadius: innerRadius,\n    categories: categories,\n    totalAngle: totalAngle };\n\n}\n\nfunction drawRadarDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var radarOption = assign({}, {\n    gridColor: '#cccccc',\n    gridType: 'radar',\n    labelColor: '#666666',\n    opacity: 0.2,\n    gridCount: 3 },\n  opts.extra.radar);\n\n  var coordinateAngle = getRadarCoordinateSeries(opts.categories.length);\n\n  var centerPosition = {\n    x: opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2,\n    y: opts.area[0] + (opts.height - opts.area[0] - opts.area[2]) / 2 };\n\n\n  var radius = Math.min(centerPosition.x - (getMaxTextListLength(opts.categories) + config.radarLabelTextMargin), centerPosition.y - config.radarLabelTextMargin);\n  //TODO逻辑不对\n  radius -= opts.padding[1];\n\n  // 画分割线\n  context.beginPath();\n  context.setLineWidth(1 * opts.pixelRatio);\n  context.setStrokeStyle(radarOption.gridColor);\n  coordinateAngle.forEach(function (angle) {\n    var pos = convertCoordinateOrigin(radius * Math.cos(angle), radius * Math.sin(angle), centerPosition);\n    context.moveTo(centerPosition.x, centerPosition.y);\n    context.lineTo(pos.x, pos.y);\n  });\n  context.stroke();\n  context.closePath();\n\n  // 画背景网格\n  var _loop = function _loop(i) {\n    var startPos = {};\n    context.beginPath();\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.setStrokeStyle(radarOption.gridColor);\n    if (radarOption.gridType == 'radar') {\n      coordinateAngle.forEach(function (angle, index) {\n        var pos = convertCoordinateOrigin(radius / radarOption.gridCount * i * Math.cos(angle), radius / radarOption.gridCount * i * Math.sin(angle), centerPosition);\n        if (index === 0) {\n          startPos = pos;\n          context.moveTo(pos.x, pos.y);\n        } else {\n          context.lineTo(pos.x, pos.y);\n        }\n      });\n      context.lineTo(startPos.x, startPos.y);\n    } else {\n      var pos = convertCoordinateOrigin(radius / radarOption.gridCount * i * Math.cos(1.5), radius / radarOption.gridCount * i * Math.sin(1.5), centerPosition);\n      context.arc(centerPosition.x, centerPosition.y, centerPosition.y - pos.y, 0, 2 * Math.PI, false);\n    }\n    context.stroke();\n    context.closePath();\n  };\n\n  for (var i = 1; i <= radarOption.gridCount; i++) {\n    _loop(i);\n  }\n\n  var radarDataPoints = getRadarDataPoints(coordinateAngle, centerPosition, radius, series, opts, process);\n\n  radarDataPoints.forEach(function (eachSeries, seriesIndex) {\n    // 绘制区域数据\n    context.beginPath();\n    context.setFillStyle(hexToRgb(eachSeries.color, radarOption.opacity));\n    eachSeries.data.forEach(function (item, index) {\n      if (index === 0) {\n        context.moveTo(item.position.x, item.position.y);\n      } else {\n        context.lineTo(item.position.x, item.position.y);\n      }\n    });\n    context.closePath();\n    context.fill();\n\n    if (opts.dataPointShape !== false) {\n      var points = eachSeries.data.map(function (item) {\n        return item.position;\n      });\n      drawPointShape(points, eachSeries.color, eachSeries.pointShape, context, opts);\n    }\n  });\n  // draw label text\n  drawRadarLabel(coordinateAngle, radius, centerPosition, opts, config, context);\n\n  return {\n    center: centerPosition,\n    radius: radius,\n    angleList: coordinateAngle };\n\n}\n\nfunction normalInt(min, max, iter) {\n  iter = iter == 0 ? 1 : iter;\n  var arr = [];\n  for (var i = 0; i < iter; i++) {\n    arr[i] = Math.random();\n  };\n  return Math.floor(arr.reduce(function (i, j) {return i + j;}) / iter * (max - min)) + min;\n};\n\nfunction collisionNew(area, points, width, height) {\n  var isIn = false;\n  for (var i = 0; i < points.length; i++) {\n    if (points[i].area) {\n      if (area[3] < points[i].area[1] || area[0] > points[i].area[2] || area[1] > points[i].area[3] || area[2] < points[i].area[0]) {\n        if (area[0] < 0 || area[1] < 0 || area[2] > width || area[3] > height) {\n          isIn = true;\n          break;\n        } else {\n          isIn = false;\n        }\n      } else {\n        isIn = true;\n        break;\n      }\n    }\n  }\n  return isIn;\n};\n\nfunction getBoundingBox(data) {\n  var bounds = {},coords;\n  bounds.xMin = 180;\n  bounds.xMax = 0;\n  bounds.yMin = 90;\n  bounds.yMax = 0;\n  for (var i = 0; i < data.length; i++) {\n    var coorda = data[i].geometry.coordinates;\n    for (var k = 0; k < coorda.length; k++) {\n      coords = coorda[k];\n      if (coords.length == 1) {\n        coords = coords[0];\n      }\n      for (var j = 0; j < coords.length; j++) {\n        var longitude = coords[j][0];\n        var latitude = coords[j][1];\n        var point = {\n          x: longitude,\n          y: latitude };\n\n        bounds.xMin = bounds.xMin < point.x ? bounds.xMin : point.x;\n        bounds.xMax = bounds.xMax > point.x ? bounds.xMax : point.x;\n        bounds.yMin = bounds.yMin < point.y ? bounds.yMin : point.y;\n        bounds.yMax = bounds.yMax > point.y ? bounds.yMax : point.y;\n      }\n    }\n  }\n  return bounds;\n}\n\nfunction coordinateToPoint(latitude, longitude, bounds, scale, xoffset, yoffset) {\n  return {\n    x: (longitude - bounds.xMin) * scale + xoffset,\n    y: (bounds.yMax - latitude) * scale + yoffset };\n\n}\n\nfunction pointToCoordinate(pointY, pointX, bounds, scale, xoffset, yoffset) {\n  return {\n    x: (pointX - xoffset) / scale + bounds.xMin,\n    y: bounds.yMax - (pointY - yoffset) / scale };\n\n}\n\nfunction isRayIntersectsSegment(poi, s_poi, e_poi) {\n  if (s_poi[1] == e_poi[1]) {return false;}\n  if (s_poi[1] > poi[1] && e_poi[1] > poi[1]) {return false;}\n  if (s_poi[1] < poi[1] && e_poi[1] < poi[1]) {return false;}\n  if (s_poi[1] == poi[1] && e_poi[1] > poi[1]) {return false;}\n  if (e_poi[1] == poi[1] && s_poi[1] > poi[1]) {return false;}\n  if (s_poi[0] < poi[0] && e_poi[1] < poi[1]) {return false;}\n  var xseg = e_poi[0] - (e_poi[0] - s_poi[0]) * (e_poi[1] - poi[1]) / (e_poi[1] - s_poi[1]);\n  if (xseg < poi[0]) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nfunction isPoiWithinPoly(poi, poly) {\n  var sinsc = 0;\n  for (var i = 0; i < poly.length; i++) {\n    var epoly = poly[i][0];\n    if (poly.length == 1) {\n      epoly = poly[i][0];\n    }\n    for (var j = 0; j < epoly.length - 1; j++) {\n      var s_poi = epoly[j];\n      var e_poi = epoly[j + 1];\n      if (isRayIntersectsSegment(poi, s_poi, e_poi)) {\n        sinsc += 1;\n      }\n    }\n  }\n\n  if (sinsc % 2 == 1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\nfunction drawMapDataPoints(series, opts, config, context) {\n  var mapOption = assign({}, {\n    border: true,\n    borderWidth: 1,\n    borderColor: '#666666',\n    fillOpacity: 0.6,\n    activeBorderColor: '#f04864',\n    activeFillColor: '#facc14',\n    activeFillOpacity: 1 },\n  opts.extra.map);\n  var coords, point;\n  var data = series;\n  var bounds = getBoundingBox(data);\n  var xScale = opts.width / Math.abs(bounds.xMax - bounds.xMin);\n  var yScale = opts.height / Math.abs(bounds.yMax - bounds.yMin);\n  var scale = xScale < yScale ? xScale : yScale;\n  var xoffset = opts.width / 2 - Math.abs(bounds.xMax - bounds.xMin) / 2 * scale;\n  var yoffset = opts.height / 2 - Math.abs(bounds.yMax - bounds.yMin) / 2 * scale;\n  context.beginPath();\n  context.clearRect(0, 0, opts.width, opts.height);\n  context.setFillStyle(opts.background || '#FFFFFF');\n  context.rect(0, 0, opts.width, opts.height);\n  context.fill();\n  for (var i = 0; i < data.length; i++) {\n    context.beginPath();\n    context.setLineWidth(mapOption.borderWidth * opts.pixelRatio);\n    context.setStrokeStyle(mapOption.borderColor);\n    context.setFillStyle(hexToRgb(series[i].color, mapOption.fillOpacity));\n    if (opts.tooltip) {\n      if (opts.tooltip.index == i) {\n        context.setStrokeStyle(mapOption.activeBorderColor);\n        context.setFillStyle(hexToRgb(mapOption.activeFillColor, mapOption.activeFillOpacity));\n      }\n    }\n    var coorda = data[i].geometry.coordinates;\n    for (var k = 0; k < coorda.length; k++) {\n      coords = coorda[k];\n      if (coords.length == 1) {\n        coords = coords[0];\n      }\n      for (var j = 0; j < coords.length; j++) {\n        point = coordinateToPoint(coords[j][1], coords[j][0], bounds, scale, xoffset, yoffset);\n        if (j === 0) {\n          context.beginPath();\n          context.moveTo(point.x, point.y);\n        } else {\n          context.lineTo(point.x, point.y);\n        }\n      }\n      context.fill();\n      if (mapOption.border == true) {\n        context.stroke();\n      }\n    }\n    if (opts.dataLabel == true) {\n      var centerPoint = data[i].properties.centroid;\n      if (centerPoint) {\n        point = coordinateToPoint(centerPoint[1], centerPoint[0], bounds, scale, xoffset, yoffset);\n        var fontSize = data[i].textSize || config.fontSize;\n        var text = data[i].properties.name;\n        context.beginPath();\n        context.setFontSize(fontSize);\n        context.setFillStyle(data[i].textColor || '#666666');\n        context.fillText(text, point.x - measureText(text, fontSize) / 2, point.y + fontSize / 2);\n        context.closePath();\n        context.stroke();\n      }\n    }\n  }\n  opts.chartData.mapData = {\n    bounds: bounds,\n    scale: scale,\n    xoffset: xoffset,\n    yoffset: yoffset };\n\n  drawToolTipBridge(opts, config, context, 1);\n  context.draw();\n}\n\nfunction getWordCloudPoint(opts, type) {\n  var points = opts.series.sort(function (a, b) {return parseInt(b.textSize) - parseInt(a.textSize);});\n  switch (type) {\n    case 'normal':\n      for (var i = 0; i < points.length; i++) {\n        var text = points[i].name;\n        var tHeight = points[i].textSize;\n        var tWidth = measureText(text, tHeight);\n        var x = void 0,y = void 0;\n        var area = void 0;\n        var breaknum = 0;\n        while (true) {\n          breaknum++;\n          x = normalInt(-opts.width / 2, opts.width / 2, 5) - tWidth / 2;\n          y = normalInt(-opts.height / 2, opts.height / 2, 5) + tHeight / 2;\n          area = [x - 5 + opts.width / 2, y - 5 - tHeight + opts.height / 2, x + tWidth + 5 + opts.width / 2, y + 5 + opts.height / 2];\n          var isCollision = collisionNew(area, points, opts.width, opts.height);\n          if (!isCollision) break;\n          if (breaknum == 1000) {\n            area = [-100, -100, -100, -100];\n            break;\n          }\n        };\n        points[i].area = area;\n      }\n      break;\n    case 'vertical':var\n      Spin = function Spin() {\n        //获取均匀随机值，是否旋转，旋转的概率为（1-0.5）\n        if (Math.random() > 0.7) {\n          return true;\n        } else {return false;};\n      };;\n      for (var _i22 = 0; _i22 < points.length; _i22++) {\n        var _text = points[_i22].name;\n        var _tHeight = points[_i22].textSize;\n        var _tWidth = measureText(_text, _tHeight);\n        var isSpin = Spin();\n        var _x = void 0,_y = void 0,_area = void 0,areav = void 0;\n        var _breaknum = 0;\n        while (true) {\n          _breaknum++;\n          var _isCollision = void 0;\n          if (isSpin) {\n            _x = normalInt(-opts.width / 2, opts.width / 2, 5) - _tWidth / 2;\n            _y = normalInt(-opts.height / 2, opts.height / 2, 5) + _tHeight / 2;\n            _area = [_y - 5 - _tWidth + opts.width / 2, -_x - 5 + opts.height / 2, _y + 5 + opts.width / 2, -_x + _tHeight + 5 + opts.height / 2];\n            areav = [opts.width - (opts.width / 2 - opts.height / 2) - (-_x + _tHeight + 5 + opts.height / 2) - 5, opts.height / 2 - opts.width / 2 + (_y - 5 - _tWidth + opts.width / 2) - 5, opts.width - (opts.width / 2 - opts.height / 2) - (-_x + _tHeight + 5 + opts.height / 2) + _tHeight, opts.height / 2 - opts.width / 2 + (_y - 5 - _tWidth + opts.width / 2) + _tWidth + 5];\n            _isCollision = collisionNew(areav, points, opts.height, opts.width);\n          } else {\n            _x = normalInt(-opts.width / 2, opts.width / 2, 5) - _tWidth / 2;\n            _y = normalInt(-opts.height / 2, opts.height / 2, 5) + _tHeight / 2;\n            _area = [_x - 5 + opts.width / 2, _y - 5 - _tHeight + opts.height / 2, _x + _tWidth + 5 + opts.width / 2, _y + 5 + opts.height / 2];\n            _isCollision = collisionNew(_area, points, opts.width, opts.height);\n          }\n          if (!_isCollision) break;\n          if (_breaknum == 1000) {\n            _area = [-1000, -1000, -1000, -1000];\n            break;\n          }\n        };\n        if (isSpin) {\n          points[_i22].area = areav;\n          points[_i22].areav = _area;\n        } else {\n          points[_i22].area = _area;\n        }\n        points[_i22].rotate = isSpin;\n      };\n      break;}\n\n  return points;\n}\n\n\nfunction drawWordCloudDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var wordOption = assign({}, {\n    type: 'normal',\n    autoColors: true },\n  opts.extra.word);\n\n  context.beginPath();\n  context.setFillStyle(opts.background || '#FFFFFF');\n  context.rect(0, 0, opts.width, opts.height);\n  context.fill();\n  context.save();\n  var points = opts.chartData.wordCloudData;\n  context.translate(opts.width / 2, opts.height / 2);\n\n  for (var i = 0; i < points.length; i++) {\n    context.save();\n    if (points[i].rotate) {\n      context.rotate(90 * Math.PI / 180);\n    }\n    var text = points[i].name;\n    var tHeight = points[i].textSize;\n    var tWidth = measureText(text, tHeight);\n    context.beginPath();\n    context.setStrokeStyle(points[i].color);\n    context.setFillStyle(points[i].color);\n    context.setFontSize(tHeight);\n    if (points[i].rotate) {\n      if (points[i].areav[0] > 0) {\n        if (opts.tooltip) {\n          if (opts.tooltip.index == i) {\n            context.strokeText(text, (points[i].areav[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].areav[1] + 5 + tHeight - opts.height / 2) * process);\n          } else {\n            context.fillText(text, (points[i].areav[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].areav[1] + 5 + tHeight - opts.height / 2) * process);\n          }\n        } else {\n          context.fillText(text, (points[i].areav[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].areav[1] + 5 + tHeight - opts.height / 2) * process);\n        }\n      }\n    } else {\n      if (points[i].area[0] > 0) {\n        if (opts.tooltip) {\n          if (opts.tooltip.index == i) {\n            context.strokeText(text, (points[i].area[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].area[1] + 5 + tHeight - opts.height / 2) * process);\n          } else {\n            context.fillText(text, (points[i].area[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].area[1] + 5 + tHeight - opts.height / 2) * process);\n          }\n        } else {\n          context.fillText(text, (points[i].area[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].area[1] + 5 + tHeight - opts.height / 2) * process);\n        }\n\n      }\n    }\n\n    context.stroke();\n    context.restore();\n  }\n  context.restore();\n}\n\nfunction drawFunnelDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var funnelOption = assign({}, {\n    activeWidth: 10,\n    activeOpacity: 0.3,\n    border: false,\n    borderWidth: 2,\n    borderColor: '#FFFFFF',\n    fillOpacity: 1,\n    labelAlign: 'right' },\n  opts.extra.funnel);\n  var eachSpacing = (opts.height - opts.area[0] - opts.area[2]) / series.length;\n  var centerPosition = {\n    x: opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2,\n    y: opts.height - opts.area[2] };\n\n  var activeWidth = funnelOption.activeWidth;\n  var radius = Math.min((opts.width - opts.area[1] - opts.area[3]) / 2 - activeWidth, (opts.height - opts.area[0] - opts.area[2]) / 2 - activeWidth);\n  series = getFunnelDataPoints(series, radius, process);\n  context.save();\n  context.translate(centerPosition.x, centerPosition.y);\n  for (var i = 0; i < series.length; i++) {\n    if (i == 0) {\n      if (opts.tooltip) {\n        if (opts.tooltip.index == i) {\n          context.beginPath();\n          context.setFillStyle(hexToRgb(series[i].color, funnelOption.activeOpacity));\n          context.moveTo(-activeWidth, 0);\n          context.lineTo(-series[i].radius - activeWidth, -eachSpacing);\n          context.lineTo(series[i].radius + activeWidth, -eachSpacing);\n          context.lineTo(activeWidth, 0);\n          context.lineTo(-activeWidth, 0);\n          context.closePath();\n          context.fill();\n        }\n      }\n      series[i].funnelArea = [centerPosition.x - series[i].radius, centerPosition.y - eachSpacing, centerPosition.x + series[i].radius, centerPosition.y];\n      context.beginPath();\n      context.setLineWidth(funnelOption.borderWidth * opts.pixelRatio);\n      context.setStrokeStyle(funnelOption.borderColor);\n      context.setFillStyle(hexToRgb(series[i].color, funnelOption.fillOpacity));\n      context.moveTo(0, 0);\n      context.lineTo(-series[i].radius, -eachSpacing);\n      context.lineTo(series[i].radius, -eachSpacing);\n      context.lineTo(0, 0);\n      context.closePath();\n      context.fill();\n      if (funnelOption.border == true) {\n        context.stroke();\n      }\n    } else {\n      if (opts.tooltip) {\n        if (opts.tooltip.index == i) {\n          context.beginPath();\n          context.setFillStyle(hexToRgb(series[i].color, funnelOption.activeOpacity));\n          context.moveTo(0, 0);\n          context.lineTo(-series[i - 1].radius - activeWidth, 0);\n          context.lineTo(-series[i].radius - activeWidth, -eachSpacing);\n          context.lineTo(series[i].radius + activeWidth, -eachSpacing);\n          context.lineTo(series[i - 1].radius + activeWidth, 0);\n          context.lineTo(0, 0);\n          context.closePath();\n          context.fill();\n        }\n      }\n      series[i].funnelArea = [centerPosition.x - series[i].radius, centerPosition.y - eachSpacing * (i + 1), centerPosition.x + series[i].radius, centerPosition.y - eachSpacing * i];\n      context.beginPath();\n      context.setLineWidth(funnelOption.borderWidth * opts.pixelRatio);\n      context.setStrokeStyle(funnelOption.borderColor);\n      context.setFillStyle(hexToRgb(series[i].color, funnelOption.fillOpacity));\n      context.moveTo(0, 0);\n      context.lineTo(-series[i - 1].radius, 0);\n      context.lineTo(-series[i].radius, -eachSpacing);\n      context.lineTo(series[i].radius, -eachSpacing);\n      context.lineTo(series[i - 1].radius, 0);\n      context.lineTo(0, 0);\n      context.closePath();\n      context.fill();\n      if (funnelOption.border == true) {\n        context.stroke();\n      }\n    }\n    context.translate(0, -eachSpacing);\n  }\n  context.restore();\n\n  if (opts.dataLabel !== false && process === 1) {\n    drawFunnelText(series, opts, context, eachSpacing, funnelOption.labelAlign, activeWidth, centerPosition);\n  }\n\n  return {\n    center: centerPosition,\n    radius: radius,\n    series: series };\n\n}\n\nfunction drawFunnelText(series, opts, context, eachSpacing, labelAlign, activeWidth, centerPosition) {\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    var startX = void 0,endX = void 0,startY = void 0,fontSize = void 0;\n    var text = item.format ? item.format(+item._proportion_.toFixed(2)) : util.toFixed(item._proportion_ * 100) + '%';\n    if (labelAlign == 'right') {\n      if (i == 0) {\n        startX = (item.funnelArea[2] + centerPosition.x) / 2;\n      } else {\n        startX = (item.funnelArea[2] + series[i - 1].funnelArea[2]) / 2;\n      }\n      endX = startX + activeWidth * 2;\n      startY = item.funnelArea[1] + eachSpacing / 2;\n      fontSize = item.textSize || opts.fontSize;\n      context.setLineWidth(1 * opts.pixelRatio);\n      context.setStrokeStyle(item.color);\n      context.setFillStyle(item.color);\n      context.beginPath();\n      context.moveTo(startX, startY);\n      context.lineTo(endX, startY);\n      context.stroke();\n      context.closePath();\n      context.beginPath();\n      context.moveTo(endX, startY);\n      context.arc(endX, startY, 2, 0, 2 * Math.PI);\n      context.closePath();\n      context.fill();\n      context.beginPath();\n      context.setFontSize(fontSize);\n      context.setFillStyle(item.textColor || '#666666');\n      context.fillText(text, endX + 5, startY + fontSize / 2 - 2);\n      context.closePath();\n      context.stroke();\n      context.closePath();\n    } else {\n      if (i == 0) {\n        startX = (item.funnelArea[0] + centerPosition.x) / 2;\n      } else {\n        startX = (item.funnelArea[0] + series[i - 1].funnelArea[0]) / 2;\n      }\n      endX = startX - activeWidth * 2;\n      startY = item.funnelArea[1] + eachSpacing / 2;\n      fontSize = item.textSize || opts.fontSize;\n      context.setLineWidth(1 * opts.pixelRatio);\n      context.setStrokeStyle(item.color);\n      context.setFillStyle(item.color);\n      context.beginPath();\n      context.moveTo(startX, startY);\n      context.lineTo(endX, startY);\n      context.stroke();\n      context.closePath();\n      context.beginPath();\n      context.moveTo(endX, startY);\n      context.arc(endX, startY, 2, 0, 2 * Math.PI);\n      context.closePath();\n      context.fill();\n      context.beginPath();\n      context.setFontSize(fontSize);\n      context.setFillStyle(item.textColor || '#666666');\n      context.fillText(text, endX - 5 - measureText(text), startY + fontSize / 2 - 2);\n      context.closePath();\n      context.stroke();\n      context.closePath();\n    }\n\n  }\n}\n\n\nfunction drawCanvas(opts, context) {\n  context.draw();\n}\n\nvar Timing = {\n  easeIn: function easeIn(pos) {\n    return Math.pow(pos, 3);\n  },\n  easeOut: function easeOut(pos) {\n    return Math.pow(pos - 1, 3) + 1;\n  },\n  easeInOut: function easeInOut(pos) {\n    if ((pos /= 0.5) < 1) {\n      return 0.5 * Math.pow(pos, 3);\n    } else {\n      return 0.5 * (Math.pow(pos - 2, 3) + 2);\n    }\n  },\n  linear: function linear(pos) {\n    return pos;\n  } };\n\n\nfunction Animation(opts) {\n  this.isStop = false;\n  opts.duration = typeof opts.duration === 'undefined' ? 1000 : opts.duration;\n  opts.timing = opts.timing || 'linear';\n  var delay = 17;\n\n  function createAnimationFrame() {\n    if (typeof setTimeout !== 'undefined') {\n      return function (step, delay) {\n        setTimeout(function () {\n          var timeStamp = +new Date();\n          step(timeStamp);\n        }, delay);\n      };\n    } else if (typeof requestAnimationFrame !== 'undefined') {\n      return requestAnimationFrame;\n    } else {\n      return function (step) {\n        step(null);\n      };\n    }\n  };\n  var animationFrame = createAnimationFrame();\n  var startTimeStamp = null;\n  var _step = function step(timestamp) {\n    if (timestamp === null || this.isStop === true) {\n      opts.onProcess && opts.onProcess(1);\n      opts.onAnimationFinish && opts.onAnimationFinish();\n      return;\n    }\n    if (startTimeStamp === null) {\n      startTimeStamp = timestamp;\n    }\n    if (timestamp - startTimeStamp < opts.duration) {\n      var process = (timestamp - startTimeStamp) / opts.duration;\n      var timingFunction = Timing[opts.timing];\n      process = timingFunction(process);\n\n      opts.onProcess && opts.onProcess(process);\n      animationFrame(_step, delay);\n    } else {\n      opts.onProcess && opts.onProcess(1);\n      opts.onAnimationFinish && opts.onAnimationFinish();\n    }\n  };\n  _step = _step.bind(this);\n  animationFrame(_step, delay);\n}\n\n// stop animation immediately\n// and tigger onAnimationFinish\nAnimation.prototype.stop = function () {\n  this.isStop = true;\n};\n\nfunction drawCharts(type, opts, config, context) {\n  var _this = this;\n  var series = opts.series;\n  var categories = opts.categories;\n  series = fillSeries(series, opts, config);\n  var duration = opts.animation ? opts.duration : 0;\n  _this.animationInstance && _this.animationInstance.stop();\n  var seriesMA = null;\n  if (type == 'candle') {\n    var average = assign({}, opts.extra.candle.average);\n    if (average.show) {\n      seriesMA = calCandleMA(average.day, average.name, average.color, series[0].data);\n      seriesMA = fillSeries(seriesMA, opts, config);\n      opts.seriesMA = seriesMA;\n    } else if (opts.seriesMA) {\n      seriesMA = opts.seriesMA = fillSeries(opts.seriesMA, opts, config);\n    } else {\n      seriesMA = series;\n    }\n  } else {\n    seriesMA = series;\n  }\n\n  /* 过滤掉show=false的series */\n  opts._series_ = series = filterSeries(series);\n\n  //重新计算图表区域\n\n  opts.area = new Array(4);\n  //复位绘图区域\n  for (var j = 0; j < 4; j++) {\n    opts.area[j] = opts.padding[j];\n  }\n\n  //通过计算三大区域：图例、X轴、Y轴的大小，确定绘图区域\n  var _calLegendData = calLegendData(seriesMA, opts, config, opts.chartData),\n  legendHeight = _calLegendData.area.wholeHeight,\n  legendWidth = _calLegendData.area.wholeWidth;\n\n  switch (opts.legend.position) {\n    case 'top':\n      opts.area[0] += legendHeight;\n      break;\n    case 'bottom':\n      opts.area[2] += legendHeight;\n      break;\n    case 'left':\n      opts.area[3] += legendWidth;\n      break;\n    case 'right':\n      opts.area[1] += legendWidth;\n      break;}\n\n\n  var _calYAxisData = {},yAxisWidth = 0;\n  if (opts.type === 'line' || opts.type === 'column' || opts.type === 'area' || opts.type === 'mix' || opts.type === 'candle') {\n    _calYAxisData = calYAxisData(series, opts, config);\n    yAxisWidth = _calYAxisData.yAxisWidth;\n    //如果显示Y轴标题\n    if (opts.yAxis.showTitle) {\n      var maxTitleHeight = 0;\n      for (var i = 0; i < opts.yAxis.data.length; i++) {\n        maxTitleHeight = Math.max(maxTitleHeight, opts.yAxis.data[i].titleFontSize ? opts.yAxis.data[i].titleFontSize : config.fontSize);\n      }\n      opts.area[0] += (maxTitleHeight + 6) * opts.pixelRatio;\n    }\n    var rightIndex = 0,leftIndex = 0;\n    //计算主绘图区域左右位置\n    for (var _i23 = 0; _i23 < yAxisWidth.length; _i23++) {\n      if (yAxisWidth[_i23].position == 'left') {\n        if (leftIndex > 0) {\n          opts.area[3] += yAxisWidth[_i23].width + opts.yAxis.padding;\n        } else {\n          opts.area[3] += yAxisWidth[_i23].width;\n        }\n        leftIndex += 1;\n      } else {\n        if (rightIndex > 0) {\n          opts.area[1] += yAxisWidth[_i23].width + opts.yAxis.padding;\n        } else {\n          opts.area[1] += yAxisWidth[_i23].width;\n        }\n        rightIndex += 1;\n      }\n    }\n  } else {\n    config.yAxisWidth = yAxisWidth;\n  }\n  opts.chartData.yAxisData = _calYAxisData;\n\n  if (opts.categories && opts.categories.length) {\n    opts.chartData.xAxisData = getXAxisPoints(opts.categories, opts, config);\n    var _calCategoriesData = calCategoriesData(opts.categories, opts, config, opts.chartData.xAxisData.eachSpacing),\n    xAxisHeight = _calCategoriesData.xAxisHeight,\n    angle = _calCategoriesData.angle;\n    config.xAxisHeight = xAxisHeight;\n    config._xAxisTextAngle_ = angle;\n    opts.area[2] += xAxisHeight;\n    opts.chartData.categoriesData = _calCategoriesData;\n  } else {\n    if (opts.type === 'line' || opts.type === 'area' || opts.type === 'points') {\n      opts.chartData.xAxisData = calXAxisData(series, opts, config);\n      categories = opts.chartData.xAxisData.rangesFormat;\n      var _calCategoriesData2 = calCategoriesData(categories, opts, config, opts.chartData.xAxisData.eachSpacing),\n      _xAxisHeight = _calCategoriesData2.xAxisHeight,\n      _angle = _calCategoriesData2.angle;\n      config.xAxisHeight = _xAxisHeight;\n      config._xAxisTextAngle_ = _angle;\n      opts.area[2] += _xAxisHeight;\n      opts.chartData.categoriesData = _calCategoriesData2;\n    } else {\n      opts.chartData.xAxisData = {\n        xAxisPoints: [] };\n\n    }\n  }\n  //计算右对齐偏移距离\n  if (opts.enableScroll && opts.xAxis.scrollAlign == 'right' && opts._scrollDistance_ === undefined) {\n    var offsetLeft = 0,\n    xAxisPoints = opts.chartData.xAxisData.xAxisPoints,\n    startX = opts.chartData.xAxisData.startX,\n    endX = opts.chartData.xAxisData.endX,\n    eachSpacing = opts.chartData.xAxisData.eachSpacing;\n    var totalWidth = eachSpacing * (xAxisPoints.length - 1);\n    var screenWidth = endX - startX;\n    offsetLeft = screenWidth - totalWidth;\n    _this.scrollOption = {\n      currentOffset: offsetLeft,\n      startTouchX: offsetLeft,\n      distance: 0,\n      lastMoveTime: 0 };\n\n    opts._scrollDistance_ = offsetLeft;\n  }\n\n  if (type === 'pie' || type === 'ring' || type === 'rose') {\n    config._pieTextMaxLength_ = opts.dataLabel === false ? 0 : getPieTextMaxLength(seriesMA);\n  }\n\n  switch (type) {\n    case 'word':\n      var wordOption = assign({}, {\n        type: 'normal',\n        autoColors: true },\n      opts.extra.word);\n      if (opts.updateData == true || opts.updateData == undefined) {\n        opts.chartData.wordCloudData = getWordCloudPoint(opts, wordOption.type);\n      }\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawWordCloudDataPoints(series, opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'map':\n      context.clearRect(0, 0, opts.width, opts.height);\n      drawMapDataPoints(series, opts, config, context);\n      break;\n    case 'funnel':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          opts.chartData.funnelData = drawFunnelDataPoints(series, opts, config, context, process);\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'line':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawLineDataPoints = drawLineDataPoints(series, opts, config, context, process),\n          xAxisPoints = _drawLineDataPoints.xAxisPoints,\n          calPoints = _drawLineDataPoints.calPoints,\n          eachSpacing = _drawLineDataPoints.eachSpacing;\n          opts.chartData.xAxisPoints = xAxisPoints;\n          opts.chartData.calPoints = calPoints;\n          opts.chartData.eachSpacing = eachSpacing;\n          drawYAxis(series, opts, config, context);\n          if (opts.enableMarkLine !== false && process === 1) {\n            drawMarkLine(opts, config, context);\n          }\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'mix':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawMixDataPoints = drawMixDataPoints(series, opts, config, context, process),\n          xAxisPoints = _drawMixDataPoints.xAxisPoints,\n          calPoints = _drawMixDataPoints.calPoints,\n          eachSpacing = _drawMixDataPoints.eachSpacing;\n          opts.chartData.xAxisPoints = xAxisPoints;\n          opts.chartData.calPoints = calPoints;\n          opts.chartData.eachSpacing = eachSpacing;\n          drawYAxis(series, opts, config, context);\n          if (opts.enableMarkLine !== false && process === 1) {\n            drawMarkLine(opts, config, context);\n          }\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'column':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawColumnDataPoints = drawColumnDataPoints(series, opts, config, context, process),\n          xAxisPoints = _drawColumnDataPoints.xAxisPoints,\n          calPoints = _drawColumnDataPoints.calPoints,\n          eachSpacing = _drawColumnDataPoints.eachSpacing;\n          opts.chartData.xAxisPoints = xAxisPoints;\n          opts.chartData.calPoints = calPoints;\n          opts.chartData.eachSpacing = eachSpacing;\n          drawYAxis(series, opts, config, context);\n          if (opts.enableMarkLine !== false && process === 1) {\n            drawMarkLine(opts, config, context);\n          }\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'area':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawAreaDataPoints = drawAreaDataPoints(series, opts, config, context, process),\n          xAxisPoints = _drawAreaDataPoints.xAxisPoints,\n          calPoints = _drawAreaDataPoints.calPoints,\n          eachSpacing = _drawAreaDataPoints.eachSpacing;\n          opts.chartData.xAxisPoints = xAxisPoints;\n          opts.chartData.calPoints = calPoints;\n          opts.chartData.eachSpacing = eachSpacing;\n          drawYAxis(series, opts, config, context);\n          if (opts.enableMarkLine !== false && process === 1) {\n            drawMarkLine(opts, config, context);\n          }\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'ring':\n    case 'pie':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          opts.chartData.pieData = drawPieDataPoints(series, opts, config, context, process);\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'rose':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          opts.chartData.pieData = drawRoseDataPoints(series, opts, config, context, process);\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'radar':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          opts.chartData.radarData = drawRadarDataPoints(series, opts, config, context, process);\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'arcbar':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          opts.chartData.arcbarData = drawArcbarDataPoints(series, opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'gauge':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          opts.chartData.gaugeData = drawGaugeDataPoints(categories, series, opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'candle':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawCandleDataPoints = drawCandleDataPoints(series, seriesMA, opts, config, context, process),\n          xAxisPoints = _drawCandleDataPoints.xAxisPoints,\n          calPoints = _drawCandleDataPoints.calPoints,\n          eachSpacing = _drawCandleDataPoints.eachSpacing;\n          opts.chartData.xAxisPoints = xAxisPoints;\n          opts.chartData.calPoints = calPoints;\n          opts.chartData.eachSpacing = eachSpacing;\n          drawYAxis(series, opts, config, context);\n          if (opts.enableMarkLine !== false && process === 1) {\n            drawMarkLine(opts, config, context);\n          }\n          if (seriesMA) {\n            drawLegend(seriesMA, opts, config, context, opts.chartData);\n          } else {\n            drawLegend(opts.series, opts, config, context, opts.chartData);\n          }\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;}\n\n}\n\n// simple event implement\n\nfunction Event() {\n  this.events = {};\n}\n\nEvent.prototype.addEventListener = function (type, listener) {\n  this.events[type] = this.events[type] || [];\n  this.events[type].push(listener);\n};\n\nEvent.prototype.trigger = function () {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var type = args[0];\n  var params = args.slice(1);\n  if (!!this.events[type]) {\n    this.events[type].forEach(function (listener) {\n      try {\n        listener.apply(null, params);\n      } catch (e) {\n        __f__(\"error\", e, \" at components/u-charts/u-charts/u-charts.js:5131\");\n      }\n    });\n  }\n};\n\nvar Charts = function Charts(opts) {\n  opts.pixelRatio = opts.pixelRatio ? opts.pixelRatio : 1;\n  opts.fontSize = opts.fontSize ? opts.fontSize * opts.pixelRatio : 13 * opts.pixelRatio;\n  opts.title = assign({}, opts.title);\n  opts.subtitle = assign({}, opts.subtitle);\n  opts.duration = opts.duration ? opts.duration : 1000;\n  opts.yAxis = assign({}, {\n    data: [],\n    showTitle: false,\n    disabled: false,\n    disableGrid: false,\n    splitNumber: 5,\n    gridType: 'solid',\n    dashLength: 4 * opts.pixelRatio,\n    gridColor: '#cccccc',\n    padding: 10,\n    fontColor: '#666666' },\n  opts.yAxis);\n  opts.yAxis.dashLength *= opts.pixelRatio;\n  opts.yAxis.padding *= opts.pixelRatio;\n  opts.xAxis = assign({}, {\n    rotateLabel: false,\n    type: 'calibration',\n    gridType: 'solid',\n    dashLength: 4,\n    scrollAlign: 'left',\n    boundaryGap: 'center',\n    axisLine: true,\n    axisLineColor: '#cccccc' },\n  opts.xAxis);\n  opts.xAxis.dashLength *= opts.pixelRatio;\n  opts.legend = assign({}, {\n    show: true,\n    position: 'bottom',\n    float: 'center',\n    backgroundColor: 'rgba(0,0,0,0)',\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    padding: 5,\n    margin: 5,\n    itemGap: 10,\n    fontSize: opts.fontSize,\n    lineHeight: opts.fontSize,\n    fontColor: '#333333',\n    format: {},\n    hiddenColor: '#CECECE' },\n  opts.legend);\n  opts.legend.borderWidth = opts.legend.borderWidth * opts.pixelRatio;\n  opts.legend.itemGap = opts.legend.itemGap * opts.pixelRatio;\n  opts.legend.padding = opts.legend.padding * opts.pixelRatio;\n  opts.legend.margin = opts.legend.margin * opts.pixelRatio;\n  opts.extra = assign({}, opts.extra);\n  opts.rotate = opts.rotate ? true : false;\n  opts.animation = opts.animation ? true : false;\n  opts.rotate = opts.rotate ? true : false;\n  opts.canvas2d = opts.canvas2d ? true : false;\n\n  var config$$1 = JSON.parse(JSON.stringify(config));\n  config$$1.colors = opts.colors ? opts.colors : config$$1.colors;\n  config$$1.yAxisTitleWidth = opts.yAxis.disabled !== true && opts.yAxis.title ? config$$1.yAxisTitleWidth : 0;\n  if (opts.type == 'pie' || opts.type == 'ring') {\n    config$$1.pieChartLinePadding = opts.dataLabel === false ? 0 : opts.extra.pie.labelWidth * opts.pixelRatio || config$$1.pieChartLinePadding * opts.pixelRatio;\n  }\n  if (opts.type == 'rose') {\n    config$$1.pieChartLinePadding = opts.dataLabel === false ? 0 : opts.extra.rose.labelWidth * opts.pixelRatio || config$$1.pieChartLinePadding * opts.pixelRatio;\n  }\n  config$$1.pieChartTextPadding = opts.dataLabel === false ? 0 : config$$1.pieChartTextPadding * opts.pixelRatio;\n  config$$1.yAxisSplit = opts.yAxis.splitNumber ? opts.yAxis.splitNumber : config.yAxisSplit;\n\n  //屏幕旋转\n  config$$1.rotate = opts.rotate;\n  if (opts.rotate) {\n    var tempWidth = opts.width;\n    var tempHeight = opts.height;\n    opts.width = tempHeight;\n    opts.height = tempWidth;\n  }\n\n  //适配高分屏\n  opts.padding = opts.padding ? opts.padding : config$$1.padding;\n  for (var i = 0; i < 4; i++) {\n    opts.padding[i] *= opts.pixelRatio;\n  }\n  config$$1.yAxisWidth = config.yAxisWidth * opts.pixelRatio;\n  config$$1.xAxisHeight = config.xAxisHeight * opts.pixelRatio;\n  if (opts.enableScroll && opts.xAxis.scrollShow) {\n    config$$1.xAxisHeight += 6 * opts.pixelRatio;\n  }\n  config$$1.xAxisLineHeight = config.xAxisLineHeight * opts.pixelRatio;\n  config$$1.fontSize = opts.fontSize;\n  config$$1.titleFontSize = config.titleFontSize * opts.pixelRatio;\n  config$$1.subtitleFontSize = config.subtitleFontSize * opts.pixelRatio;\n  config$$1.toolTipPadding = config.toolTipPadding * opts.pixelRatio;\n  config$$1.toolTipLineHeight = config.toolTipLineHeight * opts.pixelRatio;\n  config$$1.columePadding = config.columePadding * opts.pixelRatio;\n  opts.$this = opts.$this ? opts.$this : this;\n\n  this.context = opts.context ? opts.context : uni.createCanvasContext(opts.canvasId, opts.$this);\n\n  if (opts.canvas2d) {\n    this.context.setStrokeStyle = function (e) {return this.strokeStyle = e;};\n    this.context.setLineWidth = function (e) {return this.lineWidth = e;};\n    this.context.setLineCap = function (e) {return this.lineCap = e;};\n    this.context.setFontSize = function (e) {return this.font = e + \"px sans-serif\";};\n    this.context.setFillStyle = function (e) {return this.fillStyle = e;};\n    this.context.draw = function () {};\n  }\n  /* 兼容原生H5\r\n    this.context = document.getElementById(opts.canvasId).getContext(\"2d\");\r\n    this.context.setStrokeStyle = function(e){ return this.strokeStyle=e; }\r\n    this.context.setLineWidth = function(e){ return this.lineWidth=e; }\r\n    this.context.setLineCap = function(e){ return this.lineCap=e; }\r\n    this.context.setFontSize = function(e){ return this.font=e+\"px sans-serif\"; }\r\n    this.context.setFillStyle = function(e){ return this.fillStyle=e; }\r\n    this.context.draw = function(){ }\r\n    */\n\n  opts.chartData = {};\n  this.event = new Event();\n  this.scrollOption = {\n    currentOffset: 0,\n    startTouchX: 0,\n    distance: 0,\n    lastMoveTime: 0 };\n\n\n  this.opts = opts;\n  this.config = config$$1;\n\n  drawCharts.call(this, opts.type, opts, config$$1, this.context);\n};\n\nCharts.prototype.updateData = function () {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  this.opts = assign({}, this.opts, data);\n  this.opts.updateData = true;\n  var scrollPosition = data.scrollPosition || 'current';\n  switch (scrollPosition) {\n    case 'current':\n      this.opts._scrollDistance_ = this.scrollOption.currentOffset;\n      break;\n    case 'left':\n      this.opts._scrollDistance_ = 0;\n      this.scrollOption = {\n        currentOffset: 0,\n        startTouchX: 0,\n        distance: 0,\n        lastMoveTime: 0 };\n\n      break;\n    case 'right':\n      var _calYAxisData = calYAxisData(this.opts.series, this.opts, this.config),\n      yAxisWidth = _calYAxisData.yAxisWidth;\n      this.config.yAxisWidth = yAxisWidth;\n      var offsetLeft = 0;\n      var _getXAxisPoints0 = getXAxisPoints(this.opts.categories, this.opts, this.config),\n      xAxisPoints = _getXAxisPoints0.xAxisPoints,\n      startX = _getXAxisPoints0.startX,\n      endX = _getXAxisPoints0.endX,\n      eachSpacing = _getXAxisPoints0.eachSpacing;\n      var totalWidth = eachSpacing * (xAxisPoints.length - 1);\n      var screenWidth = endX - startX;\n      offsetLeft = screenWidth - totalWidth;\n      this.scrollOption = {\n        currentOffset: offsetLeft,\n        startTouchX: offsetLeft,\n        distance: 0,\n        lastMoveTime: 0 };\n\n      this.opts._scrollDistance_ = offsetLeft;\n      break;}\n\n  drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);\n};\n\nCharts.prototype.zoom = function () {\n  var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.opts.xAxis.itemCount;\n  if (this.opts.enableScroll !== true) {\n    __f__(\"log\", '请启用滚动条后使用！', \" at components/u-charts/u-charts/u-charts.js:5315\");\n    return;\n  }\n  //当前屏幕中间点\n  var centerPoint = Math.round(Math.abs(this.scrollOption.currentOffset) / this.opts.chartData.eachSpacing) + Math.round(\n  this.opts.xAxis.itemCount / 2);\n  this.opts.animation = false;\n  this.opts.xAxis.itemCount = val.itemCount;\n  //重新计算x轴偏移距离\n  var _calYAxisData = calYAxisData(this.opts.series, this.opts, this.config),\n  yAxisWidth = _calYAxisData.yAxisWidth;\n  this.config.yAxisWidth = yAxisWidth;\n  var offsetLeft = 0;\n  var _getXAxisPoints0 = getXAxisPoints(this.opts.categories, this.opts, this.config),\n  xAxisPoints = _getXAxisPoints0.xAxisPoints,\n  startX = _getXAxisPoints0.startX,\n  endX = _getXAxisPoints0.endX,\n  eachSpacing = _getXAxisPoints0.eachSpacing;\n  var centerLeft = eachSpacing * centerPoint;\n  var screenWidth = endX - startX;\n  var MaxLeft = screenWidth - eachSpacing * (xAxisPoints.length - 1);\n  offsetLeft = screenWidth / 2 - centerLeft;\n  if (offsetLeft > 0) {\n    offsetLeft = 0;\n  }\n  if (offsetLeft < MaxLeft) {\n    offsetLeft = MaxLeft;\n  }\n  this.scrollOption = {\n    currentOffset: offsetLeft,\n    startTouchX: offsetLeft,\n    distance: 0,\n    lastMoveTime: 0 };\n\n  this.opts._scrollDistance_ = offsetLeft;\n  drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);\n};\n\nCharts.prototype.stopAnimation = function () {\n  this.animationInstance && this.animationInstance.stop();\n};\n\nCharts.prototype.addEventListener = function (type, listener) {\n  this.event.addEventListener(type, listener);\n};\n\nCharts.prototype.getCurrentDataIndex = function (e) {\n  var touches = null;\n  if (e.changedTouches) {\n    touches = e.changedTouches[0];\n  } else {\n    touches = e.mp.changedTouches[0];\n  }\n  if (touches) {\n    var _touches$ = getTouches(touches, this.opts, e);\n    if (this.opts.type === 'pie' || this.opts.type === 'ring' || this.opts.type === 'rose') {\n      return findPieChartCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y },\n      this.opts.chartData.pieData);\n    } else if (this.opts.type === 'radar') {\n      return findRadarChartCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y },\n      this.opts.chartData.radarData, this.opts.categories.length);\n    } else if (this.opts.type === 'funnel') {\n      return findFunnelChartCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y },\n      this.opts.chartData.funnelData);\n    } else if (this.opts.type === 'map') {\n      return findMapChartCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y },\n      this.opts);\n    } else if (this.opts.type === 'word') {\n      return findWordChartCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y },\n      this.opts.chartData.wordCloudData);\n    } else {\n      return findCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y },\n      this.opts.chartData.calPoints, this.opts, this.config, Math.abs(this.scrollOption.currentOffset));\n    }\n  }\n  return -1;\n};\n\nCharts.prototype.getLegendDataIndex = function (e) {\n  var touches = null;\n  if (e.changedTouches) {\n    touches = e.changedTouches[0];\n  } else {\n    touches = e.mp.changedTouches[0];\n  }\n  if (touches) {\n    var _touches$ = getTouches(touches, this.opts, e);\n    return findLegendIndex({\n      x: _touches$.x,\n      y: _touches$.y },\n    this.opts.chartData.legendData);\n  }\n  return -1;\n};\n\nCharts.prototype.touchLegend = function (e) {\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var touches = null;\n  if (e.changedTouches) {\n    touches = e.changedTouches[0];\n  } else {\n    touches = e.mp.changedTouches[0];\n  }\n  if (touches) {\n    var _touches$ = getTouches(touches, this.opts, e);\n    var index = this.getLegendDataIndex(e);\n    if (index >= 0) {\n      this.opts.series[index].show = !this.opts.series[index].show;\n      this.opts.animation = option.animation ? true : false;\n      this.opts._scrollDistance_ = this.scrollOption.currentOffset;\n      drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);\n    }\n  }\n\n};\n\nCharts.prototype.showToolTip = function (e) {\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var touches = null;\n  if (e.changedTouches) {\n    touches = e.changedTouches[0];\n  } else {\n    touches = e.mp.changedTouches[0];\n  }\n  if (!touches) {\n    __f__(\"log\", \"touchError\", \" at components/u-charts/u-charts/u-charts.js:5452\");\n  }\n  var _touches$ = getTouches(touches, this.opts, e);\n  var currentOffset = this.scrollOption.currentOffset;\n  var opts = assign({}, this.opts, {\n    _scrollDistance_: currentOffset,\n    animation: false });\n\n  if (this.opts.type === 'line' || this.opts.type === 'area' || this.opts.type === 'column') {\n    var index = option.index == undefined ? this.getCurrentDataIndex(e) : option.index;\n    if (index > -1) {\n      var seriesData = getSeriesDataItem(this.opts.series, index);\n      if (seriesData.length !== 0) {\n        var _getToolTipData = getToolTipData(seriesData, this.opts.chartData.calPoints, index, this.opts.categories, option),\n        textList = _getToolTipData.textList,\n        offset = _getToolTipData.offset;\n        offset.y = _touches$.y;\n        opts.tooltip = {\n          textList: option.textList ? option.textList : textList,\n          offset: offset,\n          option: option,\n          index: index };\n\n      }\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n  if (this.opts.type === 'mix') {\n    var index = option.index == undefined ? this.getCurrentDataIndex(e) : option.index;\n    if (index > -1) {\n      var currentOffset = this.scrollOption.currentOffset;\n      var opts = assign({}, this.opts, {\n        _scrollDistance_: currentOffset,\n        animation: false });\n\n      var seriesData = getSeriesDataItem(this.opts.series, index);\n      if (seriesData.length !== 0) {\n        var _getMixToolTipData = getMixToolTipData(seriesData, this.opts.chartData.calPoints, index, this.opts.categories, option),\n        textList = _getMixToolTipData.textList,\n        offset = _getMixToolTipData.offset;\n        offset.y = _touches$.y;\n        opts.tooltip = {\n          textList: option.textList ? option.textList : textList,\n          offset: offset,\n          option: option,\n          index: index };\n\n      }\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n  if (this.opts.type === 'candle') {\n    var index = option.index == undefined ? this.getCurrentDataIndex(e) : option.index;\n    if (index > -1) {\n      var currentOffset = this.scrollOption.currentOffset;\n      var opts = assign({}, this.opts, {\n        _scrollDistance_: currentOffset,\n        animation: false });\n\n      var seriesData = getSeriesDataItem(this.opts.series, index);\n      if (seriesData.length !== 0) {\n        var _getToolTipData = getCandleToolTipData(this.opts.series[0].data, seriesData, this.opts.chartData.calPoints,\n        index, this.opts.categories, this.opts.extra.candle, option),\n        textList = _getToolTipData.textList,\n        offset = _getToolTipData.offset;\n        offset.y = _touches$.y;\n        opts.tooltip = {\n          textList: option.textList ? option.textList : textList,\n          offset: offset,\n          option: option,\n          index: index };\n\n      }\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n  if (this.opts.type === 'pie' || this.opts.type === 'ring' || this.opts.type === 'rose' || this.opts.type === 'funnel') {\n    var index = option.index == undefined ? this.getCurrentDataIndex(e) : option.index;\n    if (index > -1) {\n      var currentOffset = this.scrollOption.currentOffset;\n      var opts = assign({}, this.opts, {\n        _scrollDistance_: currentOffset,\n        animation: false });\n\n      var seriesData = this.opts._series_[index];\n      var textList = [{\n        text: option.format ? option.format(seriesData) : seriesData.name + ': ' + seriesData.data,\n        color: seriesData.color }];\n\n      var offset = {\n        x: _touches$.x,\n        y: _touches$.y };\n\n      opts.tooltip = {\n        textList: option.textList ? option.textList : textList,\n        offset: offset,\n        option: option,\n        index: index };\n\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n  if (this.opts.type === 'map' || this.opts.type === 'word') {\n    var index = option.index == undefined ? this.getCurrentDataIndex(e) : option.index;\n    if (index > -1) {\n      var currentOffset = this.scrollOption.currentOffset;\n      var opts = assign({}, this.opts, {\n        _scrollDistance_: currentOffset,\n        animation: false });\n\n      var seriesData = this.opts._series_[index];\n      var textList = [{\n        text: option.format ? option.format(seriesData) : seriesData.properties.name,\n        color: seriesData.color }];\n\n      var offset = {\n        x: _touches$.x,\n        y: _touches$.y };\n\n      opts.tooltip = {\n        textList: option.textList ? option.textList : textList,\n        offset: offset,\n        option: option,\n        index: index };\n\n    }\n    opts.updateData = false;\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n  if (this.opts.type === 'radar') {\n    var index = option.index == undefined ? this.getCurrentDataIndex(e) : option.index;\n    if (index > -1) {\n      var currentOffset = this.scrollOption.currentOffset;\n      var opts = assign({}, this.opts, {\n        _scrollDistance_: currentOffset,\n        animation: false });\n\n      var seriesData = getSeriesDataItem(this.opts.series, index);\n      if (seriesData.length !== 0) {\n        var textList = seriesData.map(function (item) {\n          return {\n            text: option.format ? option.format(item) : item.name + ': ' + item.data,\n            color: item.color };\n\n        });\n        var offset = {\n          x: _touches$.x,\n          y: _touches$.y };\n\n        opts.tooltip = {\n          textList: option.textList ? option.textList : textList,\n          offset: offset,\n          option: option,\n          index: index };\n\n      }\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n};\n\nCharts.prototype.translate = function (distance) {\n  this.scrollOption = {\n    currentOffset: distance,\n    startTouchX: distance,\n    distance: 0,\n    lastMoveTime: 0 };\n\n  var opts = assign({}, this.opts, {\n    _scrollDistance_: distance,\n    animation: false });\n\n  drawCharts.call(this, this.opts.type, opts, this.config, this.context);\n};\n\nCharts.prototype.scrollStart = function (e) {\n  var touches = null;\n  if (e.changedTouches) {\n    touches = e.changedTouches[0];\n  } else {\n    touches = e.mp.changedTouches[0];\n  }\n  var _touches$ = getTouches(touches, this.opts, e);\n  if (touches && this.opts.enableScroll === true) {\n    this.scrollOption.startTouchX = _touches$.x;\n  }\n};\n\nCharts.prototype.scroll = function (e) {\n  if (this.scrollOption.lastMoveTime === 0) {\n    this.scrollOption.lastMoveTime = Date.now();\n  }\n  var Limit = this.opts.extra.touchMoveLimit || 20;\n  var currMoveTime = Date.now();\n  var duration = currMoveTime - this.scrollOption.lastMoveTime;\n  if (duration < Math.floor(1000 / Limit)) return;\n  this.scrollOption.lastMoveTime = currMoveTime;\n  var touches = null;\n  if (e.changedTouches) {\n    touches = e.changedTouches[0];\n  } else {\n    touches = e.mp.changedTouches[0];\n  }\n  if (touches && this.opts.enableScroll === true) {\n    var _touches$ = getTouches(touches, this.opts, e);\n    var _distance;\n    _distance = _touches$.x - this.scrollOption.startTouchX;\n    var currentOffset = this.scrollOption.currentOffset;\n    var validDistance = calValidDistance(this, currentOffset + _distance, this.opts.chartData, this.config, this.opts);\n    this.scrollOption.distance = _distance = validDistance - currentOffset;\n    var opts = assign({}, this.opts, {\n      _scrollDistance_: currentOffset + _distance,\n      animation: false });\n\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n    return currentOffset + _distance;\n  }\n};\n\nCharts.prototype.scrollEnd = function (e) {\n  if (this.opts.enableScroll === true) {\n    var _scrollOption = this.scrollOption,\n    currentOffset = _scrollOption.currentOffset,\n    distance = _scrollOption.distance;\n    this.scrollOption.currentOffset = currentOffset + distance;\n    this.scrollOption.distance = 0;\n  }\n};\nif ( true && typeof module.exports === \"object\") {\n  module.exports = Charts;\n  //export default Charts;//建议使用nodejs的module导出方式，如报错请使用export方式导出\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 7)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy91LWNoYXJ0cy91LWNoYXJ0cy91LWNoYXJ0cy5qcyJdLCJuYW1lcyI6WyJjb25maWciLCJ5QXhpc1dpZHRoIiwieUF4aXNTcGxpdCIsInhBeGlzSGVpZ2h0IiwieEF4aXNMaW5lSGVpZ2h0IiwibGVnZW5kSGVpZ2h0IiwieUF4aXNUaXRsZVdpZHRoIiwicGFkZGluZyIsInBpeGVsUmF0aW8iLCJyb3RhdGUiLCJjb2x1bWVQYWRkaW5nIiwiZm9udFNpemUiLCJkYXRhUG9pbnRTaGFwZSIsImNvbG9ycyIsInBpZUNoYXJ0TGluZVBhZGRpbmciLCJwaWVDaGFydFRleHRQYWRkaW5nIiwieEF4aXNUZXh0UGFkZGluZyIsInRpdGxlQ29sb3IiLCJ0aXRsZUZvbnRTaXplIiwic3VidGl0bGVDb2xvciIsInN1YnRpdGxlRm9udFNpemUiLCJ0b29sVGlwUGFkZGluZyIsInRvb2xUaXBCYWNrZ3JvdW5kIiwidG9vbFRpcE9wYWNpdHkiLCJ0b29sVGlwTGluZUhlaWdodCIsInJhZGFyTGFiZWxUZXh0TWFyZ2luIiwiZ2F1Z2VMYWJlbFRleHRNYXJnaW4iLCJhc3NpZ24iLCJ0YXJnZXQiLCJ2YXJBcmdzIiwiVHlwZUVycm9yIiwibGVuZ3RoIiwiZGVlcEFzc2lnbiIsIm9iajEiLCJvYmoyIiwia2V5IiwidG9TdHJpbmciLCJmb3JFYWNoIiwidmFsIiwidXRpbCIsInRvRml4ZWQiLCJudW0iLCJsaW1pdCIsImlzRmxvYXQiLCJhcHByb3hpbWF0ZWx5RXF1YWwiLCJudW0xIiwibnVtMiIsIk1hdGgiLCJhYnMiLCJpc1NhbWVTaWduIiwiaXNTYW1lWENvb3JkaW5hdGVBcmVhIiwicDEiLCJwMiIsIngiLCJpc0NvbGxpc2lvbiIsImVuZCIsInN0YXJ0Iiwid2lkdGgiLCJ5IiwiaGVpZ2h0IiwiZmxhZyIsImdldEg1T2Zmc2V0IiwiZSIsIm1wIiwiY2hhbmdlZFRvdWNoZXMiLCJwdXNoIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJoZXhUb1JnYiIsImhleFZhbHVlIiwib3BjIiwicmd4IiwiaGV4IiwicmVwbGFjZSIsIm0iLCJyIiwiZyIsImIiLCJyZ2IiLCJleGVjIiwicGFyc2VJbnQiLCJmaW5kUmFuZ2UiLCJ0eXBlIiwiaXNOYU4iLCJFcnJvciIsIm11bHRpcGxlIiwiY2VpbCIsImZsb29yIiwiY2FsQ2FuZGxlTUEiLCJkYXlBcnIiLCJuYW1lQXJyIiwiY29sb3JBcnIiLCJrZGF0YSIsInNlcmllc1RlbXAiLCJrIiwic2VyaWVzSXRlbSIsImRhdGEiLCJuYW1lIiwiY29sb3IiLCJpIiwibGVuIiwic3VtIiwiaiIsImNhbFZhbGlkRGlzdGFuY2UiLCJzZWxmIiwiZGlzdGFuY2UiLCJjaGFydERhdGEiLCJvcHRzIiwiZGF0YUNoYXJ0QXJlYVdpZHRoIiwiYXJlYSIsImRhdGFDaGFydFdpZHRoIiwiZWFjaFNwYWNpbmciLCJ4QXhpc0RhdGEiLCJ4QXhpc1BvaW50cyIsInZhbGlkRGlzdGFuY2UiLCJldmVudCIsInRyaWdnZXIiLCJpc0luQW5nbGVSYW5nZSIsImFuZ2xlIiwic3RhcnRBbmdsZSIsImVuZEFuZ2xlIiwiYWRqdXN0IiwiUEkiLCJjYWxSb3RhdGVUcmFuc2xhdGUiLCJoIiwieHYiLCJ5diIsInRyYW5zWCIsInNxcnQiLCJ0cmFuc1kiLCJjcmVhdGVDdXJ2ZUNvbnRyb2xQb2ludHMiLCJwb2ludHMiLCJpc05vdE1pZGRsZVBvaW50IiwibWF4IiwibWluIiwiaXNOb3RNaWRkbGVQb2ludFgiLCJhIiwicEF4IiwicEF5IiwicEJ4IiwicEJ5IiwibGFzdCIsImN0ckEiLCJjdHJCIiwiY29udmVydENvb3JkaW5hdGVPcmlnaW4iLCJjZW50ZXIiLCJhdm9pZENvbGxpc2lvbiIsIm9iaiIsImZpbGxTZXJpZXMiLCJzZXJpZXMiLCJpbmRleCIsIm1hcCIsIml0ZW0iLCJzaG93IiwicG9pbnRTaGFwZSIsImxlZ2VuZFNoYXBlIiwiZ2V0RGF0YVJhbmdlIiwibWluRGF0YSIsIm1heERhdGEiLCJyYW5nZSIsIm1pblJhbmdlIiwibWF4UmFuZ2UiLCJtZWFzdXJlVGV4dCIsInRleHQiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJTdHJpbmciLCJzcGxpdCIsInRlc3QiLCJkYXRhQ29tYmluZSIsInJlZHVjZSIsImNvbmNhdCIsImRhdGFDb21iaW5lU3RhY2siLCJBcnJheSIsImdldFRvdWNoZXMiLCJ0b3VjaGVzIiwiY2xpZW50WCIsInBhZ2VZIiwiY3VycmVudFRhcmdldCIsIm9mZnNldFRvcCIsImdldFNlcmllc0RhdGFJdGVtIiwic3R5bGUiLCJkaXNhYmxlTGVnZW5kIiwiZm9ybWF0IiwiZ2V0TWF4VGV4dExpc3RMZW5ndGgiLCJsaXN0IiwibGVuZ3RoTGlzdCIsImFwcGx5IiwiZ2V0UmFkYXJDb29yZGluYXRlU2VyaWVzIiwiZWFjaEFuZ2xlIiwiQ29vcmRpbmF0ZVNlcmllcyIsImdldFRvb2xUaXBEYXRhIiwic2VyaWVzRGF0YSIsImNhbFBvaW50cyIsImNhdGVnb3JpZXMiLCJvcHRpb24iLCJ0ZXh0TGlzdCIsInRpdGxlVGV4dCIsInZhbGlkQ2FsUG9pbnRzIiwib2Zmc2V0Iiwicm91bmQiLCJnZXRNaXhUb29sVGlwRGF0YSIsImZpbHRlciIsImdldENhbmRsZVRvb2xUaXBEYXRhIiwiZXh0cmEiLCJ1cENvbG9yIiwidXBGaWxsIiwiZG93bkNvbG9yIiwiZG93bkZpbGwiLCJ0ZXh0MCIsInRleHQxIiwidGV4dDIiLCJ0ZXh0MyIsInRleHQ0IiwiZmlsdGVyU2VyaWVzIiwidGVtcFNlcmllcyIsImZpbmRDdXJyZW50SW5kZXgiLCJjdXJyZW50UG9pbnRzIiwiY3VycmVudEluZGV4Iiwic3BhY2luZyIsInhBeGlzIiwiYm91bmRhcnlHYXAiLCJpc0luRXhhY3RDaGFydEFyZWEiLCJmaW5kTGVnZW5kSW5kZXgiLCJsZWdlbmREYXRhIiwiaXNJbkV4YWN0TGVnZW5kQXJlYSIsImZpbmRSYWRhckNoYXJ0Q3VycmVudEluZGV4IiwicmFkYXJEYXRhIiwiY291bnQiLCJlYWNoQW5nbGVBcmVhIiwiaXNJbkV4YWN0UGllQ2hhcnRBcmVhIiwicmFkaXVzIiwiZml4QW5nbGUiLCJhdGFuMiIsImFuZ2xlTGlzdCIsInJhbmdlU3RhcnQiLCJyYW5nZUVuZCIsImZpbmRGdW5uZWxDaGFydEN1cnJlbnRJbmRleCIsImZ1bm5lbERhdGEiLCJmdW5uZWxBcmVhIiwiZmluZFdvcmRDaGFydEN1cnJlbnRJbmRleCIsIndvcmREYXRhIiwiZmluZE1hcENoYXJ0Q3VycmVudEluZGV4IiwiY0RhdGEiLCJtYXBEYXRhIiwidG1wIiwicG9pbnRUb0Nvb3JkaW5hdGUiLCJib3VuZHMiLCJzY2FsZSIsInhvZmZzZXQiLCJ5b2Zmc2V0IiwicG9pIiwiZ2VvbWV0cnkiLCJjb29yZGluYXRlcyIsImlzUG9pV2l0aGluUG9seSIsImZpbmRQaWVDaGFydEN1cnJlbnRJbmRleCIsInBpZURhdGEiLCJfc3RhcnRfIiwiX3Byb3BvcnRpb25fIiwicG93Iiwic3BsaXRQb2ludHMiLCJuZXdQb2ludHMiLCJpdGVtcyIsImNhbExlZ2VuZERhdGEiLCJ3aG9sZVdpZHRoIiwid2hvbGVIZWlnaHQiLCJ3aWR0aEFyciIsImhlaWdodEFyciIsImxlZ2VuZCIsIm1hcmdpbiIsInNoYXBlV2lkdGgiLCJzaGFwZVJpZ2h0IiwibGluZUhlaWdodCIsInBvc2l0aW9uIiwibGVnZW5kTGlzdCIsIndpZHRoQ291bnQiLCJ3aWR0aENvdW50QXJyIiwiY3VycmVudFJvdyIsIml0ZW1XaWR0aCIsIml0ZW1HYXAiLCJsZWdlbmRXaWR0aCIsImZsb2F0IiwibWF4SGVpZ2h0IiwibWF4TGVuZ3RoIiwibGluZU51bSIsInRlbXAiLCJzbGljZSIsIm1heFdpZHRoIiwiY2FsQ2F0ZWdvcmllc0RhdGEiLCJyZXN1bHQiLCJjYXRlZ29yaWVzVGV4dExlbnRoIiwibWF4VGV4dExlbmd0aCIsInJvdGF0ZUxhYmVsIiwic2luIiwiZ2V0WEF4aXNUZXh0TGlzdCIsInNvcnRlZCIsImNvbnN0cnVjdG9yIiwiaW5kZXhPZiIsInZhbHVlIiwic3ViaXRlbSIsInJhbmdlU3BhbiIsImVhY2hSYW5nZSIsInNwbGl0TnVtYmVyIiwiY2FsWEF4aXNEYXRhIiwicmFuZ2VzIiwicmFuZ2VzRm9ybWF0IiwieEF4aXNTY2FsZVZhbHVlcyIsIk51bWJlciIsIk9iamVjdCIsImdldFhBeGlzUG9pbnRzIiwidGV4dExlbmd0aCIsImRpc2FibGVkIiwiZ2V0UmFkYXJEYXRhUG9pbnRzIiwicHJvY2VzcyIsInJhZGFyT3B0aW9uIiwicmFkYXIiLCJlYWNoIiwibGlzdEl0ZW0iLCJwcm9wb3J0aW9uIiwiY29zIiwiZ2V0UGllRGF0YVBvaW50cyIsIl9yYWRpdXNfIiwiZ2V0RnVubmVsRGF0YVBvaW50cyIsInNvcnQiLCJyZXZlcnNlIiwiZ2V0Um9zZURhdGFQb2ludHMiLCJtaW5SYWRpdXMiLCJkYXRhQXJyIiwicmFkaXVzTGVuZ3RoIiwiX3Jvc2VfcHJvcG9ydGlvbl8iLCJnZXRBcmNiYXJEYXRhUG9pbnRzIiwiYXJjYmFyT3B0aW9uIiwidG90YWxBbmdsZSIsImdldEdhdWdlQXhpc1BvaW50cyIsInRlbXBTdGFydEFuZ2xlIiwiX3N0YXJ0QW5nbGVfIiwiX2VuZEFuZ2xlXyIsImdldEdhdWdlRGF0YVBvaW50cyIsImdhdWdlT3B0aW9uIiwicG9pbnRlciIsIl9vbGRBbmdsZV8iLCJvbGRBbmdsZSIsIm9sZERhdGEiLCJnZXRQaWVUZXh0TWF4TGVuZ3RoIiwiZml4Q29sdW1lRGF0YSIsImNvbHVtbkxlbiIsImNvbHVtbiIsImZpeENvbHVtZU1ldGVyRGF0YSIsImJvcmRlciIsImZpeENvbHVtZVN0YWNrRGF0YSIsImluZGV4biIsInNwYWNpbmdWYWxpZCIsImRhdGFDb3VudCIsImVuYWJsZVNjcm9sbCIsIml0ZW1Db3VudCIsInN0YXJ0WCIsImVuZFgiLCJnZXRDYW5kbGVEYXRhUG9pbnRzIiwidmFsaWRIZWlnaHQiLCJjUG9pbnRzIiwiaW5kZXhzIiwicG9pbnQiLCJnZXREYXRhUG9pbnRzIiwidmFsaWRXaWR0aCIsInhyYW5nZXMiLCJ4bWluUmFuZ2UiLCJ4bWF4UmFuZ2UiLCJzaGlmdCIsInBvcCIsImdldFN0YWNrRGF0YVBvaW50cyIsInNlcmllc0luZGV4Iiwic3RhY2tTZXJpZXMiLCJ2YWx1ZTAiLCJoZWlnaHQwIiwiaGVpZ2h0YyIsInkwIiwiZ2V0WUF4aXNUZXh0TGlzdCIsInN0YWNrIiwieUF4aXMiLCJkYXRhUmFuZ2UiLCJjYWxZQXhpc0RhdGEiLCJjb2x1bW5zdHlsZSIsIllMZW5ndGgiLCJuZXdTZXJpZXMiLCJyYW5nZXNBcnIiLCJyYW5nZXNGb3JtYXRBcnIiLCJ5QXhpc1dpZHRoQXJyIiwieURhdGEiLCJ5QXhpc0ZvbnRTaXplcyIsImNhbGlicmF0aW9uIiwieUF4aXNGb250U2l6ZSIsImNhbFRvb2x0aXBZQXhpc0RhdGEiLCJ5QXhpc0RhdGEiLCJtaW5BeGlzIiwibWF4VmFsIiwibWluVmFsIiwiY2FsTWFya0xpbmVEYXRhIiwieUF4aXNJbmRleCIsImNvbnRleHRSb3RhdGUiLCJjb250ZXh0Iiwicm90YXRlTG9jayIsInRyYW5zbGF0ZSIsIl9yb3RhdGVfIiwiZHJhd1BvaW50U2hhcGUiLCJzaGFwZSIsImJlZ2luUGF0aCIsImRhdGFQb2ludFNoYXBlVHlwZSIsInNldFN0cm9rZVN0eWxlIiwic2V0RmlsbFN0eWxlIiwiYmFja2dyb3VuZCIsInNldExpbmVXaWR0aCIsIm1vdmVUbyIsImxpbmVUbyIsImFyYyIsInJlY3QiLCJjbG9zZVBhdGgiLCJmaWxsIiwic3Ryb2tlIiwiZHJhd1JpbmdUaXRsZSIsInRpdGxlZm9udFNpemUiLCJ0aXRsZSIsInN1YnRpdGxlZm9udFNpemUiLCJzdWJ0aXRsZSIsInRpdGxlRm9udENvbG9yIiwic3VidGl0bGVGb250Q29sb3IiLCJ0aXRsZUhlaWdodCIsInN1YnRpdGxlSGVpZ2h0IiwidGV4dFdpZHRoIiwic3RhcnRZIiwic2V0Rm9udFNpemUiLCJmaWxsVGV4dCIsIl90ZXh0V2lkdGgiLCJfc3RhcnRYIiwiX3N0YXJ0WSIsImRyYXdQb2ludFRleHQiLCJ0ZXh0U2l6ZSIsInRleHRDb2xvciIsImZvcm1hdFZhbCIsImRyYXdHYXVnZUxhYmVsIiwiY2VudGVyUG9zaXRpb24iLCJzcGxpdEFuZ2xlIiwic3BsaXRMaW5lIiwidG90YWxOdW1iZXIiLCJlbmROdW1iZXIiLCJzdGFydE51bWJlciIsIm5vd0FuZ2xlIiwibm93TnVtYmVyIiwicG9zIiwibGFiZWxUZXh0IiwibGFiZWxGb3JtYXQiLCJsYWJlbENvbG9yIiwiZHJhd1JhZGFyTGFiZWwiLCJwb3NSZWxhdGl2ZUNhbnZhcyIsImRyYXdQaWVUZXh0IiwibGluZVJhZGl1cyIsInRleHRPYmplY3RDb2xsZWN0aW9uIiwibGFzdFRleHRPYmplY3QiLCJzZXJpZXNDb252ZXJ0Iiwib3JnaW5YMSIsIm9yZ2luWTEiLCJvcmdpblgyIiwib3JnaW5ZMiIsIm9yZ2luWDMiLCJvcmdpblkzIiwidGV4dE9iamVjdCIsImxpbmVTdGFydCIsImxpbmVFbmQiLCJsaW5lU3RhcnRQb2lzdGlvbiIsImxpbmVFbmRQb2lzdGlvbiIsInRleHRQb3NpdGlvbiIsImN1cnZlU3RhcnRYIiwidGV4dFN0YXJ0WCIsInF1YWRyYXRpY0N1cnZlVG8iLCJkcmF3VG9vbFRpcFNwbGl0TGluZSIsInRvb2xUaXBPcHRpb24iLCJ0b29sdGlwIiwiZ3JpZFR5cGUiLCJkYXNoTGVuZ3RoIiwiZW5kWSIsInNldExpbmVEYXNoIiwiZ3JpZENvbG9yIiwieEF4aXNMYWJlbCIsInRleHRYIiwidGV4dFkiLCJsYWJlbEJnQ29sb3IiLCJsYWJlbEJnT3BhY2l0eSIsImxhYmVsRm9udENvbG9yIiwiZm9udENvbG9yIiwiZHJhd01hcmtMaW5lIiwibWFya0xpbmVPcHRpb24iLCJtYXJrTGluZSIsImxpbmVDb2xvciIsInNob3dMYWJlbCIsImJnU3RhcnRYIiwiYmdFbmRYIiwiYmdXaWR0aCIsImRyYXdUb29sVGlwSG9yaXplbnRhbExpbmUiLCJ5QXhpc0xhYmVsIiwidFN0YXJ0TGVmdCIsInRTdGFydFJpZ2h0IiwiZHJhd1Rvb2xUaXBTcGxpdEFyZWEiLCJhY3RpdmVCZ0NvbG9yIiwiYWN0aXZlQmdPcGFjaXR5IiwiZHJhd1Rvb2xUaXAiLCJzaG93Qm94IiwiYmdDb2xvciIsImJnT3BhY2l0eSIsImxlZ2VuZE1hcmdpblJpZ2h0IiwiYXJyb3dXaWR0aCIsImlzT3ZlclJpZ2h0Qm9yZGVyIiwidG9vbFRpcFdpZHRoIiwidG9vbFRpcEhlaWdodCIsIl9zY3JvbGxEaXN0YW5jZV8iLCJmaWxsUmVjdCIsImRyYXdZQXhpc1RpdGxlIiwic2F2ZSIsInJlc3RvcmUiLCJkcmF3Q29sdW1uRGF0YVBvaW50cyIsImNvbHVtbk9wdGlvbiIsIm1ldGVyIiwiZmlsbENvbG9yIiwibGVmdE51bSIsInJpZ2h0TnVtIiwiZWFjaFNlcmllcyIsInRvb2x0aXBQb2ludHMiLCJkYXRhTGFiZWwiLCJkcmF3Q2FuZGxlRGF0YVBvaW50cyIsInNlcmllc01BIiwiY2FuZGxlT3B0aW9uIiwiYXZlcmFnZSIsImNhbmRsZSIsInVwTGluZSIsImRvd25MaW5lIiwiZGF5IiwibGVmdFNwYWNlIiwicmlnaHRTcGFjZSIsInNwbGl0UG9pbnRMaXN0Iiwic3RhcnRQb2ludCIsImN0cmxQb2ludCIsImJlemllckN1cnZlVG8iLCJkcmF3QXJlYURhdGFQb2ludHMiLCJhcmVhT3B0aW9uIiwib3BhY2l0eSIsImFkZExpbmUiLCJncmFkaWVudCIsImNyZWF0ZUxpbmVhckdyYWRpZW50IiwiYWRkQ29sb3JTdG9wIiwiZmlyc3RQb2ludCIsImxhc3RQb2ludCIsImxpbmVUeXBlIiwiZHJhd0xpbmVEYXRhUG9pbnRzIiwibGluZU9wdGlvbiIsImxpbmUiLCJkcmF3TWl4RGF0YVBvaW50cyIsImNvbHVtbkluZGV4IiwiY29sdW1uTGVuZ3RoIiwiYWRkUG9pbnQiLCJkcmF3VG9vbFRpcEJyaWRnZSIsImhvcml6ZW50YWxMaW5lIiwiZHJhd1hBeGlzIiwic2Nyb2xsU2hvdyIsInNjcm9sbFkiLCJzY3JvbGxTY3JlZW5XaWR0aCIsInNjcm9sbFRvdGFsV2lkdGgiLCJzY3JvbGxXaWR0aCIsInNjcm9sbExlZnQiLCJzZXRMaW5lQ2FwIiwic2Nyb2xsQmFja2dyb3VuZENvbG9yIiwic2Nyb2xsQ29sb3IiLCJkaXNhYmxlR3JpZCIsImdyaWRFdmFsIiwibWF4WEF4aXNMaXN0TGVuZ3RoIiwibGFiZWxDb3VudCIsInJhdGlvIiwibmV3Q2F0ZWdvcmllcyIsImNnTGVuZ3RoIiwieEF4aXNGb250U2l6ZSIsIl94QXhpc1RleHRBbmdsZV8iLCJzY3JvbGxIZWlnaHQiLCJfY2FsUm90YXRlVHJhbnNsYXRlIiwiYXhpc0xpbmUiLCJheGlzTGluZUNvbG9yIiwiZHJhd1lBeGlzR3JpZCIsInhBeGlzZWFjaFNwYWNpbmciLCJUb3RhbFdpZHRoIiwiZHJhd1lBeGlzIiwiZmlsbEVuZFkiLCJzaG93VGl0bGUiLCJkcmF3TGVnZW5kIiwibGVnZW5kQXJlYSIsImJvcmRlcldpZHRoIiwiYm9yZGVyQ29sb3IiLCJiYWNrZ3JvdW5kQ29sb3IiLCJpdGVtTGlzdCIsImxpc3RJbmRleCIsImhpZGRlbkNvbG9yIiwiZm9udFRyYW5zIiwiZHJhd1BpZURhdGFQb2ludHMiLCJwaWVPcHRpb24iLCJhY3RpdmVPcGFjaXR5IiwiYWN0aXZlUmFkaXVzIiwib2Zmc2V0QW5nbGUiLCJsYWJlbFdpZHRoIiwicmluZ1dpZHRoIiwicGllIiwiX3BpZVRleHRNYXhMZW5ndGhfIiwibGluZUpvaW4iLCJpbm5lclBpZVdpZHRoIiwidmFsaWQiLCJkcmF3Um9zZURhdGFQb2ludHMiLCJyb3NlT3B0aW9uIiwicm9zZSIsImRyYXdBcmNiYXJEYXRhUG9pbnRzIiwiZ2FwIiwiYXJjYmFyIiwiZHJhd0dhdWdlRGF0YVBvaW50cyIsImZpeFJhZGl1cyIsImNoaWxkTnVtYmVyIiwiY2hpbGRXaWR0aCIsImdhdWdlIiwiaW5uZXJSYWRpdXMiLCJwaWVSYWRpdXMiLCJjaGlsZEFuZ2xlIiwicHJvYyIsInBvaW50ZXJSYWRpdXMiLCJncmFkaWVudDMiLCJlYWNoQ2F0ZWdvcmllcyIsImNoaWxkZW5kWCIsImRyYXdSYWRhckRhdGFQb2ludHMiLCJncmlkQ291bnQiLCJjb29yZGluYXRlQW5nbGUiLCJfbG9vcCIsInN0YXJ0UG9zIiwicmFkYXJEYXRhUG9pbnRzIiwibm9ybWFsSW50IiwiaXRlciIsImFyciIsInJhbmRvbSIsImNvbGxpc2lvbk5ldyIsImlzSW4iLCJnZXRCb3VuZGluZ0JveCIsImNvb3JkcyIsInhNaW4iLCJ4TWF4IiwieU1pbiIsInlNYXgiLCJjb29yZGEiLCJsb25naXR1ZGUiLCJsYXRpdHVkZSIsImNvb3JkaW5hdGVUb1BvaW50IiwicG9pbnRZIiwicG9pbnRYIiwiaXNSYXlJbnRlcnNlY3RzU2VnbWVudCIsInNfcG9pIiwiZV9wb2kiLCJ4c2VnIiwicG9seSIsInNpbnNjIiwiZXBvbHkiLCJkcmF3TWFwRGF0YVBvaW50cyIsIm1hcE9wdGlvbiIsImZpbGxPcGFjaXR5IiwiYWN0aXZlQm9yZGVyQ29sb3IiLCJhY3RpdmVGaWxsQ29sb3IiLCJhY3RpdmVGaWxsT3BhY2l0eSIsInhTY2FsZSIsInlTY2FsZSIsImNsZWFyUmVjdCIsImNlbnRlclBvaW50IiwicHJvcGVydGllcyIsImNlbnRyb2lkIiwiZHJhdyIsImdldFdvcmRDbG91ZFBvaW50IiwidEhlaWdodCIsInRXaWR0aCIsImJyZWFrbnVtIiwiU3BpbiIsImlzU3BpbiIsImFyZWF2IiwiZHJhd1dvcmRDbG91ZERhdGFQb2ludHMiLCJ3b3JkT3B0aW9uIiwiYXV0b0NvbG9ycyIsIndvcmQiLCJ3b3JkQ2xvdWREYXRhIiwic3Ryb2tlVGV4dCIsImRyYXdGdW5uZWxEYXRhUG9pbnRzIiwiZnVubmVsT3B0aW9uIiwiYWN0aXZlV2lkdGgiLCJsYWJlbEFsaWduIiwiZnVubmVsIiwiZHJhd0Z1bm5lbFRleHQiLCJkcmF3Q2FudmFzIiwiVGltaW5nIiwiZWFzZUluIiwiZWFzZU91dCIsImVhc2VJbk91dCIsImxpbmVhciIsIkFuaW1hdGlvbiIsImlzU3RvcCIsImR1cmF0aW9uIiwidGltaW5nIiwiZGVsYXkiLCJjcmVhdGVBbmltYXRpb25GcmFtZSIsInNldFRpbWVvdXQiLCJzdGVwIiwidGltZVN0YW1wIiwiRGF0ZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImFuaW1hdGlvbkZyYW1lIiwic3RhcnRUaW1lU3RhbXAiLCJfc3RlcCIsInRpbWVzdGFtcCIsIm9uUHJvY2VzcyIsIm9uQW5pbWF0aW9uRmluaXNoIiwidGltaW5nRnVuY3Rpb24iLCJiaW5kIiwicHJvdG90eXBlIiwic3RvcCIsImRyYXdDaGFydHMiLCJfdGhpcyIsImFuaW1hdGlvbiIsImFuaW1hdGlvbkluc3RhbmNlIiwiX3Nlcmllc18iLCJfY2FsTGVnZW5kRGF0YSIsIl9jYWxZQXhpc0RhdGEiLCJtYXhUaXRsZUhlaWdodCIsInJpZ2h0SW5kZXgiLCJsZWZ0SW5kZXgiLCJfY2FsQ2F0ZWdvcmllc0RhdGEiLCJjYXRlZ29yaWVzRGF0YSIsInNjcm9sbEFsaWduIiwib2Zmc2V0TGVmdCIsInRvdGFsV2lkdGgiLCJzY3JlZW5XaWR0aCIsInNjcm9sbE9wdGlvbiIsImN1cnJlbnRPZmZzZXQiLCJzdGFydFRvdWNoWCIsImxhc3RNb3ZlVGltZSIsInVwZGF0ZURhdGEiLCJfZHJhd0xpbmVEYXRhUG9pbnRzIiwiZW5hYmxlTWFya0xpbmUiLCJfZHJhd01peERhdGFQb2ludHMiLCJfZHJhd0NvbHVtbkRhdGFQb2ludHMiLCJfZHJhd0FyZWFEYXRhUG9pbnRzIiwiYXJjYmFyRGF0YSIsImdhdWdlRGF0YSIsIl9kcmF3Q2FuZGxlRGF0YVBvaW50cyIsIkV2ZW50IiwiZXZlbnRzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImxpc3RlbmVyIiwiX2xlbiIsImFyZ3MiLCJfa2V5IiwicGFyYW1zIiwiQ2hhcnRzIiwiY2FudmFzMmQiLCJjb25maWckJDEiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJ0ZW1wV2lkdGgiLCJ0ZW1wSGVpZ2h0IiwiJHRoaXMiLCJ1bmkiLCJjcmVhdGVDYW52YXNDb250ZXh0IiwiY2FudmFzSWQiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsImxpbmVDYXAiLCJmb250IiwiZmlsbFN0eWxlIiwiY2FsbCIsInNjcm9sbFBvc2l0aW9uIiwiX2dldFhBeGlzUG9pbnRzMCIsInpvb20iLCJjZW50ZXJMZWZ0IiwiTWF4TGVmdCIsInN0b3BBbmltYXRpb24iLCJnZXRDdXJyZW50RGF0YUluZGV4IiwiX3RvdWNoZXMkIiwiZ2V0TGVnZW5kRGF0YUluZGV4IiwidG91Y2hMZWdlbmQiLCJzaG93VG9vbFRpcCIsIl9nZXRUb29sVGlwRGF0YSIsIl9nZXRNaXhUb29sVGlwRGF0YSIsInNjcm9sbFN0YXJ0Iiwic2Nyb2xsIiwibm93IiwiTGltaXQiLCJ0b3VjaE1vdmVMaW1pdCIsImN1cnJNb3ZlVGltZSIsIl9kaXN0YW5jZSIsInNjcm9sbEVuZCIsIl9zY3JvbGxPcHRpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQmE7O0FBRWIsSUFBSUEsTUFBTSxHQUFHO0FBQ1hDLFlBQVUsRUFBRSxFQUREO0FBRVhDLFlBQVUsRUFBRSxDQUZEO0FBR1hDLGFBQVcsRUFBRSxFQUhGO0FBSVhDLGlCQUFlLEVBQUUsRUFKTjtBQUtYQyxjQUFZLEVBQUUsRUFMSDtBQU1YQyxpQkFBZSxFQUFFLEVBTk47QUFPWEMsU0FBTyxFQUFFLENBQUMsRUFBRCxFQUFLLEVBQUwsRUFBUyxFQUFULEVBQWEsRUFBYixDQVBFO0FBUVhDLFlBQVUsRUFBRSxDQVJEO0FBU1hDLFFBQU0sRUFBRSxLQVRHO0FBVVhDLGVBQWEsRUFBRSxDQVZKO0FBV1hDLFVBQVEsRUFBRSxFQVhDO0FBWVg7QUFDQUMsZ0JBQWMsRUFBRSxDQUFDLFFBQUQsRUFBVyxRQUFYLEVBQXFCLFFBQXJCLEVBQStCLFFBQS9CLENBYkw7QUFjWEMsUUFBTSxFQUFFLENBQUMsU0FBRCxFQUFZLFNBQVosRUFBdUIsU0FBdkIsRUFBa0MsU0FBbEMsRUFBNkMsU0FBN0MsRUFBd0QsU0FBeEQsQ0FkRztBQWVYQyxxQkFBbUIsRUFBRSxFQWZWO0FBZ0JYQyxxQkFBbUIsRUFBRSxDQWhCVjtBQWlCWEMsa0JBQWdCLEVBQUUsQ0FqQlA7QUFrQlhDLFlBQVUsRUFBRSxTQWxCRDtBQW1CWEMsZUFBYSxFQUFFLEVBbkJKO0FBb0JYQyxlQUFhLEVBQUUsU0FwQko7QUFxQlhDLGtCQUFn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U0FBS3FuQixZQUFMLENBQWtCQyxhQUFsQixHQUFrQ0EsYUFBYSxHQUFHdG5CLFFBQWxEO0FBQ0EsU0FBS3FuQixZQUFMLENBQWtCcm5CLFFBQWxCLEdBQTZCLENBQTdCO0FBQ0Q7QUFDRixDQVJEO0FBU0EsSUFBSSxTQUE4QixPQUFPa3JCLE1BQU0sQ0FBQ0MsT0FBZCxLQUEwQixRQUE1RCxFQUFzRTtBQUNwRUQsUUFBTSxDQUFDQyxPQUFQLEdBQWlCekMsTUFBakI7QUFDQTtBQUNELEMiLCJmaWxlIjoiOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIHVDaGFydHMgdjEuOS42LjIwMjEwMjE0XHJcbiAqIHVuaS1hcHDlubPlj7Dpq5jmgKfog73ot6jlhajnq6/lm77ooajvvIzmlK/mjIFINeOAgUFQUOOAgeWwj+eoi+W6j++8iOW+ruS/oS/mlK/ku5jlrp0v55m+5bqmL+WktOadoS9RUS8zNjDvvIlcclxuICogQ29weXJpZ2h0IChjKSAyMDIxIFFJVU7np4vkupEgaHR0cHM6Ly93d3cudWNoYXJ0cy5jbiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCAoIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMCApXHJcbiAqIFxyXG4gKiB1Q2hhcnRz5a6Y5pa5572R56uZXHJcbiAqIGh0dHBzOi8vd3d3LnVDaGFydHMuY25cclxuICogXHJcbiAqIOW8gOa6kOWcsOWdgDpcclxuICogaHR0cHM6Ly9naXRlZS5jb20vdUNoYXJ0cy91Q2hhcnRzXHJcbiAqIFxyXG4gKiB1bmktYXBw5o+S5Lu25biC5Zy65Zyw5Z2A77yaXHJcbiAqIGh0dHA6Ly9leHQuZGNsb3VkLm5ldC5jbi9wbHVnaW4/aWQ9MjcxXHJcbiAqIFxyXG4gKi9cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBjb25maWcgPSB7XHJcbiAgeUF4aXNXaWR0aDogMTUsXHJcbiAgeUF4aXNTcGxpdDogNSxcclxuICB4QXhpc0hlaWdodDogMTUsXHJcbiAgeEF4aXNMaW5lSGVpZ2h0OiAxNSxcclxuICBsZWdlbmRIZWlnaHQ6IDE1LFxyXG4gIHlBeGlzVGl0bGVXaWR0aDogMTUsXHJcbiAgcGFkZGluZzogWzEwLCAxMCwgMTAsIDEwXSxcclxuICBwaXhlbFJhdGlvOiAxLFxyXG4gIHJvdGF0ZTogZmFsc2UsXHJcbiAgY29sdW1lUGFkZGluZzogMyxcclxuICBmb250U2l6ZTogMTMsXHJcbiAgLy9kYXRhUG9pbnRTaGFwZTogWydkaWFtb25kJywgJ2NpcmNsZScsICd0cmlhbmdsZScsICdyZWN0J10sXHJcbiAgZGF0YVBvaW50U2hhcGU6IFsnY2lyY2xlJywgJ2NpcmNsZScsICdjaXJjbGUnLCAnY2lyY2xlJ10sXHJcbiAgY29sb3JzOiBbJyMxODkwZmYnLCAnIzJmYzI1YicsICcjZmFjYzE0JywgJyNmMDQ4NjQnLCAnIzg1NDNlMCcsICcjOTBlZDdkJ10sXHJcbiAgcGllQ2hhcnRMaW5lUGFkZGluZzogMTUsXHJcbiAgcGllQ2hhcnRUZXh0UGFkZGluZzogNSxcclxuICB4QXhpc1RleHRQYWRkaW5nOiAzLFxyXG4gIHRpdGxlQ29sb3I6ICcjMzMzMzMzJyxcclxuICB0aXRsZUZvbnRTaXplOiAyMCxcclxuICBzdWJ0aXRsZUNvbG9yOiAnIzk5OTk5OScsXHJcbiAgc3VidGl0bGVGb250U2l6ZTogMTUsXHJcbiAgdG9vbFRpcFBhZGRpbmc6IDMsXHJcbiAgdG9vbFRpcEJhY2tncm91bmQ6ICcjMDAwMDAwJyxcclxuICB0b29sVGlwT3BhY2l0eTogMC43LFxyXG4gIHRvb2xUaXBMaW5lSGVpZ2h0OiAyMCxcclxuICByYWRhckxhYmVsVGV4dE1hcmdpbjogMTUsXHJcbiAgZ2F1Z2VMYWJlbFRleHRNYXJnaW46IDE1XHJcbn07XHJcblxyXG5sZXQgYXNzaWduID0gZnVuY3Rpb24gKHRhcmdldCwgLi4udmFyQXJncykge1xyXG4gICAgaWYgKHRhcmdldCA9PSBudWxsKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgdW5kZWZpbmVkIG9yIG51bGwgdG8gb2JqZWN0Jyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIXZhckFyZ3MgfHwgdmFyQXJncy5sZW5ndGggPD0gMCkge1xyXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgICB9XHJcbiAgICAvLyDmt7HluqblkIjlubblr7nosaFcclxuICAgIGZ1bmN0aW9uIGRlZXBBc3NpZ24ob2JqMSwgb2JqMikge1xyXG4gICAgICAgIGZvciAobGV0IGtleSBpbiBvYmoyKSB7XHJcbiAgICAgICAgICAgIG9iajFba2V5XSA9IG9iajFba2V5XSAmJiBvYmoxW2tleV0udG9TdHJpbmcoKSA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIiA/XHJcbiAgICAgICAgICAgICAgICBkZWVwQXNzaWduKG9iajFba2V5XSwgb2JqMltrZXldKSA6IG9iajFba2V5XSA9IG9iajJba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9iajE7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyQXJncy5mb3JFYWNoKHZhbCA9PiB7XHJcbiAgICAgICAgdGFyZ2V0ID0gZGVlcEFzc2lnbih0YXJnZXQsIHZhbCk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0YXJnZXQ7XHJcbn07XHJcblxyXG52YXIgdXRpbCA9IHtcclxuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKG51bSwgbGltaXQpIHtcclxuICAgIGxpbWl0ID0gbGltaXQgfHwgMjtcclxuICAgIGlmICh0aGlzLmlzRmxvYXQobnVtKSkge1xyXG4gICAgICBudW0gPSBudW0udG9GaXhlZChsaW1pdCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVtO1xyXG4gIH0sXHJcbiAgaXNGbG9hdDogZnVuY3Rpb24gaXNGbG9hdChudW0pIHtcclxuICAgIHJldHVybiBudW0gJSAxICE9PSAwO1xyXG4gIH0sXHJcbiAgYXBwcm94aW1hdGVseUVxdWFsOiBmdW5jdGlvbiBhcHByb3hpbWF0ZWx5RXF1YWwobnVtMSwgbnVtMikge1xyXG4gICAgcmV0dXJuIE1hdGguYWJzKG51bTEgLSBudW0yKSA8IDFlLTEwO1xyXG4gIH0sXHJcbiAgaXNTYW1lU2lnbjogZnVuY3Rpb24gaXNTYW1lU2lnbihudW0xLCBudW0yKSB7XHJcbiAgICByZXR1cm4gTWF0aC5hYnMobnVtMSkgPT09IG51bTEgJiYgTWF0aC5hYnMobnVtMikgPT09IG51bTIgfHwgTWF0aC5hYnMobnVtMSkgIT09IG51bTEgJiYgTWF0aC5hYnMobnVtMikgIT09IG51bTI7XHJcbiAgfSxcclxuICBpc1NhbWVYQ29vcmRpbmF0ZUFyZWE6IGZ1bmN0aW9uIGlzU2FtZVhDb29yZGluYXRlQXJlYShwMSwgcDIpIHtcclxuICAgIHJldHVybiB0aGlzLmlzU2FtZVNpZ24ocDEueCwgcDIueCk7XHJcbiAgfSxcclxuICBpc0NvbGxpc2lvbjogZnVuY3Rpb24gaXNDb2xsaXNpb24ob2JqMSwgb2JqMikge1xyXG4gICAgb2JqMS5lbmQgPSB7fTtcclxuICAgIG9iajEuZW5kLnggPSBvYmoxLnN0YXJ0LnggKyBvYmoxLndpZHRoO1xyXG4gICAgb2JqMS5lbmQueSA9IG9iajEuc3RhcnQueSAtIG9iajEuaGVpZ2h0O1xyXG4gICAgb2JqMi5lbmQgPSB7fTtcclxuICAgIG9iajIuZW5kLnggPSBvYmoyLnN0YXJ0LnggKyBvYmoyLndpZHRoO1xyXG4gICAgb2JqMi5lbmQueSA9IG9iajIuc3RhcnQueSAtIG9iajIuaGVpZ2h0O1xyXG4gICAgdmFyIGZsYWcgPSBvYmoyLnN0YXJ0LnggPiBvYmoxLmVuZC54IHx8IG9iajIuZW5kLnggPCBvYmoxLnN0YXJ0LnggfHwgb2JqMi5lbmQueSA+IG9iajEuc3RhcnQueSB8fCBvYmoyLnN0YXJ0LnkgPCBvYmoxLmVuZC55O1xyXG4gICAgcmV0dXJuICFmbGFnO1xyXG4gIH1cclxufTtcclxuXHJcbi8v5YW85a65SDXngrnlh7vkuovku7ZcclxuZnVuY3Rpb24gZ2V0SDVPZmZzZXQoZSkge1xyXG4gIGUubXAgPSB7XHJcbiAgICBjaGFuZ2VkVG91Y2hlczogW11cclxuICB9O1xyXG4gIGUubXAuY2hhbmdlZFRvdWNoZXMucHVzaCh7XHJcbiAgICB4OiBlLm9mZnNldFgsXHJcbiAgICB5OiBlLm9mZnNldFlcclxuICB9KTtcclxuICByZXR1cm4gZTtcclxufVxyXG5cclxuLy8gaGV4IOi9rCByZ2JhXHJcbmZ1bmN0aW9uIGhleFRvUmdiKGhleFZhbHVlLCBvcGMpIHtcclxuICB2YXIgcmd4ID0gL14jPyhbYS1mXFxkXSkoW2EtZlxcZF0pKFthLWZcXGRdKSQvaTtcclxuICB2YXIgaGV4ID0gaGV4VmFsdWUucmVwbGFjZShyZ3gsIGZ1bmN0aW9uKG0sIHIsIGcsIGIpIHtcclxuICAgIHJldHVybiByICsgciArIGcgKyBnICsgYiArIGI7XHJcbiAgfSk7XHJcbiAgdmFyIHJnYiA9IC9eIz8oW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkkL2kuZXhlYyhoZXgpO1xyXG4gIHZhciByID0gcGFyc2VJbnQocmdiWzFdLCAxNik7XHJcbiAgdmFyIGcgPSBwYXJzZUludChyZ2JbMl0sIDE2KTtcclxuICB2YXIgYiA9IHBhcnNlSW50KHJnYlszXSwgMTYpO1xyXG4gIHJldHVybiAncmdiYSgnICsgciArICcsJyArIGcgKyAnLCcgKyBiICsgJywnICsgb3BjICsgJyknO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5kUmFuZ2UobnVtLCB0eXBlLCBsaW1pdCkge1xyXG4gIGlmIChpc05hTihudW0pKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1t1Q2hhcnRzXSB1bnZhbGlkIHNlcmllcyBkYXRhIScpO1xyXG4gIH1cclxuICBsaW1pdCA9IGxpbWl0IHx8IDEwO1xyXG4gIHR5cGUgPSB0eXBlID8gdHlwZSA6ICd1cHBlcic7XHJcbiAgdmFyIG11bHRpcGxlID0gMTtcclxuICB3aGlsZSAobGltaXQgPCAxKSB7XHJcbiAgICBsaW1pdCAqPSAxMDtcclxuICAgIG11bHRpcGxlICo9IDEwO1xyXG4gIH1cclxuICBpZiAodHlwZSA9PT0gJ3VwcGVyJykge1xyXG4gICAgbnVtID0gTWF0aC5jZWlsKG51bSAqIG11bHRpcGxlKTtcclxuICB9IGVsc2Uge1xyXG4gICAgbnVtID0gTWF0aC5mbG9vcihudW0gKiBtdWx0aXBsZSk7XHJcbiAgfVxyXG4gIHdoaWxlIChudW0gJSBsaW1pdCAhPT0gMCkge1xyXG4gICAgaWYgKHR5cGUgPT09ICd1cHBlcicpIHtcclxuICAgICAgbnVtKys7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBudW0tLTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG51bSAvIG11bHRpcGxlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYWxDYW5kbGVNQShkYXlBcnIsIG5hbWVBcnIsIGNvbG9yQXJyLCBrZGF0YSkge1xyXG4gIGxldCBzZXJpZXNUZW1wID0gW107XHJcbiAgZm9yIChsZXQgayA9IDA7IGsgPCBkYXlBcnIubGVuZ3RoOyBrKyspIHtcclxuICAgIGxldCBzZXJpZXNJdGVtID0ge1xyXG4gICAgICBkYXRhOiBbXSxcclxuICAgICAgbmFtZTogbmFtZUFycltrXSxcclxuICAgICAgY29sb3I6IGNvbG9yQXJyW2tdXHJcbiAgICB9O1xyXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGtkYXRhLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgIGlmIChpIDwgZGF5QXJyW2tdKSB7XHJcbiAgICAgICAgc2VyaWVzSXRlbS5kYXRhLnB1c2gobnVsbCk7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICAgICAgbGV0IHN1bSA9IDA7XHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZGF5QXJyW2tdOyBqKyspIHtcclxuICAgICAgICBzdW0gKz0ga2RhdGFbaSAtIGpdWzFdO1xyXG4gICAgICB9XHJcbiAgICAgIHNlcmllc0l0ZW0uZGF0YS5wdXNoKCsoc3VtIC8gZGF5QXJyW2tdKS50b0ZpeGVkKDMpKTtcclxuICAgIH1cclxuICAgIHNlcmllc1RlbXAucHVzaChzZXJpZXNJdGVtKTtcclxuICB9XHJcbiAgcmV0dXJuIHNlcmllc1RlbXA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbFZhbGlkRGlzdGFuY2Uoc2VsZixkaXN0YW5jZSwgY2hhcnREYXRhLCBjb25maWcsIG9wdHMpIHtcclxuICB2YXIgZGF0YUNoYXJ0QXJlYVdpZHRoID0gb3B0cy53aWR0aCAtIG9wdHMuYXJlYVsxXSAtIG9wdHMuYXJlYVszXTtcclxuICB2YXIgZGF0YUNoYXJ0V2lkdGggPSBjaGFydERhdGEuZWFjaFNwYWNpbmcgKiAob3B0cy5jaGFydERhdGEueEF4aXNEYXRhLnhBeGlzUG9pbnRzLmxlbmd0aC0xKTtcclxuICB2YXIgdmFsaWREaXN0YW5jZSA9IGRpc3RhbmNlO1xyXG4gIGlmIChkaXN0YW5jZSA+PSAwKSB7XHJcbiAgICB2YWxpZERpc3RhbmNlID0gMDtcclxuXHRcdHNlbGYuZXZlbnQudHJpZ2dlcignc2Nyb2xsTGVmdCcpO1xyXG4gIH0gZWxzZSBpZiAoTWF0aC5hYnMoZGlzdGFuY2UpID49IGRhdGFDaGFydFdpZHRoIC0gZGF0YUNoYXJ0QXJlYVdpZHRoKSB7XHJcbiAgICB2YWxpZERpc3RhbmNlID0gZGF0YUNoYXJ0QXJlYVdpZHRoIC0gZGF0YUNoYXJ0V2lkdGg7XHJcblx0XHRzZWxmLmV2ZW50LnRyaWdnZXIoJ3Njcm9sbFJpZ2h0Jyk7XHJcbiAgfVxyXG4gIHJldHVybiB2YWxpZERpc3RhbmNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc0luQW5nbGVSYW5nZShhbmdsZSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUpIHtcclxuICBmdW5jdGlvbiBhZGp1c3QoYW5nbGUpIHtcclxuICAgIHdoaWxlIChhbmdsZSA8IDApIHtcclxuICAgICAgYW5nbGUgKz0gMiAqIE1hdGguUEk7XHJcbiAgICB9XHJcbiAgICB3aGlsZSAoYW5nbGUgPiAyICogTWF0aC5QSSkge1xyXG4gICAgICBhbmdsZSAtPSAyICogTWF0aC5QSTtcclxuICAgIH1cclxuICAgIHJldHVybiBhbmdsZTtcclxuICB9XHJcbiAgYW5nbGUgPSBhZGp1c3QoYW5nbGUpO1xyXG4gIHN0YXJ0QW5nbGUgPSBhZGp1c3Qoc3RhcnRBbmdsZSk7XHJcbiAgZW5kQW5nbGUgPSBhZGp1c3QoZW5kQW5nbGUpO1xyXG4gIGlmIChzdGFydEFuZ2xlID4gZW5kQW5nbGUpIHtcclxuICAgIGVuZEFuZ2xlICs9IDIgKiBNYXRoLlBJO1xyXG4gICAgaWYgKGFuZ2xlIDwgc3RhcnRBbmdsZSkge1xyXG4gICAgICBhbmdsZSArPSAyICogTWF0aC5QSTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGFuZ2xlID49IHN0YXJ0QW5nbGUgJiYgYW5nbGUgPD0gZW5kQW5nbGU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbFJvdGF0ZVRyYW5zbGF0ZSh4LCB5LCBoKSB7XHJcbiAgdmFyIHh2ID0geDtcclxuICB2YXIgeXYgPSBoIC0geTtcclxuICB2YXIgdHJhbnNYID0geHYgKyAoaCAtIHl2IC0geHYpIC8gTWF0aC5zcXJ0KDIpO1xyXG4gIHRyYW5zWCAqPSAtMTtcclxuICB2YXIgdHJhbnNZID0gKGggLSB5dikgKiAoTWF0aC5zcXJ0KDIpIC0gMSkgLSAoaCAtIHl2IC0geHYpIC8gTWF0aC5zcXJ0KDIpO1xyXG4gIHJldHVybiB7XHJcbiAgICB0cmFuc1g6IHRyYW5zWCxcclxuICAgIHRyYW5zWTogdHJhbnNZXHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlQ3VydmVDb250cm9sUG9pbnRzKHBvaW50cywgaSkge1xyXG5cclxuICBmdW5jdGlvbiBpc05vdE1pZGRsZVBvaW50KHBvaW50cywgaSkge1xyXG4gICAgaWYgKHBvaW50c1tpIC0gMV0gJiYgcG9pbnRzW2kgKyAxXSkge1xyXG4gICAgICByZXR1cm4gcG9pbnRzW2ldLnkgPj0gTWF0aC5tYXgocG9pbnRzW2kgLSAxXS55LCBwb2ludHNbaSArIDFdLnkpIHx8IHBvaW50c1tpXS55IDw9IE1hdGgubWluKHBvaW50c1tpIC0gMV0ueSxwb2ludHNbaSArIDFdLnkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHRmdW5jdGlvbiBpc05vdE1pZGRsZVBvaW50WChwb2ludHMsIGkpIHtcclxuXHQgIGlmIChwb2ludHNbaSAtIDFdICYmIHBvaW50c1tpICsgMV0pIHtcclxuXHQgICAgcmV0dXJuIHBvaW50c1tpXS54ID49IE1hdGgubWF4KHBvaW50c1tpIC0gMV0ueCwgcG9pbnRzW2kgKyAxXS54KSB8fCBwb2ludHNbaV0ueCA8PSBNYXRoLm1pbihwb2ludHNbaSAtIDFdLngscG9pbnRzW2kgKyAxXS54KTtcclxuXHQgIH0gZWxzZSB7XHJcblx0ICAgIHJldHVybiBmYWxzZTtcclxuXHQgIH1cclxuXHR9XHJcbiAgdmFyIGEgPSAwLjI7XHJcbiAgdmFyIGIgPSAwLjI7XHJcbiAgdmFyIHBBeCA9IG51bGw7XHJcbiAgdmFyIHBBeSA9IG51bGw7XHJcbiAgdmFyIHBCeCA9IG51bGw7XHJcbiAgdmFyIHBCeSA9IG51bGw7XHJcbiAgaWYgKGkgPCAxKSB7XHJcbiAgICBwQXggPSBwb2ludHNbMF0ueCArIChwb2ludHNbMV0ueCAtIHBvaW50c1swXS54KSAqIGE7XHJcbiAgICBwQXkgPSBwb2ludHNbMF0ueSArIChwb2ludHNbMV0ueSAtIHBvaW50c1swXS55KSAqIGE7XHJcbiAgfSBlbHNlIHtcclxuICAgIHBBeCA9IHBvaW50c1tpXS54ICsgKHBvaW50c1tpICsgMV0ueCAtIHBvaW50c1tpIC0gMV0ueCkgKiBhO1xyXG4gICAgcEF5ID0gcG9pbnRzW2ldLnkgKyAocG9pbnRzW2kgKyAxXS55IC0gcG9pbnRzW2kgLSAxXS55KSAqIGE7XHJcbiAgfVxyXG5cclxuICBpZiAoaSA+IHBvaW50cy5sZW5ndGggLSAzKSB7XHJcbiAgICB2YXIgbGFzdCA9IHBvaW50cy5sZW5ndGggLSAxO1xyXG4gICAgcEJ4ID0gcG9pbnRzW2xhc3RdLnggLSAocG9pbnRzW2xhc3RdLnggLSBwb2ludHNbbGFzdCAtIDFdLngpICogYjtcclxuICAgIHBCeSA9IHBvaW50c1tsYXN0XS55IC0gKHBvaW50c1tsYXN0XS55IC0gcG9pbnRzW2xhc3QgLSAxXS55KSAqIGI7XHJcbiAgfSBlbHNlIHtcclxuICAgIHBCeCA9IHBvaW50c1tpICsgMV0ueCAtIChwb2ludHNbaSArIDJdLnggLSBwb2ludHNbaV0ueCkgKiBiO1xyXG4gICAgcEJ5ID0gcG9pbnRzW2kgKyAxXS55IC0gKHBvaW50c1tpICsgMl0ueSAtIHBvaW50c1tpXS55KSAqIGI7XHJcbiAgfVxyXG4gIGlmIChpc05vdE1pZGRsZVBvaW50KHBvaW50cywgaSArIDEpKSB7XHJcbiAgICBwQnkgPSBwb2ludHNbaSArIDFdLnk7XHJcbiAgfVxyXG4gIGlmIChpc05vdE1pZGRsZVBvaW50KHBvaW50cywgaSkpIHtcclxuICAgIHBBeSA9IHBvaW50c1tpXS55O1xyXG4gIH1cclxuXHRpZiAoaXNOb3RNaWRkbGVQb2ludFgocG9pbnRzLCBpICsgMSkpIHtcclxuXHQgIHBCeCA9IHBvaW50c1tpICsgMV0ueDtcclxuXHR9XHJcblx0aWYgKGlzTm90TWlkZGxlUG9pbnRYKHBvaW50cywgaSkpIHtcclxuXHQgIHBBeCA9IHBvaW50c1tpXS54O1xyXG5cdH1cclxuXHRpZiAocEF5ID49IE1hdGgubWF4KHBvaW50c1tpXS55LCBwb2ludHNbaSArIDFdLnkpIHx8IHBBeSA8PSBNYXRoLm1pbihwb2ludHNbaV0ueSwgcG9pbnRzW2kgKyAxXS55KSkge1xyXG5cdHBBeSA9IHBvaW50c1tpXS55O1xyXG5cdH1cclxuXHRpZiAocEJ5ID49IE1hdGgubWF4KHBvaW50c1tpXS55LCBwb2ludHNbaSArIDFdLnkpIHx8IHBCeSA8PSBNYXRoLm1pbihwb2ludHNbaV0ueSwgcG9pbnRzW2kgKyAxXS55KSkge1xyXG5cdHBCeSA9IHBvaW50c1tpICsgMV0ueTtcclxuXHR9XHJcblx0aWYgKHBBeCA+PSBNYXRoLm1heChwb2ludHNbaV0ueCwgcG9pbnRzW2kgKyAxXS54KSB8fCBwQXggPD0gTWF0aC5taW4ocG9pbnRzW2ldLngsIHBvaW50c1tpICsgMV0ueCkpIHtcclxuXHRwQXggPSBwb2ludHNbaV0ueDtcclxuXHR9XHJcblx0aWYgKHBCeCA+PSBNYXRoLm1heChwb2ludHNbaV0ueCwgcG9pbnRzW2kgKyAxXS54KSB8fCBwQnggPD0gTWF0aC5taW4ocG9pbnRzW2ldLngsIHBvaW50c1tpICsgMV0ueCkpIHtcclxuXHRwQnggPSBwb2ludHNbaSArIDFdLng7XHJcblx0fVxyXG4gIHJldHVybiB7XHJcbiAgICBjdHJBOiB7XHJcbiAgICAgIHg6IHBBeCxcclxuICAgICAgeTogcEF5XHJcbiAgICB9LFxyXG4gICAgY3RyQjoge1xyXG4gICAgICB4OiBwQngsXHJcbiAgICAgIHk6IHBCeVxyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbnZlcnRDb29yZGluYXRlT3JpZ2luKHgsIHksIGNlbnRlcikge1xyXG4gIHJldHVybiB7XHJcbiAgICB4OiBjZW50ZXIueCArIHgsXHJcbiAgICB5OiBjZW50ZXIueSAtIHlcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBhdm9pZENvbGxpc2lvbihvYmosIHRhcmdldCkge1xyXG4gIGlmICh0YXJnZXQpIHtcclxuICAgIC8vIGlzIGNvbGxpc2lvbiB0ZXN0XHJcbiAgICB3aGlsZSAodXRpbC5pc0NvbGxpc2lvbihvYmosIHRhcmdldCkpIHtcclxuICAgICAgaWYgKG9iai5zdGFydC54ID4gMCkge1xyXG4gICAgICAgIG9iai5zdGFydC55LS07XHJcbiAgICAgIH0gZWxzZSBpZiAob2JqLnN0YXJ0LnggPCAwKSB7XHJcbiAgICAgICAgb2JqLnN0YXJ0LnkrKztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAob2JqLnN0YXJ0LnkgPiAwKSB7XHJcbiAgICAgICAgICBvYmouc3RhcnQueSsrO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBvYmouc3RhcnQueS0tO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaWxsU2VyaWVzKHNlcmllcywgb3B0cywgY29uZmlnKSB7XHJcbiAgdmFyIGluZGV4ID0gMDtcclxuICByZXR1cm4gc2VyaWVzLm1hcChmdW5jdGlvbihpdGVtKSB7XHJcbiAgICBpZiAoIWl0ZW0uY29sb3IpIHtcclxuICAgICAgaXRlbS5jb2xvciA9IGNvbmZpZy5jb2xvcnNbaW5kZXhdO1xyXG4gICAgICBpbmRleCA9IChpbmRleCArIDEpICUgY29uZmlnLmNvbG9ycy5sZW5ndGg7XHJcbiAgICB9XHJcbiAgICBpZiAoIWl0ZW0uaW5kZXgpIHtcclxuICAgICAgaXRlbS5pbmRleCA9IDA7XHJcbiAgICB9XHJcbiAgICBpZiAoIWl0ZW0udHlwZSkge1xyXG4gICAgICBpdGVtLnR5cGUgPSBvcHRzLnR5cGU7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGl0ZW0uc2hvdyA9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgIGl0ZW0uc2hvdyA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAoIWl0ZW0udHlwZSkge1xyXG4gICAgICBpdGVtLnR5cGUgPSBvcHRzLnR5cGU7XHJcbiAgICB9XHJcbiAgICBpZiAoIWl0ZW0ucG9pbnRTaGFwZSkge1xyXG4gICAgICBpdGVtLnBvaW50U2hhcGUgPSBcImNpcmNsZVwiO1xyXG4gICAgfVxyXG4gICAgaWYgKCFpdGVtLmxlZ2VuZFNoYXBlKSB7XHJcbiAgICAgIHN3aXRjaCAoaXRlbS50eXBlKSB7XHJcbiAgICAgICAgY2FzZSAnbGluZSc6XHJcbiAgICAgICAgICBpdGVtLmxlZ2VuZFNoYXBlID0gXCJsaW5lXCI7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdjb2x1bW4nOlxyXG4gICAgICAgICAgaXRlbS5sZWdlbmRTaGFwZSA9IFwicmVjdFwiO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnYXJlYSc6XHJcbiAgICAgICAgICBpdGVtLmxlZ2VuZFNoYXBlID0gXCJ0cmlhbmdsZVwiO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIGl0ZW0ubGVnZW5kU2hhcGUgPSBcImNpcmNsZVwiO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaXRlbTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0RGF0YVJhbmdlKG1pbkRhdGEsIG1heERhdGEpIHtcclxuICB2YXIgbGltaXQgPSAwO1xyXG4gIHZhciByYW5nZSA9IG1heERhdGEgLSBtaW5EYXRhO1xyXG4gIGlmIChyYW5nZSA+PSAxMDAwMCkge1xyXG4gICAgbGltaXQgPSAxMDAwO1xyXG4gIH0gZWxzZSBpZiAocmFuZ2UgPj0gMTAwMCkge1xyXG4gICAgbGltaXQgPSAxMDA7XHJcbiAgfSBlbHNlIGlmIChyYW5nZSA+PSAxMDApIHtcclxuICAgIGxpbWl0ID0gMTA7XHJcbiAgfSBlbHNlIGlmIChyYW5nZSA+PSAxMCkge1xyXG4gICAgbGltaXQgPSA1O1xyXG4gIH0gZWxzZSBpZiAocmFuZ2UgPj0gMSkge1xyXG4gICAgbGltaXQgPSAxO1xyXG4gIH0gZWxzZSBpZiAocmFuZ2UgPj0gMC4xKSB7XHJcbiAgICBsaW1pdCA9IDAuMTtcclxuICB9IGVsc2UgaWYgKHJhbmdlID49IDAuMDEpIHtcclxuICAgIGxpbWl0ID0gMC4wMTtcclxuICB9IGVsc2UgaWYgKHJhbmdlID49IDAuMDAxKSB7XHJcbiAgICBsaW1pdCA9IDAuMDAxO1xyXG4gIH0gZWxzZSBpZiAocmFuZ2UgPj0gMC4wMDAxKSB7XHJcbiAgICBsaW1pdCA9IDAuMDAwMTtcclxuICB9IGVsc2UgaWYgKHJhbmdlID49IDAuMDAwMDEpIHtcclxuICAgIGxpbWl0ID0gMC4wMDAwMTtcclxuICB9IGVsc2Uge1xyXG4gICAgbGltaXQgPSAwLjAwMDAwMTtcclxuICB9XHJcbiAgcmV0dXJuIHtcclxuICAgIG1pblJhbmdlOiBmaW5kUmFuZ2UobWluRGF0YSwgJ2xvd2VyJywgbGltaXQpLFxyXG4gICAgbWF4UmFuZ2U6IGZpbmRSYW5nZShtYXhEYXRhLCAndXBwZXInLCBsaW1pdClcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBtZWFzdXJlVGV4dCh0ZXh0KSB7XHJcbiAgdmFyIGZvbnRTaXplID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBjb25maWcuZm9udFNpemU7XHJcbiAgdGV4dCA9IFN0cmluZyh0ZXh0KTtcclxuICB2YXIgdGV4dCA9IHRleHQuc3BsaXQoJycpO1xyXG4gIHZhciB3aWR0aCA9IDA7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICBsZXQgaXRlbSA9IHRleHRbaV07XHJcbiAgICBpZiAoL1thLXpBLVpdLy50ZXN0KGl0ZW0pKSB7XHJcbiAgICAgIHdpZHRoICs9IDc7XHJcbiAgICB9IGVsc2UgaWYgKC9bMC05XS8udGVzdChpdGVtKSkge1xyXG4gICAgICB3aWR0aCArPSA1LjU7XHJcbiAgICB9IGVsc2UgaWYgKC9cXC4vLnRlc3QoaXRlbSkpIHtcclxuICAgICAgd2lkdGggKz0gMi43O1xyXG4gICAgfSBlbHNlIGlmICgvLS8udGVzdChpdGVtKSkge1xyXG4gICAgICB3aWR0aCArPSAzLjI1O1xyXG4gICAgfSBlbHNlIGlmICgvW1xcdTRlMDAtXFx1OWZhNV0vLnRlc3QoaXRlbSkpIHtcclxuICAgICAgd2lkdGggKz0gMTA7XHJcbiAgICB9IGVsc2UgaWYgKC9cXCh8XFwpLy50ZXN0KGl0ZW0pKSB7XHJcbiAgICAgIHdpZHRoICs9IDMuNzM7XHJcbiAgICB9IGVsc2UgaWYgKC9cXHMvLnRlc3QoaXRlbSkpIHtcclxuICAgICAgd2lkdGggKz0gMi41O1xyXG4gICAgfSBlbHNlIGlmICgvJS8udGVzdChpdGVtKSkge1xyXG4gICAgICB3aWR0aCArPSA4O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgd2lkdGggKz0gMTA7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB3aWR0aCAqIGZvbnRTaXplIC8gMTA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRhdGFDb21iaW5lKHNlcmllcykge1xyXG4gIHJldHVybiBzZXJpZXMucmVkdWNlKGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgIHJldHVybiAoYS5kYXRhID8gYS5kYXRhIDogYSkuY29uY2F0KGIuZGF0YSk7XHJcbiAgfSwgW10pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkYXRhQ29tYmluZVN0YWNrKHNlcmllcywgbGVuKSB7XHJcbiAgdmFyIHN1bSA9IG5ldyBBcnJheShsZW4pO1xyXG4gIGZvciAodmFyIGogPSAwOyBqIDwgc3VtLmxlbmd0aDsgaisrKSB7XHJcbiAgICBzdW1bal0gPSAwO1xyXG4gIH1cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBzdW0ubGVuZ3RoOyBqKyspIHtcclxuICAgICAgc3VtW2pdICs9IHNlcmllc1tpXS5kYXRhW2pdO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gc2VyaWVzLnJlZHVjZShmdW5jdGlvbihhLCBiKSB7XHJcbiAgICByZXR1cm4gKGEuZGF0YSA/IGEuZGF0YSA6IGEpLmNvbmNhdChiLmRhdGEpLmNvbmNhdChzdW0pO1xyXG4gIH0sIFtdKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VG91Y2hlcyh0b3VjaGVzLCBvcHRzLCBlKSB7XHJcbiAgbGV0IHgsIHk7XHJcbiAgaWYgKHRvdWNoZXMuY2xpZW50WCkge1xyXG4gICAgaWYgKG9wdHMucm90YXRlKSB7XHJcbiAgICAgIHkgPSBvcHRzLmhlaWdodCAtIHRvdWNoZXMuY2xpZW50WCAqIG9wdHMucGl4ZWxSYXRpbztcclxuICAgICAgeCA9ICh0b3VjaGVzLnBhZ2VZIC0gZS5jdXJyZW50VGFyZ2V0Lm9mZnNldFRvcCAtIChvcHRzLmhlaWdodCAvIG9wdHMucGl4ZWxSYXRpbyAvIDIpICogKG9wdHMucGl4ZWxSYXRpbyAtIDEpKSAqIG9wdHMucGl4ZWxSYXRpbztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHggPSB0b3VjaGVzLmNsaWVudFggKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgICAgIHkgPSAodG91Y2hlcy5wYWdlWSAtIGUuY3VycmVudFRhcmdldC5vZmZzZXRUb3AgLSAob3B0cy5oZWlnaHQgLyBvcHRzLnBpeGVsUmF0aW8gLyAyKSAqIChvcHRzLnBpeGVsUmF0aW8gLSAxKSkgKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIGlmIChvcHRzLnJvdGF0ZSkge1xyXG4gICAgICB5ID0gb3B0cy5oZWlnaHQgLSB0b3VjaGVzLnggKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgICAgIHggPSB0b3VjaGVzLnkgKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB4ID0gdG91Y2hlcy54ICogb3B0cy5waXhlbFJhdGlvO1xyXG4gICAgICB5ID0gdG91Y2hlcy55ICogb3B0cy5waXhlbFJhdGlvO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4ge1xyXG4gICAgeDogeCxcclxuICAgIHk6IHlcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFNlcmllc0RhdGFJdGVtKHNlcmllcywgaW5kZXgpIHtcclxuICB2YXIgZGF0YSA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VyaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBsZXQgaXRlbSA9IHNlcmllc1tpXTtcclxuICAgIGlmIChpdGVtLmRhdGFbaW5kZXhdICE9PSBudWxsICYmIHR5cGVvZiBpdGVtLmRhdGFbaW5kZXhdICE9PSAndW5kZWZpbmVkJyAmJiBpdGVtLnNob3cpIHtcclxuICAgICAgbGV0IHNlcmllc0l0ZW0gPSB7fTtcclxuICAgICAgc2VyaWVzSXRlbS5jb2xvciA9IGl0ZW0uY29sb3I7XHJcbiAgICAgIHNlcmllc0l0ZW0udHlwZSA9IGl0ZW0udHlwZTtcclxuICAgICAgc2VyaWVzSXRlbS5zdHlsZSA9IGl0ZW0uc3R5bGU7XHJcbiAgICAgIHNlcmllc0l0ZW0ucG9pbnRTaGFwZSA9IGl0ZW0ucG9pbnRTaGFwZTtcclxuICAgICAgc2VyaWVzSXRlbS5kaXNhYmxlTGVnZW5kID0gaXRlbS5kaXNhYmxlTGVnZW5kO1xyXG4gICAgICBzZXJpZXNJdGVtLm5hbWUgPSBpdGVtLm5hbWU7XHJcbiAgICAgIHNlcmllc0l0ZW0uc2hvdyA9IGl0ZW0uc2hvdztcclxuICAgICAgc2VyaWVzSXRlbS5kYXRhID0gaXRlbS5mb3JtYXQgPyBpdGVtLmZvcm1hdChpdGVtLmRhdGFbaW5kZXhdKSA6IGl0ZW0uZGF0YVtpbmRleF07XHJcbiAgICAgIGRhdGEucHVzaChzZXJpZXNJdGVtKTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGRhdGE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldE1heFRleHRMaXN0TGVuZ3RoKGxpc3QpIHtcclxuICB2YXIgbGVuZ3RoTGlzdCA9IGxpc3QubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgIHJldHVybiBtZWFzdXJlVGV4dChpdGVtKTtcclxuICB9KTtcclxuICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgbGVuZ3RoTGlzdCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFJhZGFyQ29vcmRpbmF0ZVNlcmllcyhsZW5ndGgpIHtcclxuICB2YXIgZWFjaEFuZ2xlID0gMiAqIE1hdGguUEkgLyBsZW5ndGg7XHJcbiAgdmFyIENvb3JkaW5hdGVTZXJpZXMgPSBbXTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICBDb29yZGluYXRlU2VyaWVzLnB1c2goZWFjaEFuZ2xlICogaSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gQ29vcmRpbmF0ZVNlcmllcy5tYXAoZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgcmV0dXJuIC0xICogaXRlbSArIE1hdGguUEkgLyAyO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUb29sVGlwRGF0YShzZXJpZXNEYXRhLCBjYWxQb2ludHMsIGluZGV4LCBjYXRlZ29yaWVzKSB7XHJcbiAgdmFyIG9wdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDoge307XHJcblxyXG4gIHZhciB0ZXh0TGlzdCA9IHNlcmllc0RhdGEubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcclxuXHRcdGxldCB0aXRsZVRleHQ9W107XHJcblx0XHRpZihjYXRlZ29yaWVzKXtcclxuXHRcdFx0dGl0bGVUZXh0PWNhdGVnb3JpZXM7XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0dGl0bGVUZXh0PWl0ZW0uZGF0YTtcclxuXHRcdH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRleHQ6IG9wdGlvbi5mb3JtYXQgPyBvcHRpb24uZm9ybWF0KGl0ZW0sIHRpdGxlVGV4dFtpbmRleF0pIDogaXRlbS5uYW1lICsgJzogJyArIGl0ZW0uZGF0YSxcclxuICAgICAgY29sb3I6IGl0ZW0uY29sb3JcclxuICAgIH07XHJcbiAgfSk7XHJcbiAgdmFyIHZhbGlkQ2FsUG9pbnRzID0gW107XHJcbiAgdmFyIG9mZnNldCA9IHtcclxuICAgIHg6IDAsXHJcbiAgICB5OiAwXHJcbiAgfTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGNhbFBvaW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgbGV0IHBvaW50cyA9IGNhbFBvaW50c1tpXTtcclxuICAgIGlmICh0eXBlb2YgcG9pbnRzW2luZGV4XSAhPT0gJ3VuZGVmaW5lZCcgJiYgcG9pbnRzW2luZGV4XSAhPT0gbnVsbCkge1xyXG4gICAgICB2YWxpZENhbFBvaW50cy5wdXNoKHBvaW50c1tpbmRleF0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbGlkQ2FsUG9pbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBsZXQgaXRlbSA9IHZhbGlkQ2FsUG9pbnRzW2ldO1xyXG4gICAgb2Zmc2V0LnggPSBNYXRoLnJvdW5kKGl0ZW0ueCk7XHJcbiAgICBvZmZzZXQueSArPSBpdGVtLnk7XHJcbiAgfVxyXG4gIG9mZnNldC55IC89IHZhbGlkQ2FsUG9pbnRzLmxlbmd0aDtcclxuICByZXR1cm4ge1xyXG4gICAgdGV4dExpc3Q6IHRleHRMaXN0LFxyXG4gICAgb2Zmc2V0OiBvZmZzZXRcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRNaXhUb29sVGlwRGF0YShzZXJpZXNEYXRhLCBjYWxQb2ludHMsIGluZGV4LCBjYXRlZ29yaWVzKSB7XHJcbiAgdmFyIG9wdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDoge307XHJcbiAgdmFyIHRleHRMaXN0ID0gc2VyaWVzRGF0YS5tYXAoZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdGV4dDogb3B0aW9uLmZvcm1hdCA/IG9wdGlvbi5mb3JtYXQoaXRlbSwgY2F0ZWdvcmllc1tpbmRleF0pIDogaXRlbS5uYW1lICsgJzogJyArIGl0ZW0uZGF0YSxcclxuICAgICAgY29sb3I6IGl0ZW0uY29sb3IsXHJcbiAgICAgIGRpc2FibGVMZWdlbmQ6IGl0ZW0uZGlzYWJsZUxlZ2VuZCA/IHRydWUgOiBmYWxzZVxyXG4gICAgfTtcclxuICB9KTtcclxuICB0ZXh0TGlzdCA9IHRleHRMaXN0LmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XHJcbiAgICBpZiAoaXRlbS5kaXNhYmxlTGVnZW5kICE9PSB0cnVlKSB7XHJcbiAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIHZhciB2YWxpZENhbFBvaW50cyA9IFtdO1xyXG4gIHZhciBvZmZzZXQgPSB7XHJcbiAgICB4OiAwLFxyXG4gICAgeTogMFxyXG4gIH07XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYWxQb2ludHMubGVuZ3RoOyBpKyspIHtcclxuICAgIGxldCBwb2ludHMgPSBjYWxQb2ludHNbaV07XHJcbiAgICBpZiAodHlwZW9mIHBvaW50c1tpbmRleF0gIT09ICd1bmRlZmluZWQnICYmIHBvaW50c1tpbmRleF0gIT09IG51bGwpIHtcclxuICAgICAgdmFsaWRDYWxQb2ludHMucHVzaChwb2ludHNbaW5kZXhdKTtcclxuICAgIH1cclxuICB9XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWxpZENhbFBvaW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgbGV0IGl0ZW0gPSB2YWxpZENhbFBvaW50c1tpXTtcclxuICAgIG9mZnNldC54ID0gTWF0aC5yb3VuZChpdGVtLngpO1xyXG4gICAgb2Zmc2V0LnkgKz0gaXRlbS55O1xyXG4gIH1cclxuICBvZmZzZXQueSAvPSB2YWxpZENhbFBvaW50cy5sZW5ndGg7XHJcbiAgcmV0dXJuIHtcclxuICAgIHRleHRMaXN0OiB0ZXh0TGlzdCxcclxuICAgIG9mZnNldDogb2Zmc2V0XHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Q2FuZGxlVG9vbFRpcERhdGEoc2VyaWVzLCBzZXJpZXNEYXRhLCBjYWxQb2ludHMsIGluZGV4LCBjYXRlZ29yaWVzLCBleHRyYSkge1xyXG4gIHZhciBvcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gNiAmJiBhcmd1bWVudHNbNl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s2XSA6IHt9O1xyXG4gIGxldCB1cENvbG9yID0gZXh0cmEuY29sb3IudXBGaWxsO1xyXG4gIGxldCBkb3duQ29sb3IgPSBleHRyYS5jb2xvci5kb3duRmlsbDtcclxuICAvL+minOiJsumhuuW6j+S4uuW8gOebmO+8jOaUtuebmO+8jOacgOS9ju+8jOacgOmrmFxyXG4gIGxldCBjb2xvciA9IFt1cENvbG9yLCB1cENvbG9yLCBkb3duQ29sb3IsIHVwQ29sb3JdO1xyXG4gIHZhciB0ZXh0TGlzdCA9IFtdO1xyXG4gIGxldCB0ZXh0MCA9IHtcclxuICAgIHRleHQ6IGNhdGVnb3JpZXNbaW5kZXhdLFxyXG4gICAgY29sb3I6IG51bGxcclxuICB9O1xyXG4gIHRleHRMaXN0LnB1c2godGV4dDApO1xyXG4gIHNlcmllc0RhdGEubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgIGlmIChpbmRleCA9PSAwKSB7XHJcbiAgICAgIGlmKGl0ZW0uZGF0YVsxXSAtIGl0ZW0uZGF0YVswXSA8IDApe1xyXG4gICAgICBcdGNvbG9yWzFdID0gZG93bkNvbG9yO1xyXG4gICAgICB9ZWxzZXtcclxuICAgICAgXHRjb2xvclsxXSA9IHVwQ29sb3I7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChpdGVtLmRhdGFbMF0gPCBzZXJpZXNbaW5kZXggLSAxXVsxXSkge1xyXG4gICAgICAgIGNvbG9yWzBdID0gZG93bkNvbG9yO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChpdGVtLmRhdGFbMV0gPCBpdGVtLmRhdGFbMF0pIHtcclxuICAgICAgICBjb2xvclsxXSA9IGRvd25Db2xvcjtcclxuICAgICAgfVxyXG4gICAgICBpZiAoaXRlbS5kYXRhWzJdID4gc2VyaWVzW2luZGV4IC0gMV1bMV0pIHtcclxuICAgICAgICBjb2xvclsyXSA9IHVwQ29sb3I7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGl0ZW0uZGF0YVszXSA8IHNlcmllc1tpbmRleCAtIDFdWzFdKSB7XHJcbiAgICAgICAgY29sb3JbM10gPSBkb3duQ29sb3I7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGxldCB0ZXh0MSA9IHtcclxuICAgICAgdGV4dDogJ29wZW7vvJonICsgaXRlbS5kYXRhWzBdLFxyXG4gICAgICBjb2xvcjogY29sb3JbMF1cclxuICAgIH07XHJcbiAgICBsZXQgdGV4dDIgPSB7XHJcbiAgICAgIHRleHQ6ICdjbG9zZe+8micgKyBpdGVtLmRhdGFbMV0sXHJcbiAgICAgIGNvbG9yOiBjb2xvclsxXVxyXG4gICAgfTtcclxuICAgIGxldCB0ZXh0MyA9IHtcclxuICAgICAgdGV4dDogJ21pbu+8micgKyBpdGVtLmRhdGFbMl0sXHJcbiAgICAgIGNvbG9yOiBjb2xvclsyXVxyXG4gICAgfTtcclxuICAgIGxldCB0ZXh0NCA9IHtcclxuICAgICAgdGV4dDogJ21heO+8micgKyBpdGVtLmRhdGFbM10sXHJcbiAgICAgIGNvbG9yOiBjb2xvclszXVxyXG4gICAgfTtcclxuICAgIHRleHRMaXN0LnB1c2godGV4dDEsIHRleHQyLCB0ZXh0MywgdGV4dDQpO1xyXG4gIH0pO1xyXG4gIHZhciB2YWxpZENhbFBvaW50cyA9IFtdO1xyXG4gIHZhciBvZmZzZXQgPSB7XHJcbiAgICB4OiAwLFxyXG4gICAgeTogMFxyXG4gIH07XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYWxQb2ludHMubGVuZ3RoOyBpKyspIHtcclxuICAgIGxldCBwb2ludHMgPSBjYWxQb2ludHNbaV07XHJcbiAgICBpZiAodHlwZW9mIHBvaW50c1tpbmRleF0gIT09ICd1bmRlZmluZWQnICYmIHBvaW50c1tpbmRleF0gIT09IG51bGwpIHtcclxuICAgICAgdmFsaWRDYWxQb2ludHMucHVzaChwb2ludHNbaW5kZXhdKTtcclxuICAgIH1cclxuICB9XHJcbiAgb2Zmc2V0LnggPSBNYXRoLnJvdW5kKHZhbGlkQ2FsUG9pbnRzWzBdWzBdLngpO1xyXG4gIHJldHVybiB7XHJcbiAgICB0ZXh0TGlzdDogdGV4dExpc3QsXHJcbiAgICBvZmZzZXQ6IG9mZnNldFxyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbHRlclNlcmllcyhzZXJpZXMpIHtcclxuICBsZXQgdGVtcFNlcmllcyA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VyaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBpZiAoc2VyaWVzW2ldLnNob3cgPT0gdHJ1ZSkge1xyXG4gICAgICB0ZW1wU2VyaWVzLnB1c2goc2VyaWVzW2ldKVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gdGVtcFNlcmllcztcclxufVxyXG5cclxuZnVuY3Rpb24gZmluZEN1cnJlbnRJbmRleChjdXJyZW50UG9pbnRzLCBjYWxQb2ludHMsIG9wdHMsIGNvbmZpZykge1xyXG4gIHZhciBvZmZzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IDA7XHJcbiAgdmFyIGN1cnJlbnRJbmRleCA9IC0xO1xyXG4gIHZhciBzcGFjaW5nID0gb3B0cy5jaGFydERhdGEuZWFjaFNwYWNpbmcvMjtcclxuXHRsZXQgeEF4aXNQb2ludHM9W107XHJcblx0aWYoY2FsUG9pbnRzLmxlbmd0aD4wKXtcclxuXHRcdGZvcihsZXQgaT0xO2k8b3B0cy5jaGFydERhdGEueEF4aXNQb2ludHMubGVuZ3RoO2krKyl7XHJcblx0XHRcdFx0eEF4aXNQb2ludHMucHVzaChvcHRzLmNoYXJ0RGF0YS54QXhpc1BvaW50c1tpXS1zcGFjaW5nKVxyXG5cdFx0fVxyXG5cdFx0aWYoKG9wdHMudHlwZT09J2xpbmUnIHx8IG9wdHMudHlwZT09J2FyZWEnKSAmJiBvcHRzLnhBeGlzLmJvdW5kYXJ5R2FwPT0nanVzdGlmeScpe1xyXG5cdFx0ICBzcGFjaW5nID0gb3B0cy5jaGFydERhdGEuZWFjaFNwYWNpbmcvMjtcclxuXHRcdH1cclxuXHRcdGlmKCFvcHRzLmNhdGVnb3JpZXMpe1xyXG5cdFx0XHRzcGFjaW5nPTBcclxuXHRcdH1cclxuXHRcdGlmIChpc0luRXhhY3RDaGFydEFyZWEoY3VycmVudFBvaW50cywgb3B0cywgY29uZmlnKSkge1xyXG5cdFx0ICB4QXhpc1BvaW50cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcblx0XHQgICAgaWYgKGN1cnJlbnRQb2ludHMueCArIG9mZnNldCArIHNwYWNpbmcgPiBpdGVtKSB7XHJcblx0XHQgICAgICBjdXJyZW50SW5kZXggPSBpbmRleDtcclxuXHRcdCAgICB9XHJcblx0XHQgIH0pO1xyXG5cdFx0fVxyXG5cdH1cclxuICByZXR1cm4gY3VycmVudEluZGV4O1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5kTGVnZW5kSW5kZXgoY3VycmVudFBvaW50cywgbGVnZW5kRGF0YSwgb3B0cykge1xyXG4gIGxldCBjdXJyZW50SW5kZXggPSAtMTtcclxuICBpZiAoaXNJbkV4YWN0TGVnZW5kQXJlYShjdXJyZW50UG9pbnRzLCBsZWdlbmREYXRhLmFyZWEpKSB7XHJcbiAgICBsZXQgcG9pbnRzID0gbGVnZW5kRGF0YS5wb2ludHM7XHJcbiAgICBsZXQgaW5kZXggPSAtMTtcclxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgbGV0IGl0ZW0gPSBwb2ludHNbaV07XHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgaXRlbS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgIGluZGV4ICs9IDE7XHJcbiAgICAgICAgbGV0IGFyZWEgPSBpdGVtW2pdWydhcmVhJ107XHJcbiAgICAgICAgaWYgKGN1cnJlbnRQb2ludHMueCA+IGFyZWFbMF0gJiYgY3VycmVudFBvaW50cy54IDwgYXJlYVsyXSAmJiBjdXJyZW50UG9pbnRzLnkgPiBhcmVhWzFdICYmIGN1cnJlbnRQb2ludHMueSA8IGFyZWFbM10pIHtcclxuICAgICAgICAgIGN1cnJlbnRJbmRleCA9IGluZGV4O1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY3VycmVudEluZGV4O1xyXG4gIH1cclxuICByZXR1cm4gY3VycmVudEluZGV4O1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc0luRXhhY3RMZWdlbmRBcmVhKGN1cnJlbnRQb2ludHMsIGFyZWEpIHtcclxuICByZXR1cm4gY3VycmVudFBvaW50cy54ID4gYXJlYS5zdGFydC54ICYmIGN1cnJlbnRQb2ludHMueCA8IGFyZWEuZW5kLnggJiYgY3VycmVudFBvaW50cy55ID4gYXJlYS5zdGFydC55ICYmXHJcbiAgICBjdXJyZW50UG9pbnRzLnkgPCBhcmVhLmVuZC55O1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc0luRXhhY3RDaGFydEFyZWEoY3VycmVudFBvaW50cywgb3B0cywgY29uZmlnKSB7XHJcbiAgcmV0dXJuIGN1cnJlbnRQb2ludHMueCA8PSBvcHRzLndpZHRoIC0gb3B0cy5hcmVhWzFdICsgMTAgJiYgY3VycmVudFBvaW50cy54ID49IG9wdHMuYXJlYVszXSAtMTAgJiYgY3VycmVudFBvaW50cy55ID49IG9wdHMuYXJlYVswXSAmJiBjdXJyZW50UG9pbnRzLnkgPD0gb3B0cy5oZWlnaHQgLSBvcHRzLmFyZWFbMl07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbmRSYWRhckNoYXJ0Q3VycmVudEluZGV4KGN1cnJlbnRQb2ludHMsIHJhZGFyRGF0YSwgY291bnQpIHtcclxuICB2YXIgZWFjaEFuZ2xlQXJlYSA9IDIgKiBNYXRoLlBJIC8gY291bnQ7XHJcbiAgdmFyIGN1cnJlbnRJbmRleCA9IC0xO1xyXG4gIGlmIChpc0luRXhhY3RQaWVDaGFydEFyZWEoY3VycmVudFBvaW50cywgcmFkYXJEYXRhLmNlbnRlciwgcmFkYXJEYXRhLnJhZGl1cykpIHtcclxuICAgIHZhciBmaXhBbmdsZSA9IGZ1bmN0aW9uIGZpeEFuZ2xlKGFuZ2xlKSB7XHJcbiAgICAgIGlmIChhbmdsZSA8IDApIHtcclxuICAgICAgICBhbmdsZSArPSAyICogTWF0aC5QSTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoYW5nbGUgPiAyICogTWF0aC5QSSkge1xyXG4gICAgICAgIGFuZ2xlIC09IDIgKiBNYXRoLlBJO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBhbmdsZTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGFuZ2xlID0gTWF0aC5hdGFuMihyYWRhckRhdGEuY2VudGVyLnkgLSBjdXJyZW50UG9pbnRzLnksIGN1cnJlbnRQb2ludHMueCAtIHJhZGFyRGF0YS5jZW50ZXIueCk7XHJcbiAgICBhbmdsZSA9IC0xICogYW5nbGU7XHJcbiAgICBpZiAoYW5nbGUgPCAwKSB7XHJcbiAgICAgIGFuZ2xlICs9IDIgKiBNYXRoLlBJO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBhbmdsZUxpc3QgPSByYWRhckRhdGEuYW5nbGVMaXN0Lm1hcChmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgIGl0ZW0gPSBmaXhBbmdsZSgtMSAqIGl0ZW0pO1xyXG5cclxuICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICB9KTtcclxuXHJcbiAgICBhbmdsZUxpc3QuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgICB2YXIgcmFuZ2VTdGFydCA9IGZpeEFuZ2xlKGl0ZW0gLSBlYWNoQW5nbGVBcmVhIC8gMik7XHJcbiAgICAgIHZhciByYW5nZUVuZCA9IGZpeEFuZ2xlKGl0ZW0gKyBlYWNoQW5nbGVBcmVhIC8gMik7XHJcbiAgICAgIGlmIChyYW5nZUVuZCA8IHJhbmdlU3RhcnQpIHtcclxuICAgICAgICByYW5nZUVuZCArPSAyICogTWF0aC5QSTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoYW5nbGUgPj0gcmFuZ2VTdGFydCAmJiBhbmdsZSA8PSByYW5nZUVuZCB8fCBhbmdsZSArIDIgKiBNYXRoLlBJID49IHJhbmdlU3RhcnQgJiYgYW5nbGUgKyAyICogTWF0aC5QSSA8PVxyXG4gICAgICAgIHJhbmdlRW5kKSB7XHJcbiAgICAgICAgY3VycmVudEluZGV4ID0gaW5kZXg7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGN1cnJlbnRJbmRleDtcclxufVxyXG5cclxuZnVuY3Rpb24gZmluZEZ1bm5lbENoYXJ0Q3VycmVudEluZGV4KGN1cnJlbnRQb2ludHMsIGZ1bm5lbERhdGEpIHtcclxuICB2YXIgY3VycmVudEluZGV4ID0gLTE7XHJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGZ1bm5lbERhdGEuc2VyaWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICB2YXIgaXRlbSA9IGZ1bm5lbERhdGEuc2VyaWVzW2ldO1xyXG4gICAgaWYgKGN1cnJlbnRQb2ludHMueCA+IGl0ZW0uZnVubmVsQXJlYVswXSAmJiBjdXJyZW50UG9pbnRzLnggPCBpdGVtLmZ1bm5lbEFyZWFbMl0gJiYgY3VycmVudFBvaW50cy55ID4gaXRlbS5mdW5uZWxBcmVhWzFdICYmIGN1cnJlbnRQb2ludHMueSA8IGl0ZW0uZnVubmVsQXJlYVszXSkge1xyXG4gICAgICBjdXJyZW50SW5kZXggPSBpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGN1cnJlbnRJbmRleDtcclxufVxyXG5cclxuZnVuY3Rpb24gZmluZFdvcmRDaGFydEN1cnJlbnRJbmRleChjdXJyZW50UG9pbnRzLCB3b3JkRGF0YSkge1xyXG4gIHZhciBjdXJyZW50SW5kZXggPSAtMTtcclxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gd29yZERhdGEubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgIHZhciBpdGVtID0gd29yZERhdGFbaV07XHJcbiAgICBpZiAoY3VycmVudFBvaW50cy54ID4gaXRlbS5hcmVhWzBdICYmIGN1cnJlbnRQb2ludHMueCA8IGl0ZW0uYXJlYVsyXSAmJiBjdXJyZW50UG9pbnRzLnkgPiBpdGVtLmFyZWFbMV0gJiYgY3VycmVudFBvaW50cy55IDwgaXRlbS5hcmVhWzNdKSB7XHJcbiAgICAgIGN1cnJlbnRJbmRleCA9IGk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gY3VycmVudEluZGV4O1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5kTWFwQ2hhcnRDdXJyZW50SW5kZXgoY3VycmVudFBvaW50cywgb3B0cykge1xyXG4gIHZhciBjdXJyZW50SW5kZXggPSAtMTtcclxuICB2YXIgY0RhdGE9b3B0cy5jaGFydERhdGEubWFwRGF0YTtcclxuICB2YXIgZGF0YT1vcHRzLnNlcmllcztcclxuICB2YXIgdG1wPXBvaW50VG9Db29yZGluYXRlKGN1cnJlbnRQb2ludHMueSwgY3VycmVudFBvaW50cy54LGNEYXRhLmJvdW5kcyxjRGF0YS5zY2FsZSxjRGF0YS54b2Zmc2V0LGNEYXRhLnlvZmZzZXQpO1xyXG4gIHZhciBwb2k9W3RtcC54LCB0bXAueV07XHJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGRhdGEubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgIHZhciBpdGVtID0gZGF0YVtpXS5nZW9tZXRyeS5jb29yZGluYXRlcztcclxuICAgIGlmKGlzUG9pV2l0aGluUG9seShwb2ksaXRlbSkpe1xyXG4gICAgICBjdXJyZW50SW5kZXggPSBpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGN1cnJlbnRJbmRleDtcclxufVxyXG5cclxuZnVuY3Rpb24gZmluZFBpZUNoYXJ0Q3VycmVudEluZGV4KGN1cnJlbnRQb2ludHMsIHBpZURhdGEpIHtcclxuICB2YXIgY3VycmVudEluZGV4ID0gLTE7XHJcbiAgaWYgKGlzSW5FeGFjdFBpZUNoYXJ0QXJlYShjdXJyZW50UG9pbnRzLCBwaWVEYXRhLmNlbnRlciwgcGllRGF0YS5yYWRpdXMpKSB7XHJcbiAgICB2YXIgYW5nbGUgPSBNYXRoLmF0YW4yKHBpZURhdGEuY2VudGVyLnkgLSBjdXJyZW50UG9pbnRzLnksIGN1cnJlbnRQb2ludHMueCAtIHBpZURhdGEuY2VudGVyLngpO1xyXG4gICAgYW5nbGUgPSAtYW5nbGU7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcGllRGF0YS5zZXJpZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgdmFyIGl0ZW0gPSBwaWVEYXRhLnNlcmllc1tpXTtcclxuICAgICAgaWYgKGlzSW5BbmdsZVJhbmdlKGFuZ2xlLCBpdGVtLl9zdGFydF8sIGl0ZW0uX3N0YXJ0XyArIGl0ZW0uX3Byb3BvcnRpb25fICogMiAqIE1hdGguUEkpKSB7XHJcbiAgICAgICAgY3VycmVudEluZGV4ID0gaTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGN1cnJlbnRJbmRleDtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNJbkV4YWN0UGllQ2hhcnRBcmVhKGN1cnJlbnRQb2ludHMsIGNlbnRlciwgcmFkaXVzKSB7XHJcbiAgcmV0dXJuIE1hdGgucG93KGN1cnJlbnRQb2ludHMueCAtIGNlbnRlci54LCAyKSArIE1hdGgucG93KGN1cnJlbnRQb2ludHMueSAtIGNlbnRlci55LCAyKSA8PSBNYXRoLnBvdyhyYWRpdXMsIDIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzcGxpdFBvaW50cyhwb2ludHMpIHtcclxuICB2YXIgbmV3UG9pbnRzID0gW107XHJcbiAgdmFyIGl0ZW1zID0gW107XHJcbiAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgIGlmIChpdGVtICE9PSBudWxsKSB7XHJcbiAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoaXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgbmV3UG9pbnRzLnB1c2goaXRlbXMpO1xyXG4gICAgICB9XHJcbiAgICAgIGl0ZW1zID0gW107XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgaWYgKGl0ZW1zLmxlbmd0aCkge1xyXG4gICAgbmV3UG9pbnRzLnB1c2goaXRlbXMpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG5ld1BvaW50cztcclxufVxyXG5cclxuZnVuY3Rpb24gY2FsTGVnZW5kRGF0YShzZXJpZXMsIG9wdHMsIGNvbmZpZywgY2hhcnREYXRhKSB7XHJcbiAgbGV0IGxlZ2VuZERhdGEgPSB7XHJcbiAgICBhcmVhOiB7XHJcbiAgICAgIHN0YXJ0OiB7XHJcbiAgICAgICAgeDogMCxcclxuICAgICAgICB5OiAwXHJcbiAgICAgIH0sXHJcbiAgICAgIGVuZDoge1xyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogMFxyXG4gICAgICB9LFxyXG4gICAgICB3aWR0aDogMCxcclxuICAgICAgaGVpZ2h0OiAwLFxyXG4gICAgICB3aG9sZVdpZHRoOiAwLFxyXG4gICAgICB3aG9sZUhlaWdodDogMFxyXG4gICAgfSxcclxuICAgIHBvaW50czogW10sXHJcbiAgICB3aWR0aEFycjogW10sXHJcbiAgICBoZWlnaHRBcnI6IFtdXHJcbiAgfTtcclxuICBpZiAob3B0cy5sZWdlbmQuc2hvdyA9PT0gZmFsc2UpIHtcclxuICAgIGNoYXJ0RGF0YS5sZWdlbmREYXRhID0gbGVnZW5kRGF0YTtcclxuICAgIHJldHVybiBsZWdlbmREYXRhO1xyXG4gIH1cclxuXHJcbiAgbGV0IHBhZGRpbmcgPSBvcHRzLmxlZ2VuZC5wYWRkaW5nO1xyXG4gIGxldCBtYXJnaW4gPSBvcHRzLmxlZ2VuZC5tYXJnaW47XHJcbiAgbGV0IGZvbnRTaXplID0gb3B0cy5sZWdlbmQuZm9udFNpemU7XHJcbiAgbGV0IHNoYXBlV2lkdGggPSAxNSAqIG9wdHMucGl4ZWxSYXRpbztcclxuICBsZXQgc2hhcGVSaWdodCA9IDUgKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgbGV0IGxpbmVIZWlnaHQgPSBNYXRoLm1heChvcHRzLmxlZ2VuZC5saW5lSGVpZ2h0ICogb3B0cy5waXhlbFJhdGlvLCBmb250U2l6ZSk7XHJcbiAgaWYgKG9wdHMubGVnZW5kLnBvc2l0aW9uID09ICd0b3AnIHx8IG9wdHMubGVnZW5kLnBvc2l0aW9uID09ICdib3R0b20nKSB7XHJcbiAgICBsZXQgbGVnZW5kTGlzdCA9IFtdO1xyXG4gICAgbGV0IHdpZHRoQ291bnQgPSAwO1xyXG4gICAgbGV0IHdpZHRoQ291bnRBcnIgPSBbXTtcclxuICAgIGxldCBjdXJyZW50Um93ID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBsZXQgaXRlbSA9IHNlcmllc1tpXTtcclxuICAgICAgbGV0IGl0ZW1XaWR0aCA9IHNoYXBlV2lkdGggKyBzaGFwZVJpZ2h0ICsgbWVhc3VyZVRleHQoaXRlbS5uYW1lIHx8ICd1bmRlZmluZWQnLCBmb250U2l6ZSkgKyBvcHRzLmxlZ2VuZC5pdGVtR2FwO1xyXG4gICAgICBpZiAod2lkdGhDb3VudCArIGl0ZW1XaWR0aCA+IG9wdHMud2lkdGggLSBvcHRzLnBhZGRpbmdbMV0gLSBvcHRzLnBhZGRpbmdbM10pIHtcclxuICAgICAgICBsZWdlbmRMaXN0LnB1c2goY3VycmVudFJvdyk7XHJcbiAgICAgICAgd2lkdGhDb3VudEFyci5wdXNoKHdpZHRoQ291bnQgLSBvcHRzLmxlZ2VuZC5pdGVtR2FwKTtcclxuICAgICAgICB3aWR0aENvdW50ID0gaXRlbVdpZHRoO1xyXG4gICAgICAgIGN1cnJlbnRSb3cgPSBbaXRlbV07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgd2lkdGhDb3VudCArPSBpdGVtV2lkdGg7XHJcbiAgICAgICAgY3VycmVudFJvdy5wdXNoKGl0ZW0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoY3VycmVudFJvdy5sZW5ndGgpIHtcclxuICAgICAgbGVnZW5kTGlzdC5wdXNoKGN1cnJlbnRSb3cpO1xyXG4gICAgICB3aWR0aENvdW50QXJyLnB1c2god2lkdGhDb3VudCAtIG9wdHMubGVnZW5kLml0ZW1HYXApO1xyXG4gICAgICBsZWdlbmREYXRhLndpZHRoQXJyID0gd2lkdGhDb3VudEFycjtcclxuICAgICAgbGV0IGxlZ2VuZFdpZHRoID0gTWF0aC5tYXguYXBwbHkobnVsbCwgd2lkdGhDb3VudEFycik7XHJcbiAgICAgIHN3aXRjaCAob3B0cy5sZWdlbmQuZmxvYXQpIHtcclxuICAgICAgICBjYXNlICdsZWZ0JzpcclxuICAgICAgICAgIGxlZ2VuZERhdGEuYXJlYS5zdGFydC54ID0gb3B0cy5wYWRkaW5nWzNdO1xyXG4gICAgICAgICAgbGVnZW5kRGF0YS5hcmVhLmVuZC54ID0gb3B0cy5wYWRkaW5nWzNdICsgMiAqIHBhZGRpbmc7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdyaWdodCc6XHJcbiAgICAgICAgICBsZWdlbmREYXRhLmFyZWEuc3RhcnQueCA9IG9wdHMud2lkdGggLSBvcHRzLnBhZGRpbmdbMV0gLSBsZWdlbmRXaWR0aCAtIDIgKiBwYWRkaW5nO1xyXG4gICAgICAgICAgbGVnZW5kRGF0YS5hcmVhLmVuZC54ID0gb3B0cy53aWR0aCAtIG9wdHMucGFkZGluZ1sxXTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICBsZWdlbmREYXRhLmFyZWEuc3RhcnQueCA9IChvcHRzLndpZHRoIC0gbGVnZW5kV2lkdGgpIC8gMiAtIHBhZGRpbmc7XHJcbiAgICAgICAgICBsZWdlbmREYXRhLmFyZWEuZW5kLnggPSAob3B0cy53aWR0aCArIGxlZ2VuZFdpZHRoKSAvIDIgKyBwYWRkaW5nO1xyXG4gICAgICB9XHJcbiAgICAgIGxlZ2VuZERhdGEuYXJlYS53aWR0aCA9IGxlZ2VuZFdpZHRoICsgMiAqIHBhZGRpbmc7XHJcbiAgICAgIGxlZ2VuZERhdGEuYXJlYS53aG9sZVdpZHRoID0gbGVnZW5kV2lkdGggKyAyICogcGFkZGluZztcclxuICAgICAgbGVnZW5kRGF0YS5hcmVhLmhlaWdodCA9IGxlZ2VuZExpc3QubGVuZ3RoICogbGluZUhlaWdodCArIDIgKiBwYWRkaW5nO1xyXG4gICAgICBsZWdlbmREYXRhLmFyZWEud2hvbGVIZWlnaHQgPSBsZWdlbmRMaXN0Lmxlbmd0aCAqIGxpbmVIZWlnaHQgKyAyICogcGFkZGluZyArIDIgKiBtYXJnaW47XHJcbiAgICAgIGxlZ2VuZERhdGEucG9pbnRzID0gbGVnZW5kTGlzdDtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgbGV0IGxlbiA9IHNlcmllcy5sZW5ndGg7XHJcbiAgICBsZXQgbWF4SGVpZ2h0ID0gb3B0cy5oZWlnaHQgLSBvcHRzLnBhZGRpbmdbMF0gLSBvcHRzLnBhZGRpbmdbMl0gLSAyICogbWFyZ2luIC0gMiAqIHBhZGRpbmc7XHJcbiAgICBsZXQgbWF4TGVuZ3RoID0gTWF0aC5taW4oTWF0aC5mbG9vcihtYXhIZWlnaHQgLyBsaW5lSGVpZ2h0KSwgbGVuKTtcclxuICAgIGxlZ2VuZERhdGEuYXJlYS5oZWlnaHQgPSBtYXhMZW5ndGggKiBsaW5lSGVpZ2h0ICsgcGFkZGluZyAqIDI7XHJcbiAgICBsZWdlbmREYXRhLmFyZWEud2hvbGVIZWlnaHQgPSBtYXhMZW5ndGggKiBsaW5lSGVpZ2h0ICsgcGFkZGluZyAqIDI7XHJcbiAgICBzd2l0Y2ggKG9wdHMubGVnZW5kLmZsb2F0KSB7XHJcbiAgICAgIGNhc2UgJ3RvcCc6XHJcbiAgICAgICAgbGVnZW5kRGF0YS5hcmVhLnN0YXJ0LnkgPSBvcHRzLnBhZGRpbmdbMF0gKyBtYXJnaW47XHJcbiAgICAgICAgbGVnZW5kRGF0YS5hcmVhLmVuZC55ID0gb3B0cy5wYWRkaW5nWzBdICsgbWFyZ2luICsgbGVnZW5kRGF0YS5hcmVhLmhlaWdodDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnYm90dG9tJzpcclxuICAgICAgICBsZWdlbmREYXRhLmFyZWEuc3RhcnQueSA9IG9wdHMuaGVpZ2h0IC0gb3B0cy5wYWRkaW5nWzJdIC0gbWFyZ2luIC0gbGVnZW5kRGF0YS5hcmVhLmhlaWdodDtcclxuICAgICAgICBsZWdlbmREYXRhLmFyZWEuZW5kLnkgPSBvcHRzLmhlaWdodCAtIG9wdHMucGFkZGluZ1syXSAtIG1hcmdpbjtcclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICBsZWdlbmREYXRhLmFyZWEuc3RhcnQueSA9IChvcHRzLmhlaWdodCAtIGxlZ2VuZERhdGEuYXJlYS5oZWlnaHQpIC8gMjtcclxuICAgICAgICBsZWdlbmREYXRhLmFyZWEuZW5kLnkgPSAob3B0cy5oZWlnaHQgKyBsZWdlbmREYXRhLmFyZWEuaGVpZ2h0KSAvIDI7XHJcbiAgICB9XHJcbiAgICBsZXQgbGluZU51bSA9IGxlbiAlIG1heExlbmd0aCA9PT0gMCA/IGxlbiAvIG1heExlbmd0aCA6IE1hdGguZmxvb3IoKGxlbiAvIG1heExlbmd0aCkgKyAxKTtcclxuICAgIGxldCBjdXJyZW50Um93ID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVOdW07IGkrKykge1xyXG4gICAgICBsZXQgdGVtcCA9IHNlcmllcy5zbGljZShpICogbWF4TGVuZ3RoLCBpICogbWF4TGVuZ3RoICsgbWF4TGVuZ3RoKTtcclxuICAgICAgY3VycmVudFJvdy5wdXNoKHRlbXApO1xyXG4gICAgfVxyXG5cclxuICAgIGxlZ2VuZERhdGEucG9pbnRzID0gY3VycmVudFJvdztcclxuXHJcbiAgICBpZiAoY3VycmVudFJvdy5sZW5ndGgpIHtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50Um93Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgbGV0IGl0ZW0gPSBjdXJyZW50Um93W2ldO1xyXG4gICAgICAgIGxldCBtYXhXaWR0aCA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBpdGVtLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICBsZXQgaXRlbVdpZHRoID0gc2hhcGVXaWR0aCArIHNoYXBlUmlnaHQgKyBtZWFzdXJlVGV4dChpdGVtW2pdLm5hbWUgfHwgJ3VuZGVmaW5lZCcsIGZvbnRTaXplKSArIG9wdHMubGVnZW5kLml0ZW1HYXA7XHJcbiAgICAgICAgICBpZiAoaXRlbVdpZHRoID4gbWF4V2lkdGgpIHtcclxuICAgICAgICAgICAgbWF4V2lkdGggPSBpdGVtV2lkdGg7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxlZ2VuZERhdGEud2lkdGhBcnIucHVzaChtYXhXaWR0aCk7XHJcbiAgICAgICAgbGVnZW5kRGF0YS5oZWlnaHRBcnIucHVzaChpdGVtLmxlbmd0aCAqIGxpbmVIZWlnaHQgKyBwYWRkaW5nICogMik7XHJcbiAgICAgIH1cclxuICAgICAgbGV0IGxlZ2VuZFdpZHRoID0gMFxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlZ2VuZERhdGEud2lkdGhBcnIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsZWdlbmRXaWR0aCArPSBsZWdlbmREYXRhLndpZHRoQXJyW2ldO1xyXG4gICAgICB9XHJcbiAgICAgIGxlZ2VuZERhdGEuYXJlYS53aWR0aCA9IGxlZ2VuZFdpZHRoIC0gb3B0cy5sZWdlbmQuaXRlbUdhcCArIDIgKiBwYWRkaW5nO1xyXG4gICAgICBsZWdlbmREYXRhLmFyZWEud2hvbGVXaWR0aCA9IGxlZ2VuZERhdGEuYXJlYS53aWR0aCArIHBhZGRpbmc7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzd2l0Y2ggKG9wdHMubGVnZW5kLnBvc2l0aW9uKSB7XHJcbiAgICBjYXNlICd0b3AnOlxyXG4gICAgICBsZWdlbmREYXRhLmFyZWEuc3RhcnQueSA9IG9wdHMucGFkZGluZ1swXSArIG1hcmdpbjtcclxuICAgICAgbGVnZW5kRGF0YS5hcmVhLmVuZC55ID0gb3B0cy5wYWRkaW5nWzBdICsgbWFyZ2luICsgbGVnZW5kRGF0YS5hcmVhLmhlaWdodDtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdib3R0b20nOlxyXG4gICAgICBsZWdlbmREYXRhLmFyZWEuc3RhcnQueSA9IG9wdHMuaGVpZ2h0IC0gb3B0cy5wYWRkaW5nWzJdIC0gbGVnZW5kRGF0YS5hcmVhLmhlaWdodCAtIG1hcmdpbjtcclxuICAgICAgbGVnZW5kRGF0YS5hcmVhLmVuZC55ID0gb3B0cy5oZWlnaHQgLSBvcHRzLnBhZGRpbmdbMl0gLSBtYXJnaW47XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnbGVmdCc6XHJcbiAgICAgIGxlZ2VuZERhdGEuYXJlYS5zdGFydC54ID0gb3B0cy5wYWRkaW5nWzNdO1xyXG4gICAgICBsZWdlbmREYXRhLmFyZWEuZW5kLnggPSBvcHRzLnBhZGRpbmdbM10gKyBsZWdlbmREYXRhLmFyZWEud2lkdGg7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAncmlnaHQnOlxyXG4gICAgICBsZWdlbmREYXRhLmFyZWEuc3RhcnQueCA9IG9wdHMud2lkdGggLSBvcHRzLnBhZGRpbmdbMV0gLSBsZWdlbmREYXRhLmFyZWEud2lkdGg7XHJcbiAgICAgIGxlZ2VuZERhdGEuYXJlYS5lbmQueCA9IG9wdHMud2lkdGggLSBvcHRzLnBhZGRpbmdbMV07XHJcbiAgICAgIGJyZWFrO1xyXG4gIH1cclxuICBjaGFydERhdGEubGVnZW5kRGF0YSA9IGxlZ2VuZERhdGE7XHJcbiAgcmV0dXJuIGxlZ2VuZERhdGE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbENhdGVnb3JpZXNEYXRhKGNhdGVnb3JpZXMsIG9wdHMsIGNvbmZpZywgZWFjaFNwYWNpbmcpIHtcclxuICB2YXIgcmVzdWx0ID0ge1xyXG4gICAgYW5nbGU6IDAsXHJcbiAgICB4QXhpc0hlaWdodDogY29uZmlnLnhBeGlzSGVpZ2h0XHJcbiAgfTtcclxuICB2YXIgY2F0ZWdvcmllc1RleHRMZW50aCA9IGNhdGVnb3JpZXMubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgIHJldHVybiBtZWFzdXJlVGV4dChpdGVtLG9wdHMueEF4aXMuZm9udFNpemV8fGNvbmZpZy5mb250U2l6ZSk7XHJcbiAgfSk7XHJcbiAgdmFyIG1heFRleHRMZW5ndGggPSBNYXRoLm1heC5hcHBseSh0aGlzLCBjYXRlZ29yaWVzVGV4dExlbnRoKTtcclxuXHJcbiAgaWYgKG9wdHMueEF4aXMucm90YXRlTGFiZWwgPT0gdHJ1ZSAmJiBtYXhUZXh0TGVuZ3RoICsgMiAqIGNvbmZpZy54QXhpc1RleHRQYWRkaW5nID4gZWFjaFNwYWNpbmcpIHtcclxuICAgIHJlc3VsdC5hbmdsZSA9IDQ1ICogTWF0aC5QSSAvIDE4MDtcclxuICAgIHJlc3VsdC54QXhpc0hlaWdodCA9IDIgKiBjb25maWcueEF4aXNUZXh0UGFkZGluZyArIG1heFRleHRMZW5ndGggKiBNYXRoLnNpbihyZXN1bHQuYW5nbGUpO1xyXG4gIH1cclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRYQXhpc1RleHRMaXN0KHNlcmllcywgb3B0cywgY29uZmlnKSB7XHJcbiAgdmFyIGluZGV4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAtMTtcclxuICB2YXIgZGF0YSA9IGRhdGFDb21iaW5lKHNlcmllcyk7XHJcbiAgdmFyIHNvcnRlZCA9IFtdO1xyXG4gIC8vIHJlbW92ZSBudWxsIGZyb20gZGF0YVxyXG4gIGRhdGEgPSBkYXRhLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAvL3JldHVybiBpdGVtICE9PSBudWxsO1xyXG4gICAgaWYgKHR5cGVvZiBpdGVtID09PSAnb2JqZWN0JyAmJiBpdGVtICE9PSBudWxsKSB7XHJcbiAgICAgIGlmIChpdGVtLmNvbnN0cnVjdG9yLnRvU3RyaW5nKCkuaW5kZXhPZignQXJyYXknKT4tMSkge1xyXG4gICAgICAgIHJldHVybiBpdGVtICE9PSBudWxsO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBpdGVtLnZhbHVlICE9PSBudWxsO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gaXRlbSAhPT0gbnVsbDtcclxuICAgIH1cclxuICB9KTtcclxuICBkYXRhLm1hcChmdW5jdGlvbihpdGVtKSB7XHJcbiAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnKSB7XHJcbiAgICAgIGlmIChpdGVtLmNvbnN0cnVjdG9yLnRvU3RyaW5nKCkuaW5kZXhPZignQXJyYXknKT4tMSkge1xyXG5cdFx0XHRcdGlmKG9wdHMudHlwZT09J2NhbmRsZScpe1xyXG5cdFx0XHRcdFx0aXRlbS5tYXAoZnVuY3Rpb24oc3ViaXRlbSkge1xyXG5cdFx0XHRcdFx0ICBzb3J0ZWQucHVzaChzdWJpdGVtKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRzb3J0ZWQucHVzaChpdGVtWzBdKTtcclxuXHRcdFx0XHR9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc29ydGVkLnB1c2goaXRlbS52YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHNvcnRlZC5wdXNoKGl0ZW0pO1xyXG4gICAgfVxyXG4gIH0pXHJcblx0XHJcbiAgdmFyIG1pbkRhdGEgPSAwO1xyXG4gIHZhciBtYXhEYXRhID0gMDtcclxuICBpZiAoc29ydGVkLmxlbmd0aCA+IDApIHtcclxuICAgIG1pbkRhdGEgPSBNYXRoLm1pbi5hcHBseSh0aGlzLCBzb3J0ZWQpO1xyXG4gICAgbWF4RGF0YSA9IE1hdGgubWF4LmFwcGx5KHRoaXMsIHNvcnRlZCk7XHJcbiAgfVxyXG4gIC8v5Li65LqG5YW85a65djEuOS4w5LmL5YmN55qE6aG555uuXHJcbiAgaWYoaW5kZXg+LTEpe1xyXG4gICAgaWYgKHR5cGVvZiBvcHRzLnhBeGlzLmRhdGFbaW5kZXhdLm1pbiA9PT0gJ251bWJlcicpIHtcclxuICAgICAgbWluRGF0YSA9IE1hdGgubWluKG9wdHMueEF4aXMuZGF0YVtpbmRleF0ubWluLCBtaW5EYXRhKTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2Ygb3B0cy54QXhpcy5kYXRhW2luZGV4XS5tYXggPT09ICdudW1iZXInKSB7XHJcbiAgICAgIG1heERhdGEgPSBNYXRoLm1heChvcHRzLnhBeGlzLmRhdGFbaW5kZXhdLm1heCwgbWF4RGF0YSk7XHJcbiAgICB9XHJcbiAgfWVsc2V7XHJcbiAgICBpZiAodHlwZW9mIG9wdHMueEF4aXMubWluID09PSAnbnVtYmVyJykge1xyXG4gICAgICBtaW5EYXRhID0gTWF0aC5taW4ob3B0cy54QXhpcy5taW4sIG1pbkRhdGEpO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBvcHRzLnhBeGlzLm1heCA9PT0gJ251bWJlcicpIHtcclxuICAgICAgbWF4RGF0YSA9IE1hdGgubWF4KG9wdHMueEF4aXMubWF4LCBtYXhEYXRhKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcblxyXG4gIGlmIChtaW5EYXRhID09PSBtYXhEYXRhKSB7XHJcbiAgICB2YXIgcmFuZ2VTcGFuID0gbWF4RGF0YSB8fCAxMDtcclxuICAgIG1heERhdGEgKz0gcmFuZ2VTcGFuO1xyXG4gIH1cclxuXHJcbiAgLy92YXIgZGF0YVJhbmdlID0gZ2V0RGF0YVJhbmdlKG1pbkRhdGEsIG1heERhdGEpO1xyXG4gIHZhciBtaW5SYW5nZSA9IG1pbkRhdGE7XHJcbiAgdmFyIG1heFJhbmdlID0gbWF4RGF0YTtcclxuXHJcbiAgdmFyIHJhbmdlID0gW107XHJcbiAgdmFyIGVhY2hSYW5nZSA9IChtYXhSYW5nZSAtIG1pblJhbmdlKSAvIG9wdHMueEF4aXMuc3BsaXROdW1iZXI7XHJcblxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDw9IG9wdHMueEF4aXMuc3BsaXROdW1iZXI7IGkrKykge1xyXG4gICAgcmFuZ2UucHVzaChtaW5SYW5nZSArIGVhY2hSYW5nZSAqIGkpO1xyXG4gIH1cclxuICByZXR1cm4gcmFuZ2U7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbFhBeGlzRGF0YShzZXJpZXMsIG9wdHMsIGNvbmZpZyl7XHJcbiAgICB2YXIgcmVzdWx0ID0ge1xyXG4gICAgICAgIGFuZ2xlOiAwLFxyXG4gICAgICAgIHhBeGlzSGVpZ2h0OiBjb25maWcueEF4aXNIZWlnaHRcclxuICAgIH07XHJcblxyXG4gICAgcmVzdWx0LnJhbmdlcyA9IGdldFhBeGlzVGV4dExpc3Qoc2VyaWVzLCBvcHRzLCBjb25maWcpO1xyXG4gICAgcmVzdWx0LnJhbmdlc0Zvcm1hdCA9IHJlc3VsdC5yYW5nZXMubWFwKGZ1bmN0aW9uKGl0ZW0pe1xyXG4gICAgICAgIGl0ZW0gPSBvcHRzLnhBeGlzLmZvcm1hdD8gb3B0cy54QXhpcy5mb3JtYXQoaXRlbSk6dXRpbC50b0ZpeGVkKGl0ZW0sIDIpO1xyXG4gICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgfSk7XHJcblx0XHRcclxuICAgIHZhciB4QXhpc1NjYWxlVmFsdWVzID0gcmVzdWx0LnJhbmdlcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAvLyDlpoLmnpzliLvluqblgLzmmK/mta7ngrnmlbAs5YiZ5L+d55WZ5Lik5L2N5bCP5pWwXHJcbiAgICAgICAgaXRlbSA9IHV0aWwudG9GaXhlZChpdGVtLCAyKTtcclxuICAgICAgICAvLyDoi6XmnInoh6rlrprkuYnmoLzlvI/liJnosIPnlKjoh6rlrprkuYnnmoTmoLzlvI/ljJblh73mlbBcclxuICAgICAgICBpdGVtID0gb3B0cy54QXhpcy5mb3JtYXQgPyBvcHRzLnhBeGlzLmZvcm1hdChOdW1iZXIoaXRlbSkpIDogaXRlbTtcclxuICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJlc3VsdCA9IE9iamVjdC5hc3NpZ24ocmVzdWx0LGdldFhBeGlzUG9pbnRzKHhBeGlzU2NhbGVWYWx1ZXMsIG9wdHMsIGNvbmZpZykpO1xyXG4gICAgLy8g6K6h566XWOi9tOWIu+W6pueahOWxnuaAp+itrOWmguavj+S4quWIu+W6pueahOmXtOmalCzliLvluqbnmoTotbflp4vngrlcXOe7k+adn+eCueS7peWPiuaAu+mVv1xyXG4gICAgdmFyIGVhY2hTcGFjaW5nID0gcmVzdWx0LmVhY2hTcGFjaW5nO1xyXG5cclxuICAgIHZhciB0ZXh0TGVuZ3RoID0geEF4aXNTY2FsZVZhbHVlcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICByZXR1cm4gbWVhc3VyZVRleHQoaXRlbSk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8gZ2V0IG1heCBsZW5ndGggb2YgY2F0ZWdvcmllcyB0ZXh0XHJcbiAgICB2YXIgbWF4VGV4dExlbmd0aCA9IE1hdGgubWF4LmFwcGx5KHRoaXMsIHRleHRMZW5ndGgpO1xyXG5cclxuICAgIC8vIOWmguaenOWIu+W6puWAvOaWh+acrOWGheWuuei/h+mVvyzliJnlsIblhbbpgIbml7bpkojml4vovaw0NcKwXHJcbiAgICBpZiAobWF4VGV4dExlbmd0aCArIDIgKiBjb25maWcueEF4aXNUZXh0UGFkZGluZyA+IGVhY2hTcGFjaW5nKSB7XHJcbiAgICAgICAgcmVzdWx0LmFuZ2xlID0gNDUgKiBNYXRoLlBJIC8gMTgwO1xyXG4gICAgICAgIHJlc3VsdC54QXhpc0hlaWdodCA9IDIgKiBjb25maWcueEF4aXNUZXh0UGFkZGluZyArIG1heFRleHRMZW5ndGggKiBNYXRoLnNpbihyZXN1bHQuYW5nbGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcHRzLnhBeGlzLmRpc2FibGVkID09PSB0cnVlKSB7XHJcbiAgICAgICAgcmVzdWx0LnhBeGlzSGVpZ2h0ID0gMDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRSYWRhckRhdGFQb2ludHMoYW5nbGVMaXN0LCBjZW50ZXIsIHJhZGl1cywgc2VyaWVzLCBvcHRzKSB7XHJcbiAgdmFyIHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IDE7XHJcblxyXG4gIHZhciByYWRhck9wdGlvbiA9IG9wdHMuZXh0cmEucmFkYXIgfHwge307XHJcbiAgcmFkYXJPcHRpb24ubWF4ID0gcmFkYXJPcHRpb24ubWF4IHx8IDA7XHJcbiAgdmFyIG1heERhdGEgPSBNYXRoLm1heChyYWRhck9wdGlvbi5tYXgsIE1hdGgubWF4LmFwcGx5KG51bGwsIGRhdGFDb21iaW5lKHNlcmllcykpKTtcclxuXHJcbiAgdmFyIGRhdGEgPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgbGV0IGVhY2ggPSBzZXJpZXNbaV07XHJcbiAgICBsZXQgbGlzdEl0ZW0gPSB7fTtcclxuICAgIGxpc3RJdGVtLmNvbG9yID0gZWFjaC5jb2xvcjtcclxuXHRcdGxpc3RJdGVtLmxlZ2VuZFNoYXBlID0gZWFjaC5sZWdlbmRTaGFwZTtcclxuXHRcdGxpc3RJdGVtLnBvaW50U2hhcGUgPSBlYWNoLnBvaW50U2hhcGU7XHJcbiAgICBsaXN0SXRlbS5kYXRhID0gW107XHJcbiAgICBlYWNoLmRhdGEuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgICBsZXQgdG1wID0ge307XHJcbiAgICAgIHRtcC5hbmdsZSA9IGFuZ2xlTGlzdFtpbmRleF07XHJcblxyXG4gICAgICB0bXAucHJvcG9ydGlvbiA9IGl0ZW0gLyBtYXhEYXRhO1xyXG4gICAgICB0bXAucG9zaXRpb24gPSBjb252ZXJ0Q29vcmRpbmF0ZU9yaWdpbihyYWRpdXMgKiB0bXAucHJvcG9ydGlvbiAqIHByb2Nlc3MgKiBNYXRoLmNvcyh0bXAuYW5nbGUpLCByYWRpdXMgKiB0bXAucHJvcG9ydGlvbiAqXHJcbiAgICAgICAgcHJvY2VzcyAqIE1hdGguc2luKHRtcC5hbmdsZSksIGNlbnRlcik7XHJcbiAgICAgIGxpc3RJdGVtLmRhdGEucHVzaCh0bXApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZGF0YS5wdXNoKGxpc3RJdGVtKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBkYXRhO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRQaWVEYXRhUG9pbnRzKHNlcmllcywgcmFkaXVzKSB7XHJcbiAgdmFyIHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDE7XHJcblxyXG4gIHZhciBjb3VudCA9IDA7XHJcbiAgdmFyIF9zdGFydF8gPSAwO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VyaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBsZXQgaXRlbSA9IHNlcmllc1tpXTtcclxuICAgIGl0ZW0uZGF0YSA9IGl0ZW0uZGF0YSA9PT0gbnVsbCA/IDAgOiBpdGVtLmRhdGE7XHJcbiAgICBjb3VudCArPSBpdGVtLmRhdGE7XHJcbiAgfVxyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VyaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBsZXQgaXRlbSA9IHNlcmllc1tpXTtcclxuICAgIGl0ZW0uZGF0YSA9IGl0ZW0uZGF0YSA9PT0gbnVsbCA/IDAgOiBpdGVtLmRhdGE7XHJcbiAgICBpZiAoY291bnQgPT09IDApIHtcclxuICAgICAgaXRlbS5fcHJvcG9ydGlvbl8gPSAxIC8gc2VyaWVzLmxlbmd0aCAqIHByb2Nlc3M7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpdGVtLl9wcm9wb3J0aW9uXyA9IGl0ZW0uZGF0YSAvIGNvdW50ICogcHJvY2VzcztcclxuICAgIH1cclxuICAgIGl0ZW0uX3JhZGl1c18gPSByYWRpdXM7XHJcbiAgfVxyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VyaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBsZXQgaXRlbSA9IHNlcmllc1tpXTtcclxuICAgIGl0ZW0uX3N0YXJ0XyA9IF9zdGFydF87XHJcbiAgICBfc3RhcnRfICs9IDIgKiBpdGVtLl9wcm9wb3J0aW9uXyAqIE1hdGguUEk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc2VyaWVzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRGdW5uZWxEYXRhUG9pbnRzKHNlcmllcywgcmFkaXVzKSB7XHJcbiAgdmFyIHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDE7XHJcbiAgc2VyaWVzID0gc2VyaWVzLnNvcnQoZnVuY3Rpb24oYSxiKXtyZXR1cm4gcGFyc2VJbnQoYi5kYXRhKS1wYXJzZUludChhLmRhdGEpO30pO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VyaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBzZXJpZXNbaV0ucmFkaXVzID0gc2VyaWVzW2ldLmRhdGEvc2VyaWVzWzBdLmRhdGEqcmFkaXVzKnByb2Nlc3M7XHJcbiAgICBzZXJpZXNbaV0uX3Byb3BvcnRpb25fID0gc2VyaWVzW2ldLmRhdGEvc2VyaWVzWzBdLmRhdGE7XHJcbiAgfVxyXG4gIHJldHVybiBzZXJpZXMucmV2ZXJzZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRSb3NlRGF0YVBvaW50cyhzZXJpZXMsIHR5cGUsIG1pblJhZGl1cywgcmFkaXVzKSB7XHJcbiAgdmFyIHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IDE7XHJcbiAgdmFyIGNvdW50ID0gMDtcclxuICB2YXIgX3N0YXJ0XyA9IDA7XHJcblxyXG4gIHZhciBkYXRhQXJyID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgIGxldCBpdGVtID0gc2VyaWVzW2ldO1xyXG4gICAgaXRlbS5kYXRhID0gaXRlbS5kYXRhID09PSBudWxsID8gMCA6IGl0ZW0uZGF0YTtcclxuICAgIGNvdW50ICs9IGl0ZW0uZGF0YTtcclxuICAgIGRhdGFBcnIucHVzaChpdGVtLmRhdGEpO1xyXG4gIH1cclxuICBcclxuICB2YXIgbWluRGF0YSA9IE1hdGgubWluLmFwcGx5KG51bGwsIGRhdGFBcnIpO1xyXG4gIHZhciBtYXhEYXRhID0gTWF0aC5tYXguYXBwbHkobnVsbCwgZGF0YUFycik7XHJcbiAgdmFyIHJhZGl1c0xlbmd0aCA9IHJhZGl1cyAtIG1pblJhZGl1cztcclxuICBcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgbGV0IGl0ZW0gPSBzZXJpZXNbaV07XHJcbiAgICBpdGVtLmRhdGEgPSBpdGVtLmRhdGEgPT09IG51bGwgPyAwIDogaXRlbS5kYXRhO1xyXG4gICAgaWYgKGNvdW50ID09PSAwIHx8IHR5cGUgPT0gJ2FyZWEnKSB7XHJcbiAgICAgIGl0ZW0uX3Byb3BvcnRpb25fID0gaXRlbS5kYXRhIC8gY291bnQgKiBwcm9jZXNzO1xyXG4gICAgICBpdGVtLl9yb3NlX3Byb3BvcnRpb25fID0gMSAvIHNlcmllcy5sZW5ndGggKiBwcm9jZXNzO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaXRlbS5fcHJvcG9ydGlvbl8gPSBpdGVtLmRhdGEgLyBjb3VudCAqIHByb2Nlc3M7XHJcbiAgICAgIGl0ZW0uX3Jvc2VfcHJvcG9ydGlvbl8gPSBpdGVtLmRhdGEgLyBjb3VudCAqIHByb2Nlc3M7XHJcbiAgICB9XHJcbiAgICBpdGVtLl9yYWRpdXNfID0gbWluUmFkaXVzICsgcmFkaXVzTGVuZ3RoICogKChpdGVtLmRhdGEgLSBtaW5EYXRhKSAvIChtYXhEYXRhIC0gbWluRGF0YSkpO1xyXG4gIH1cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgbGV0IGl0ZW0gPSBzZXJpZXNbaV07XHJcbiAgICBpdGVtLl9zdGFydF8gPSBfc3RhcnRfO1xyXG4gICAgX3N0YXJ0XyArPSAyICogaXRlbS5fcm9zZV9wcm9wb3J0aW9uXyAqIE1hdGguUEk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc2VyaWVzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRBcmNiYXJEYXRhUG9pbnRzKHNlcmllcywgYXJjYmFyT3B0aW9uKSB7XHJcbiAgdmFyIHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDE7XHJcbiAgaWYgKHByb2Nlc3MgPT0gMSkge1xyXG4gICAgcHJvY2VzcyA9IDAuOTk5OTk5O1xyXG4gIH1cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgbGV0IGl0ZW0gPSBzZXJpZXNbaV07XHJcbiAgICBpdGVtLmRhdGEgPSBpdGVtLmRhdGEgPT09IG51bGwgPyAwIDogaXRlbS5kYXRhO1xyXG4gICAgbGV0IHRvdGFsQW5nbGU7XHJcbiAgICBpZiAoYXJjYmFyT3B0aW9uLnR5cGUgPT0gJ2NpcmNsZScpIHtcclxuICAgICAgdG90YWxBbmdsZSA9IDI7XHJcbiAgICB9IGVsc2Uge1xyXG5cdFx0XHRpZiAoYXJjYmFyT3B0aW9uLmVuZEFuZ2xlIDwgYXJjYmFyT3B0aW9uLnN0YXJ0QW5nbGUpIHtcclxuXHRcdFx0ICB0b3RhbEFuZ2xlID0gMiArIGFyY2Jhck9wdGlvbi5lbmRBbmdsZSAtIGFyY2Jhck9wdGlvbi5zdGFydEFuZ2xlO1xyXG5cdFx0XHR9IGVsc2V7XHJcblx0XHRcdCAgdG90YWxBbmdsZSA9IGFyY2Jhck9wdGlvbi5zdGFydEFuZ2xlIC0gYXJjYmFyT3B0aW9uLmVuZEFuZ2xlO1xyXG5cdFx0XHR9XHJcbiAgICB9XHJcbiAgICBpdGVtLl9wcm9wb3J0aW9uXyA9IHRvdGFsQW5nbGUgKiBpdGVtLmRhdGEgKiBwcm9jZXNzICsgYXJjYmFyT3B0aW9uLnN0YXJ0QW5nbGU7XHJcbiAgICBpZiAoaXRlbS5fcHJvcG9ydGlvbl8gPj0gMikge1xyXG4gICAgICBpdGVtLl9wcm9wb3J0aW9uXyA9IGl0ZW0uX3Byb3BvcnRpb25fICUgMjtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHNlcmllcztcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0R2F1Z2VBeGlzUG9pbnRzKGNhdGVnb3JpZXMsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlKSB7XHJcbiAgbGV0IHRvdGFsQW5nbGUgPSBzdGFydEFuZ2xlIC0gZW5kQW5nbGUgKyAxO1xyXG4gIGxldCB0ZW1wU3RhcnRBbmdsZSA9IHN0YXJ0QW5nbGU7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYXRlZ29yaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjYXRlZ29yaWVzW2ldLnZhbHVlID0gY2F0ZWdvcmllc1tpXS52YWx1ZSA9PT0gbnVsbCA/IDAgOiBjYXRlZ29yaWVzW2ldLnZhbHVlO1xyXG4gICAgY2F0ZWdvcmllc1tpXS5fc3RhcnRBbmdsZV8gPSB0ZW1wU3RhcnRBbmdsZTtcclxuICAgIGNhdGVnb3JpZXNbaV0uX2VuZEFuZ2xlXyA9IHRvdGFsQW5nbGUgKiBjYXRlZ29yaWVzW2ldLnZhbHVlICsgc3RhcnRBbmdsZTtcclxuICAgIGlmIChjYXRlZ29yaWVzW2ldLl9lbmRBbmdsZV8gPj0gMikge1xyXG4gICAgICBjYXRlZ29yaWVzW2ldLl9lbmRBbmdsZV8gPSBjYXRlZ29yaWVzW2ldLl9lbmRBbmdsZV8gJSAyO1xyXG4gICAgfVxyXG4gICAgdGVtcFN0YXJ0QW5nbGUgPSBjYXRlZ29yaWVzW2ldLl9lbmRBbmdsZV87XHJcbiAgfVxyXG4gIHJldHVybiBjYXRlZ29yaWVzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRHYXVnZURhdGFQb2ludHMoc2VyaWVzLCBjYXRlZ29yaWVzLCBnYXVnZU9wdGlvbikge1xyXG4gIGxldCBwcm9jZXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAxO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VyaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBsZXQgaXRlbSA9IHNlcmllc1tpXTtcclxuICAgIGl0ZW0uZGF0YSA9IGl0ZW0uZGF0YSA9PT0gbnVsbCA/IDAgOiBpdGVtLmRhdGE7XHJcbiAgICBpZiAoZ2F1Z2VPcHRpb24ucG9pbnRlci5jb2xvciA9PSAnYXV0bycpIHtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYXRlZ29yaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGl0ZW0uZGF0YSA8PSBjYXRlZ29yaWVzW2ldLnZhbHVlKSB7XHJcbiAgICAgICAgICBpdGVtLmNvbG9yID0gY2F0ZWdvcmllc1tpXS5jb2xvcjtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaXRlbS5jb2xvciA9IGdhdWdlT3B0aW9uLnBvaW50ZXIuY29sb3I7XHJcbiAgICB9XHJcbiAgICBsZXQgdG90YWxBbmdsZSA9IGdhdWdlT3B0aW9uLnN0YXJ0QW5nbGUgLSBnYXVnZU9wdGlvbi5lbmRBbmdsZSArIDE7XHJcbiAgICBpdGVtLl9lbmRBbmdsZV8gPSB0b3RhbEFuZ2xlICogaXRlbS5kYXRhICsgZ2F1Z2VPcHRpb24uc3RhcnRBbmdsZTtcclxuICAgIGl0ZW0uX29sZEFuZ2xlXyA9IGdhdWdlT3B0aW9uLm9sZEFuZ2xlO1xyXG4gICAgaWYgKGdhdWdlT3B0aW9uLm9sZEFuZ2xlIDwgZ2F1Z2VPcHRpb24uZW5kQW5nbGUpIHtcclxuICAgICAgaXRlbS5fb2xkQW5nbGVfICs9IDI7XHJcbiAgICB9XHJcbiAgICBpZiAoaXRlbS5kYXRhID49IGdhdWdlT3B0aW9uLm9sZERhdGEpIHtcclxuICAgICAgaXRlbS5fcHJvcG9ydGlvbl8gPSAoaXRlbS5fZW5kQW5nbGVfIC0gaXRlbS5fb2xkQW5nbGVfKSAqIHByb2Nlc3MgKyBnYXVnZU9wdGlvbi5vbGRBbmdsZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGl0ZW0uX3Byb3BvcnRpb25fID0gaXRlbS5fb2xkQW5nbGVfIC0gKGl0ZW0uX29sZEFuZ2xlXyAtIGl0ZW0uX2VuZEFuZ2xlXykgKiBwcm9jZXNzO1xyXG4gICAgfVxyXG4gICAgaWYgKGl0ZW0uX3Byb3BvcnRpb25fID49IDIpIHtcclxuICAgICAgaXRlbS5fcHJvcG9ydGlvbl8gPSBpdGVtLl9wcm9wb3J0aW9uXyAlIDI7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBzZXJpZXM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFBpZVRleHRNYXhMZW5ndGgoc2VyaWVzKSB7XHJcbiAgc2VyaWVzID0gZ2V0UGllRGF0YVBvaW50cyhzZXJpZXMpO1xyXG4gIGxldCBtYXhMZW5ndGggPSAwO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VyaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBsZXQgaXRlbSA9IHNlcmllc1tpXTtcclxuICAgIGxldCB0ZXh0ID0gaXRlbS5mb3JtYXQgPyBpdGVtLmZvcm1hdCgraXRlbS5fcHJvcG9ydGlvbl8udG9GaXhlZCgyKSkgOiB1dGlsLnRvRml4ZWQoaXRlbS5fcHJvcG9ydGlvbl8gKiAxMDApICsgJyUnO1xyXG4gICAgbWF4TGVuZ3RoID0gTWF0aC5tYXgobWF4TGVuZ3RoLCBtZWFzdXJlVGV4dCh0ZXh0KSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gbWF4TGVuZ3RoO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaXhDb2x1bWVEYXRhKHBvaW50cywgZWFjaFNwYWNpbmcsIGNvbHVtbkxlbiwgaW5kZXgsIGNvbmZpZywgb3B0cykge1xyXG4gIHJldHVybiBwb2ludHMubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgIGlmIChpdGVtID09PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgaXRlbS53aWR0aCA9IE1hdGguY2VpbCgoZWFjaFNwYWNpbmcgLSAyICogY29uZmlnLmNvbHVtZVBhZGRpbmcpIC8gY29sdW1uTGVuKTtcclxuXHJcbiAgICBpZiAob3B0cy5leHRyYS5jb2x1bW4gJiYgb3B0cy5leHRyYS5jb2x1bW4ud2lkdGggJiYgK29wdHMuZXh0cmEuY29sdW1uLndpZHRoID4gMCkge1xyXG4gICAgICBpdGVtLndpZHRoID0gTWF0aC5taW4oaXRlbS53aWR0aCwgK29wdHMuZXh0cmEuY29sdW1uLndpZHRoKTtcclxuICAgIH1cclxuICAgIGlmIChpdGVtLndpZHRoIDw9IDApIHtcclxuICAgICAgaXRlbS53aWR0aCA9IDE7XHJcbiAgICB9XHJcbiAgICBpdGVtLnggKz0gKGluZGV4ICsgMC41IC0gY29sdW1uTGVuIC8gMikgKiBpdGVtLndpZHRoO1xyXG4gICAgcmV0dXJuIGl0ZW07XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpeENvbHVtZU1ldGVyRGF0YShwb2ludHMsIGVhY2hTcGFjaW5nLCBjb2x1bW5MZW4sIGluZGV4LCBjb25maWcsIG9wdHMsIGJvcmRlcikge1xyXG4gIHJldHVybiBwb2ludHMubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgIGlmIChpdGVtID09PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgaXRlbS53aWR0aCA9IE1hdGguY2VpbCgoZWFjaFNwYWNpbmcgLSAyICogY29uZmlnLmNvbHVtZVBhZGRpbmcpIC8gMik7XHJcblxyXG4gICAgaWYgKG9wdHMuZXh0cmEuY29sdW1uICYmIG9wdHMuZXh0cmEuY29sdW1uLndpZHRoICYmICtvcHRzLmV4dHJhLmNvbHVtbi53aWR0aCA+IDApIHtcclxuICAgICAgaXRlbS53aWR0aCA9IE1hdGgubWluKGl0ZW0ud2lkdGgsICtvcHRzLmV4dHJhLmNvbHVtbi53aWR0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGluZGV4ID4gMCkge1xyXG4gICAgICBpdGVtLndpZHRoIC09IDIgKiBib3JkZXI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaXRlbTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZml4Q29sdW1lU3RhY2tEYXRhKHBvaW50cywgZWFjaFNwYWNpbmcsIGNvbHVtbkxlbiwgaW5kZXgsIGNvbmZpZywgb3B0cywgc2VyaWVzKSB7XHJcblxyXG4gIHJldHVybiBwb2ludHMubWFwKGZ1bmN0aW9uKGl0ZW0sIGluZGV4bikge1xyXG5cclxuICAgIGlmIChpdGVtID09PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgaXRlbS53aWR0aCA9IE1hdGguY2VpbCgoZWFjaFNwYWNpbmcgLSAyICogY29uZmlnLmNvbHVtZVBhZGRpbmcpIC8gMik7XHJcblxyXG4gICAgaWYgKG9wdHMuZXh0cmEuY29sdW1uICYmIG9wdHMuZXh0cmEuY29sdW1uLndpZHRoICYmICtvcHRzLmV4dHJhLmNvbHVtbi53aWR0aCA+IDApIHtcclxuICAgICAgaXRlbS53aWR0aCA9IE1hdGgubWluKGl0ZW0ud2lkdGgsICtvcHRzLmV4dHJhLmNvbHVtbi53aWR0aCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaXRlbTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0WEF4aXNQb2ludHMoY2F0ZWdvcmllcywgb3B0cywgY29uZmlnKSB7XHJcbiAgdmFyIHNwYWNpbmdWYWxpZCA9IG9wdHMud2lkdGggLSBvcHRzLmFyZWFbMV0gLSBvcHRzLmFyZWFbM107XHJcbiAgdmFyIGRhdGFDb3VudCA9IG9wdHMuZW5hYmxlU2Nyb2xsID8gTWF0aC5taW4ob3B0cy54QXhpcy5pdGVtQ291bnQsIGNhdGVnb3JpZXMubGVuZ3RoKSA6IGNhdGVnb3JpZXMubGVuZ3RoO1xyXG4gIGlmKChvcHRzLnR5cGU9PSdsaW5lJyB8fCBvcHRzLnR5cGU9PSdhcmVhJykgJiYgZGF0YUNvdW50PjEgJiYgb3B0cy54QXhpcy5ib3VuZGFyeUdhcD09J2p1c3RpZnknKXtcclxuICAgIGRhdGFDb3VudCAtPTE7XHJcbiAgfVxyXG4gIHZhciBlYWNoU3BhY2luZyA9IHNwYWNpbmdWYWxpZCAvIGRhdGFDb3VudDtcclxuXHJcbiAgdmFyIHhBeGlzUG9pbnRzID0gW107XHJcbiAgdmFyIHN0YXJ0WCA9IG9wdHMuYXJlYVszXTtcclxuICB2YXIgZW5kWCA9IG9wdHMud2lkdGggLSBvcHRzLmFyZWFbMV07XHJcbiAgY2F0ZWdvcmllcy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICB4QXhpc1BvaW50cy5wdXNoKHN0YXJ0WCArIGluZGV4ICogZWFjaFNwYWNpbmcpO1xyXG4gIH0pO1xyXG4gIGlmKG9wdHMueEF4aXMuYm91bmRhcnlHYXAgIT09J2p1c3RpZnknKXtcclxuICAgIGlmIChvcHRzLmVuYWJsZVNjcm9sbCA9PT0gdHJ1ZSkge1xyXG4gICAgICB4QXhpc1BvaW50cy5wdXNoKHN0YXJ0WCArIGNhdGVnb3JpZXMubGVuZ3RoICogZWFjaFNwYWNpbmcpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgeEF4aXNQb2ludHMucHVzaChlbmRYKTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHtcclxuICAgIHhBeGlzUG9pbnRzOiB4QXhpc1BvaW50cyxcclxuICAgIHN0YXJ0WDogc3RhcnRYLFxyXG4gICAgZW5kWDogZW5kWCxcclxuICAgIGVhY2hTcGFjaW5nOiBlYWNoU3BhY2luZ1xyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldENhbmRsZURhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZykge1xyXG4gIHZhciBwcm9jZXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDcgJiYgYXJndW1lbnRzWzddICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbN10gOiAxO1xyXG4gIHZhciBwb2ludHMgPSBbXTtcclxuICB2YXIgdmFsaWRIZWlnaHQgPSBvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVswXSAtIG9wdHMuYXJlYVsyXTtcclxuICBkYXRhLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgIGlmIChpdGVtID09PSBudWxsKSB7XHJcbiAgICAgIHBvaW50cy5wdXNoKG51bGwpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFyIGNQb2ludHMgPSBbXTtcclxuICAgICAgaXRlbS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW1zLCBpbmRleHMpIHtcclxuICAgICAgICB2YXIgcG9pbnQgPSB7fTtcclxuICAgICAgICBwb2ludC54ID0geEF4aXNQb2ludHNbaW5kZXhdICsgTWF0aC5yb3VuZChlYWNoU3BhY2luZyAvIDIpO1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IGl0ZW1zLnZhbHVlIHx8IGl0ZW1zO1xyXG4gICAgICAgIHZhciBoZWlnaHQgPSB2YWxpZEhlaWdodCAqICh2YWx1ZSAtIG1pblJhbmdlKSAvIChtYXhSYW5nZSAtIG1pblJhbmdlKTtcclxuICAgICAgICBoZWlnaHQgKj0gcHJvY2VzcztcclxuICAgICAgICBwb2ludC55ID0gb3B0cy5oZWlnaHQgLSBNYXRoLnJvdW5kKGhlaWdodCkgLSBvcHRzLmFyZWFbMl07XHJcbiAgICAgICAgY1BvaW50cy5wdXNoKHBvaW50KTtcclxuICAgICAgfSk7XHJcbiAgICAgIHBvaW50cy5wdXNoKGNQb2ludHMpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gcG9pbnRzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXREYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcpIHtcclxuICB2YXIgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA3ICYmIGFyZ3VtZW50c1s3XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzddIDogMTtcclxuICB2YXIgYm91bmRhcnlHYXA9J2NlbnRlcic7XHJcbiAgaWYgKG9wdHMudHlwZSA9PSAnbGluZSd8fG9wdHMudHlwZSA9PSAnYXJlYScpe1xyXG4gICAgYm91bmRhcnlHYXA9b3B0cy54QXhpcy5ib3VuZGFyeUdhcDtcclxuICB9XHJcbiAgdmFyIHBvaW50cyA9IFtdO1xyXG4gIHZhciB2YWxpZEhlaWdodCA9IG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzBdIC0gb3B0cy5hcmVhWzJdO1xyXG5cdHZhciB2YWxpZFdpZHRoID0gb3B0cy53aWR0aCAtIG9wdHMuYXJlYVsxXSAtIG9wdHMuYXJlYVszXTtcclxuICBkYXRhLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgIGlmIChpdGVtID09PSBudWxsKSB7XHJcbiAgICAgIHBvaW50cy5wdXNoKG51bGwpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFyIHBvaW50ID0ge307XHJcbiAgICAgIHBvaW50LmNvbG9yID0gaXRlbS5jb2xvcjtcclxuICAgICAgcG9pbnQueCA9IHhBeGlzUG9pbnRzW2luZGV4XTtcclxuICAgICAgdmFyIHZhbHVlID0gaXRlbTtcclxuICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSAnb2JqZWN0JyAmJiBpdGVtICE9PSBudWxsKSB7XHJcblx0XHRcdFx0aWYgKGl0ZW0uY29uc3RydWN0b3IudG9TdHJpbmcoKS5pbmRleE9mKCdBcnJheScpPi0xKSB7XHJcblx0XHRcdFx0XHRsZXQgeHJhbmdlcyx4bWluUmFuZ2UseG1heFJhbmdlO1xyXG5cdFx0XHRcdFx0eHJhbmdlcyA9IFtdLmNvbmNhdChvcHRzLmNoYXJ0RGF0YS54QXhpc0RhdGEucmFuZ2VzKTtcclxuXHRcdFx0XHRcdHhtaW5SYW5nZSA9IHhyYW5nZXMuc2hpZnQoKTtcclxuXHRcdFx0XHRcdHhtYXhSYW5nZSA9IHhyYW5nZXMucG9wKCk7XHJcblx0XHRcdFx0ICB2YWx1ZSA9IGl0ZW1bMV07XHJcblx0XHRcdFx0XHRwb2ludC54ID0gb3B0cy5hcmVhWzNdKyB2YWxpZFdpZHRoICogKGl0ZW1bMF0gLSB4bWluUmFuZ2UpIC8gKHhtYXhSYW5nZSAtIHhtaW5SYW5nZSk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQgIHZhbHVlID0gaXRlbS52YWx1ZTtcclxuXHRcdFx0XHR9XHJcbiAgICAgIH1cclxuXHRcdFx0aWYoYm91bmRhcnlHYXA9PSdjZW50ZXInKXtcclxuXHRcdFx0ICBwb2ludC54ICs9IE1hdGgucm91bmQoZWFjaFNwYWNpbmcgLyAyKTtcclxuXHRcdFx0fVxyXG4gICAgICB2YXIgaGVpZ2h0ID0gdmFsaWRIZWlnaHQgKiAodmFsdWUgLSBtaW5SYW5nZSkgLyAobWF4UmFuZ2UgLSBtaW5SYW5nZSk7XHJcbiAgICAgIGhlaWdodCAqPSBwcm9jZXNzO1xyXG4gICAgICBwb2ludC55ID0gb3B0cy5oZWlnaHQgLSBNYXRoLnJvdW5kKGhlaWdodCkgLSBvcHRzLmFyZWFbMl07XHJcbiAgICAgIHBvaW50cy5wdXNoKHBvaW50KTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHBvaW50cztcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0U3RhY2tEYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHNlcmllc0luZGV4LCBzdGFja1Nlcmllcykge1xyXG4gIHZhciBwcm9jZXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDkgJiYgYXJndW1lbnRzWzldICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbOV0gOiAxO1xyXG4gIHZhciBwb2ludHMgPSBbXTtcclxuICB2YXIgdmFsaWRIZWlnaHQgPSBvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVswXSAtIG9wdHMuYXJlYVsyXTtcclxuXHJcbiAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICBpZiAoaXRlbSA9PT0gbnVsbCkge1xyXG4gICAgICBwb2ludHMucHVzaChudWxsKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhciBwb2ludCA9IHt9O1xyXG4gICAgICBwb2ludC5jb2xvciA9IGl0ZW0uY29sb3I7XHJcbiAgICAgIHBvaW50LnggPSB4QXhpc1BvaW50c1tpbmRleF0gKyBNYXRoLnJvdW5kKGVhY2hTcGFjaW5nIC8gMik7XHJcblxyXG4gICAgICBpZiAoc2VyaWVzSW5kZXggPiAwKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBzZXJpZXNJbmRleDsgaSsrKSB7XHJcbiAgICAgICAgICB2YWx1ZSArPSBzdGFja1Nlcmllc1tpXS5kYXRhW2luZGV4XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHZhbHVlMCA9IHZhbHVlIC0gaXRlbTtcclxuICAgICAgICB2YXIgaGVpZ2h0ID0gdmFsaWRIZWlnaHQgKiAodmFsdWUgLSBtaW5SYW5nZSkgLyAobWF4UmFuZ2UgLSBtaW5SYW5nZSk7XHJcbiAgICAgICAgdmFyIGhlaWdodDAgPSB2YWxpZEhlaWdodCAqICh2YWx1ZTAgLSBtaW5SYW5nZSkgLyAobWF4UmFuZ2UgLSBtaW5SYW5nZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gaXRlbTtcclxuICAgICAgICB2YXIgaGVpZ2h0ID0gdmFsaWRIZWlnaHQgKiAodmFsdWUgLSBtaW5SYW5nZSkgLyAobWF4UmFuZ2UgLSBtaW5SYW5nZSk7XHJcbiAgICAgICAgdmFyIGhlaWdodDAgPSAwO1xyXG4gICAgICB9XHJcbiAgICAgIHZhciBoZWlnaHRjID0gaGVpZ2h0MDtcclxuICAgICAgaGVpZ2h0ICo9IHByb2Nlc3M7XHJcbiAgICAgIGhlaWdodGMgKj0gcHJvY2VzcztcclxuICAgICAgcG9pbnQueSA9IG9wdHMuaGVpZ2h0IC0gTWF0aC5yb3VuZChoZWlnaHQpIC0gb3B0cy5hcmVhWzJdO1xyXG4gICAgICBwb2ludC55MCA9IG9wdHMuaGVpZ2h0IC0gTWF0aC5yb3VuZChoZWlnaHRjKSAtIG9wdHMuYXJlYVsyXTtcclxuICAgICAgcG9pbnRzLnB1c2gocG9pbnQpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gcG9pbnRzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRZQXhpc1RleHRMaXN0KHNlcmllcywgb3B0cywgY29uZmlnLCBzdGFjaykge1xyXG4gIHZhciBpbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogLTE7XHJcbiAgdmFyIGRhdGE7XHJcbiAgaWYgKHN0YWNrID09ICdzdGFjaycpIHtcclxuICAgIGRhdGEgPSBkYXRhQ29tYmluZVN0YWNrKHNlcmllcywgb3B0cy5jYXRlZ29yaWVzLmxlbmd0aCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGRhdGEgPSBkYXRhQ29tYmluZShzZXJpZXMpO1xyXG4gIH1cclxuICB2YXIgc29ydGVkID0gW107XHJcbiAgLy8gcmVtb3ZlIG51bGwgZnJvbSBkYXRhXHJcbiAgZGF0YSA9IGRhdGEuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgIC8vcmV0dXJuIGl0ZW0gIT09IG51bGw7XHJcbiAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnICYmIGl0ZW0gIT09IG51bGwpIHtcclxuICAgICAgaWYgKGl0ZW0uY29uc3RydWN0b3IudG9TdHJpbmcoKS5pbmRleE9mKCdBcnJheScpPi0xKSB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IG51bGw7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW0udmFsdWUgIT09IG51bGw7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBpdGVtICE9PSBudWxsO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIGRhdGEubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgaWYgKGl0ZW0uY29uc3RydWN0b3IudG9TdHJpbmcoKS5pbmRleE9mKCdBcnJheScpPi0xKSB7XHJcblx0XHRcdFx0aWYob3B0cy50eXBlPT0nY2FuZGxlJyl7XHJcblx0XHRcdFx0XHRpdGVtLm1hcChmdW5jdGlvbihzdWJpdGVtKSB7XHJcblx0XHRcdFx0XHQgIHNvcnRlZC5wdXNoKHN1Yml0ZW0pO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRcdHNvcnRlZC5wdXNoKGl0ZW1bMV0pO1xyXG5cdFx0XHRcdH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzb3J0ZWQucHVzaChpdGVtLnZhbHVlKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc29ydGVkLnB1c2goaXRlbSk7XHJcbiAgICB9XHJcbiAgfSlcclxuXHRcclxuICB2YXIgbWluRGF0YSA9IDA7XHJcbiAgdmFyIG1heERhdGEgPSAwO1xyXG4gIGlmIChzb3J0ZWQubGVuZ3RoID4gMCkge1xyXG4gICAgbWluRGF0YSA9IE1hdGgubWluLmFwcGx5KHRoaXMsIHNvcnRlZCk7XHJcbiAgICBtYXhEYXRhID0gTWF0aC5tYXguYXBwbHkodGhpcywgc29ydGVkKTtcclxuICB9XHJcbiAgLy/kuLrkuoblhbzlrrl2MS45LjDkuYvliY3nmoTpobnnm65cclxuICBpZihpbmRleD4tMSl7XHJcbiAgICBpZiAodHlwZW9mIG9wdHMueUF4aXMuZGF0YVtpbmRleF0ubWluID09PSAnbnVtYmVyJykge1xyXG4gICAgICBtaW5EYXRhID0gTWF0aC5taW4ob3B0cy55QXhpcy5kYXRhW2luZGV4XS5taW4sIG1pbkRhdGEpO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBvcHRzLnlBeGlzLmRhdGFbaW5kZXhdLm1heCA9PT0gJ251bWJlcicpIHtcclxuICAgICAgbWF4RGF0YSA9IE1hdGgubWF4KG9wdHMueUF4aXMuZGF0YVtpbmRleF0ubWF4LCBtYXhEYXRhKTtcclxuICAgIH1cclxuICB9ZWxzZXtcclxuICAgIGlmICh0eXBlb2Ygb3B0cy55QXhpcy5taW4gPT09ICdudW1iZXInKSB7XHJcbiAgICAgIG1pbkRhdGEgPSBNYXRoLm1pbihvcHRzLnlBeGlzLm1pbiwgbWluRGF0YSk7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIG9wdHMueUF4aXMubWF4ID09PSAnbnVtYmVyJykge1xyXG4gICAgICBtYXhEYXRhID0gTWF0aC5tYXgob3B0cy55QXhpcy5tYXgsIG1heERhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuXHJcbiAgaWYgKG1pbkRhdGEgPT09IG1heERhdGEpIHtcclxuICAgIHZhciByYW5nZVNwYW4gPSBtYXhEYXRhIHx8IDEwO1xyXG4gICAgbWF4RGF0YSArPSByYW5nZVNwYW47XHJcbiAgfVxyXG5cclxuICB2YXIgZGF0YVJhbmdlID0gZ2V0RGF0YVJhbmdlKG1pbkRhdGEsIG1heERhdGEpO1xyXG4gIHZhciBtaW5SYW5nZSA9IGRhdGFSYW5nZS5taW5SYW5nZTtcclxuICB2YXIgbWF4UmFuZ2UgPSBkYXRhUmFuZ2UubWF4UmFuZ2U7XHJcblxyXG4gIHZhciByYW5nZSA9IFtdO1xyXG4gIHZhciBlYWNoUmFuZ2UgPSAobWF4UmFuZ2UgLSBtaW5SYW5nZSkgLyBvcHRzLnlBeGlzLnNwbGl0TnVtYmVyO1xyXG5cclxuICBmb3IgKHZhciBpID0gMDsgaSA8PSBvcHRzLnlBeGlzLnNwbGl0TnVtYmVyOyBpKyspIHtcclxuICAgIHJhbmdlLnB1c2gobWluUmFuZ2UgKyBlYWNoUmFuZ2UgKiBpKTtcclxuICB9XHJcbiAgcmV0dXJuIHJhbmdlLnJldmVyc2UoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2FsWUF4aXNEYXRhKHNlcmllcywgb3B0cywgY29uZmlnKSB7XHJcbiAgLy/loIblj6Dlm77ph43nrpdZ6L20XHJcbiAgdmFyIGNvbHVtbnN0eWxlID0gYXNzaWduKHt9LCB7XHJcbiAgICB0eXBlOiBcIlwiXHJcbiAgfSwgb3B0cy5leHRyYS5jb2x1bW4pO1xyXG4gIC8v5aaC5p6c5piv5aSaWei9tO+8jOmHjeaWsOiuoeeul1xyXG4gIHZhciBZTGVuZ3RoID0gb3B0cy55QXhpcy5kYXRhLmxlbmd0aDtcclxuICB2YXIgbmV3U2VyaWVzPW5ldyBBcnJheShZTGVuZ3RoKTtcclxuICBpZihZTGVuZ3RoPjApe1xyXG4gICAgZm9yKGxldCBpPTA7aTxZTGVuZ3RoO2krKyl7XHJcbiAgICAgIG5ld1Nlcmllc1tpXT1bXTtcclxuICAgICAgZm9yKGxldCBqPTA7ajxzZXJpZXMubGVuZ3RoO2orKyl7XHJcbiAgICAgICAgaWYoc2VyaWVzW2pdLmluZGV4ID09IGkpe1xyXG4gICAgICAgICAgbmV3U2VyaWVzW2ldLnB1c2goc2VyaWVzW2pdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHZhciByYW5nZXNBcnIgPW5ldyBBcnJheShZTGVuZ3RoKTtcclxuICAgIHZhciByYW5nZXNGb3JtYXRBcnIgPSBuZXcgQXJyYXkoWUxlbmd0aCk7XHJcbiAgICB2YXIgeUF4aXNXaWR0aEFyciA9bmV3IEFycmF5KFlMZW5ndGgpO1xyXG5cdFx0XHJcbiAgICBmb3IobGV0IGk9MDtpPFlMZW5ndGg7aSsrKXtcclxuICAgICAgbGV0IHlEYXRhID0gb3B0cy55QXhpcy5kYXRhW2ldO1xyXG5cdFx0XHQvL+WmguaenOaAu+W8gOWFs+S4jeaYvuekuu+8jOW8uuWItuavj+S4qlnovbTkuLrkuI3mmL7npLpcclxuXHRcdFx0aWYob3B0cy55QXhpcy5kaXNhYmxlZCA9PSB0cnVlKXtcclxuXHRcdFx0XHR5RGF0YS5kaXNhYmxlZCA9IHRydWU7XHJcblx0XHRcdH1cclxuXHRcdFx0cmFuZ2VzQXJyW2ldPWdldFlBeGlzVGV4dExpc3QobmV3U2VyaWVzW2ldLCBvcHRzLCBjb25maWcsIGNvbHVtbnN0eWxlLnR5cGUsaSk7XHJcblx0XHRcdGxldCB5QXhpc0ZvbnRTaXplcyA9IHlEYXRhLmZvbnRTaXplIHx8IGNvbmZpZy5mb250U2l6ZTtcclxuXHRcdFx0eUF4aXNXaWR0aEFycltpXSA9IHtwb3NpdGlvbjp5RGF0YS5wb3NpdGlvbj95RGF0YS5wb3NpdGlvbjonbGVmdCcsd2lkdGg6MH07XHJcblx0XHRcdHJhbmdlc0Zvcm1hdEFycltpXT0gcmFuZ2VzQXJyW2ldLm1hcChmdW5jdGlvbihpdGVtcykge1xyXG5cdFx0XHRcdGl0ZW1zID0gdXRpbC50b0ZpeGVkKGl0ZW1zLCA2KTtcclxuXHRcdFx0XHRpdGVtcyA9IHlEYXRhLmZvcm1hdCA/IHlEYXRhLmZvcm1hdChOdW1iZXIoaXRlbXMpKSA6IGl0ZW1zO1xyXG5cdFx0XHRcdHlBeGlzV2lkdGhBcnJbaV0ud2lkdGggPSBNYXRoLm1heCh5QXhpc1dpZHRoQXJyW2ldLndpZHRoLCBtZWFzdXJlVGV4dChpdGVtcywgeUF4aXNGb250U2l6ZXMpICsgNSk7XHJcblx0XHRcdFx0cmV0dXJuIGl0ZW1zO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0bGV0IGNhbGlicmF0aW9uPSB5RGF0YS5jYWxpYnJhdGlvbj8gNCpvcHRzLnBpeGVsUmF0aW8gOiAwIDtcclxuXHRcdFx0eUF4aXNXaWR0aEFycltpXS53aWR0aCArPSBjYWxpYnJhdGlvbiArMypvcHRzLnBpeGVsUmF0aW87XHJcbiAgICAgIGlmICh5RGF0YS5kaXNhYmxlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIHlBeGlzV2lkdGhBcnJbaV0ud2lkdGg9MDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgfWVsc2V7XHJcbiAgICB2YXIgcmFuZ2VzQXJyID1uZXcgQXJyYXkoMSk7XHJcbiAgICB2YXIgcmFuZ2VzRm9ybWF0QXJyID0gbmV3IEFycmF5KDEpO1xyXG4gICAgdmFyIHlBeGlzV2lkdGhBcnIgPW5ldyBBcnJheSgxKTtcclxuXHRcdHJhbmdlc0FyclswXSA9IGdldFlBeGlzVGV4dExpc3Qoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbHVtbnN0eWxlLnR5cGUpO1xyXG5cdFx0eUF4aXNXaWR0aEFyclswXSA9IHtwb3NpdGlvbjonbGVmdCcsd2lkdGg6MH07XHJcblx0XHR2YXIgeUF4aXNGb250U2l6ZSA9IG9wdHMueUF4aXMuZm9udFNpemUgfHwgY29uZmlnLmZvbnRTaXplO1xyXG5cdFx0cmFuZ2VzRm9ybWF0QXJyWzBdID0gcmFuZ2VzQXJyWzBdLm1hcChmdW5jdGlvbihpdGVtKSB7XHJcblx0XHRcdGl0ZW0gPSB1dGlsLnRvRml4ZWQoaXRlbSwgNik7XHJcblx0XHRcdGl0ZW0gPSBvcHRzLnlBeGlzLmZvcm1hdCA/IG9wdHMueUF4aXMuZm9ybWF0KE51bWJlcihpdGVtKSkgOiBpdGVtO1xyXG5cdFx0XHR5QXhpc1dpZHRoQXJyWzBdLndpZHRoID0gTWF0aC5tYXgoeUF4aXNXaWR0aEFyclswXS53aWR0aCwgbWVhc3VyZVRleHQoaXRlbSwgeUF4aXNGb250U2l6ZSkgKyA1KTtcclxuXHRcdFx0cmV0dXJuIGl0ZW07XHJcblx0XHR9KTtcclxuXHRcdHlBeGlzV2lkdGhBcnJbMF0ud2lkdGggKz0gMypvcHRzLnBpeGVsUmF0aW87XHJcblx0XHRpZiAob3B0cy55QXhpcy5kaXNhYmxlZCA9PT0gdHJ1ZSkge1xyXG5cdFx0ICB5QXhpc1dpZHRoQXJyWzBdID0ge3Bvc2l0aW9uOidsZWZ0Jyx3aWR0aDowfTtcclxuXHRcdCAgb3B0cy55QXhpcy5kYXRhWzBdPXtkaXNhYmxlZDp0cnVlfTtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRvcHRzLnlBeGlzLmRhdGFbMF09e2Rpc2FibGVkOmZhbHNlLHBvc2l0aW9uOidsZWZ0JyxtYXg6b3B0cy55QXhpcy5tYXgsbWluOm9wdHMueUF4aXMubWluLGZvcm1hdDpvcHRzLnlBeGlzLmZvcm1hdH07XHJcblx0XHR9XHJcbiAgICBcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICByYW5nZXNGb3JtYXQ6IHJhbmdlc0Zvcm1hdEFycixcclxuICAgIHJhbmdlczogcmFuZ2VzQXJyLFxyXG4gICAgeUF4aXNXaWR0aDogeUF4aXNXaWR0aEFyclxyXG4gIH07XHJcbiAgXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbFRvb2x0aXBZQXhpc0RhdGEocG9pbnQsIHNlcmllcywgb3B0cywgY29uZmlnLCBlYWNoU3BhY2luZykge1xyXG4gIGxldCByYW5nZXMgPSBbXS5jb25jYXQob3B0cy5jaGFydERhdGEueUF4aXNEYXRhLnJhbmdlcyk7XHJcbiAgbGV0IHNwYWNpbmdWYWxpZCA9IG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzBdIC0gb3B0cy5hcmVhWzJdO1xyXG4gIGxldCBtaW5BeGlzID0gb3B0cy5hcmVhWzBdO1xyXG4gIGxldCBpdGVtcz1bXTtcclxuICBmb3IobGV0IGk9MDtpPHJhbmdlcy5sZW5ndGg7aSsrKXtcclxuICAgIGxldCBtYXhWYWwgPSByYW5nZXNbaV0uc2hpZnQoKTtcclxuICAgIGxldCBtaW5WYWwgPSByYW5nZXNbaV0ucG9wKCk7XHJcbiAgICBsZXQgaXRlbSA9IG1heFZhbCAtIChtYXhWYWwgLSBtaW5WYWwpICogKHBvaW50IC0gbWluQXhpcykgLyBzcGFjaW5nVmFsaWQ7XHJcbiAgICBpdGVtID0gb3B0cy55QXhpcy5kYXRhW2ldLmZvcm1hdCA/IG9wdHMueUF4aXMuZGF0YVtpXS5mb3JtYXQoTnVtYmVyKGl0ZW0pKSA6IGl0ZW0udG9GaXhlZCgwKTtcclxuICAgIGl0ZW1zLnB1c2goU3RyaW5nKGl0ZW0pKVxyXG4gIH1cclxuICByZXR1cm4gaXRlbXM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbE1hcmtMaW5lRGF0YShwb2ludHMsIG9wdHMpIHtcclxuICBsZXQgbWluUmFuZ2UsIG1heFJhbmdlO1xyXG4gIGxldCBzcGFjaW5nVmFsaWQgPSBvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVswXSAtIG9wdHMuYXJlYVsyXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgcG9pbnRzW2ldLnlBeGlzSW5kZXggPSBwb2ludHNbaV0ueUF4aXNJbmRleCA/IHBvaW50c1tpXS55QXhpc0luZGV4OjA7XHJcbiAgICBsZXQgcmFuZ2UgPSBbXS5jb25jYXQob3B0cy5jaGFydERhdGEueUF4aXNEYXRhLnJhbmdlc1twb2ludHNbaV0ueUF4aXNJbmRleF0pO1xyXG4gICAgbWluUmFuZ2UgPSByYW5nZS5wb3AoKTtcclxuICAgIG1heFJhbmdlID0gcmFuZ2Uuc2hpZnQoKTtcclxuICAgIGxldCBoZWlnaHQgPSBzcGFjaW5nVmFsaWQgKiAocG9pbnRzW2ldLnZhbHVlIC0gbWluUmFuZ2UpIC8gKG1heFJhbmdlIC0gbWluUmFuZ2UpO1xyXG4gICAgcG9pbnRzW2ldLnkgPSBvcHRzLmhlaWdodCAtIE1hdGgucm91bmQoaGVpZ2h0KSAtIG9wdHMuYXJlYVsyXTtcclxuICB9XHJcbiAgcmV0dXJuIHBvaW50cztcclxufVxyXG5cclxuZnVuY3Rpb24gY29udGV4dFJvdGF0ZShjb250ZXh0LCBvcHRzKSB7XHJcbiAgaWYgKG9wdHMucm90YXRlTG9jayAhPT0gdHJ1ZSkge1xyXG4gICAgY29udGV4dC50cmFuc2xhdGUob3B0cy5oZWlnaHQsIDApO1xyXG4gICAgY29udGV4dC5yb3RhdGUoOTAgKiBNYXRoLlBJIC8gMTgwKTtcclxuICB9IGVsc2UgaWYgKG9wdHMuX3JvdGF0ZV8gIT09IHRydWUpIHtcclxuICAgIGNvbnRleHQudHJhbnNsYXRlKG9wdHMuaGVpZ2h0LCAwKTtcclxuICAgIGNvbnRleHQucm90YXRlKDkwICogTWF0aC5QSSAvIDE4MCk7XHJcbiAgICBvcHRzLl9yb3RhdGVfID0gdHJ1ZTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdQb2ludFNoYXBlKHBvaW50cywgY29sb3IsIHNoYXBlLCBjb250ZXh0LCBvcHRzKSB7XHJcbiAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuXHRpZihvcHRzLmRhdGFQb2ludFNoYXBlVHlwZSA9PSAnaG9sbG93Jyl7XHJcblx0XHRjb250ZXh0LnNldFN0cm9rZVN0eWxlKGNvbG9yKTtcclxuXHRcdGNvbnRleHQuc2V0RmlsbFN0eWxlKG9wdHMuYmFja2dyb3VuZCk7XHJcblx0XHRjb250ZXh0LnNldExpbmVXaWR0aCgyICogb3B0cy5waXhlbFJhdGlvKTtcclxuXHR9ZWxzZXtcclxuXHRcdGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoXCIjZmZmZmZmXCIpO1xyXG5cdFx0Y29udGV4dC5zZXRGaWxsU3R5bGUoY29sb3IpO1xyXG5cdFx0Y29udGV4dC5zZXRMaW5lV2lkdGgoMSAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcblx0fVxyXG4gIGlmIChzaGFwZSA9PT0gJ2RpYW1vbmQnKSB7XHJcbiAgICBwb2ludHMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgICBpZiAoaXRlbSAhPT0gbnVsbCkge1xyXG4gICAgICAgIGNvbnRleHQubW92ZVRvKGl0ZW0ueCwgaXRlbS55IC0gNC41KTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLnggLSA0LjUsIGl0ZW0ueSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbS54LCBpdGVtLnkgKyA0LjUpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0ueCArIDQuNSwgaXRlbS55KTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLngsIGl0ZW0ueSAtIDQuNSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0gZWxzZSBpZiAoc2hhcGUgPT09ICdjaXJjbGUnKSB7XHJcbiAgICBwb2ludHMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgICBpZiAoaXRlbSAhPT0gbnVsbCkge1xyXG4gICAgICAgIGNvbnRleHQubW92ZVRvKGl0ZW0ueCArIDIuNSAqIG9wdHMucGl4ZWxSYXRpbywgaXRlbS55KTtcclxuICAgICAgICBjb250ZXh0LmFyYyhpdGVtLngsIGl0ZW0ueSwgMyAqIG9wdHMucGl4ZWxSYXRpbywgMCwgMiAqIE1hdGguUEksIGZhbHNlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSBlbHNlIGlmIChzaGFwZSA9PT0gJ3JlY3QnKSB7XHJcbiAgICBwb2ludHMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgICBpZiAoaXRlbSAhPT0gbnVsbCkge1xyXG4gICAgICAgIGNvbnRleHQubW92ZVRvKGl0ZW0ueCAtIDMuNSwgaXRlbS55IC0gMy41KTtcclxuICAgICAgICBjb250ZXh0LnJlY3QoaXRlbS54IC0gMy41LCBpdGVtLnkgLSAzLjUsIDcsIDcpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9IGVsc2UgaWYgKHNoYXBlID09PSAndHJpYW5nbGUnKSB7XHJcbiAgICBwb2ludHMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgICBpZiAoaXRlbSAhPT0gbnVsbCkge1xyXG4gICAgICAgIGNvbnRleHQubW92ZVRvKGl0ZW0ueCwgaXRlbS55IC0gNC41KTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLnggLSA0LjUsIGl0ZW0ueSArIDQuNSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbS54ICsgNC41LCBpdGVtLnkgKyA0LjUpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0ueCwgaXRlbS55IC0gNC41KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgY29udGV4dC5maWxsKCk7XHJcbiAgY29udGV4dC5zdHJva2UoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1JpbmdUaXRsZShvcHRzLCBjb25maWcsIGNvbnRleHQsIGNlbnRlcikge1xyXG4gIHZhciB0aXRsZWZvbnRTaXplID0gb3B0cy50aXRsZS5mb250U2l6ZSB8fCBjb25maWcudGl0bGVGb250U2l6ZTtcclxuICB2YXIgc3VidGl0bGVmb250U2l6ZSA9IG9wdHMuc3VidGl0bGUuZm9udFNpemUgfHwgY29uZmlnLnN1YnRpdGxlRm9udFNpemU7XHJcbiAgdmFyIHRpdGxlID0gb3B0cy50aXRsZS5uYW1lIHx8ICcnO1xyXG4gIHZhciBzdWJ0aXRsZSA9IG9wdHMuc3VidGl0bGUubmFtZSB8fCAnJztcclxuICB2YXIgdGl0bGVGb250Q29sb3IgPSBvcHRzLnRpdGxlLmNvbG9yIHx8IGNvbmZpZy50aXRsZUNvbG9yO1xyXG4gIHZhciBzdWJ0aXRsZUZvbnRDb2xvciA9IG9wdHMuc3VidGl0bGUuY29sb3IgfHwgY29uZmlnLnN1YnRpdGxlQ29sb3I7XHJcbiAgdmFyIHRpdGxlSGVpZ2h0ID0gdGl0bGUgPyB0aXRsZWZvbnRTaXplIDogMDtcclxuICB2YXIgc3VidGl0bGVIZWlnaHQgPSBzdWJ0aXRsZSA/IHN1YnRpdGxlZm9udFNpemUgOiAwO1xyXG4gIHZhciBtYXJnaW4gPSA1O1xyXG5cclxuICBpZiAoc3VidGl0bGUpIHtcclxuICAgIHZhciB0ZXh0V2lkdGggPSBtZWFzdXJlVGV4dChzdWJ0aXRsZSwgc3VidGl0bGVmb250U2l6ZSk7XHJcbiAgICB2YXIgc3RhcnRYID0gY2VudGVyLnggLSB0ZXh0V2lkdGggLyAyICsgKG9wdHMuc3VidGl0bGUub2Zmc2V0WCB8fCAwKTtcclxuICAgIHZhciBzdGFydFkgPSBjZW50ZXIueSArIHN1YnRpdGxlZm9udFNpemUgLyAyICsgKG9wdHMuc3VidGl0bGUub2Zmc2V0WSB8fCAwKTtcclxuICAgIGlmICh0aXRsZSkge1xyXG4gICAgICBzdGFydFkgKz0gKHRpdGxlSGVpZ2h0ICsgbWFyZ2luKSAvIDI7XHJcbiAgICB9XHJcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgY29udGV4dC5zZXRGb250U2l6ZShzdWJ0aXRsZWZvbnRTaXplKTtcclxuICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKHN1YnRpdGxlRm9udENvbG9yKTtcclxuICAgIGNvbnRleHQuZmlsbFRleHQoc3VidGl0bGUsIHN0YXJ0WCwgc3RhcnRZKTtcclxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gIH1cclxuICBpZiAodGl0bGUpIHtcclxuICAgIHZhciBfdGV4dFdpZHRoID0gbWVhc3VyZVRleHQodGl0bGUsIHRpdGxlZm9udFNpemUpO1xyXG4gICAgdmFyIF9zdGFydFggPSBjZW50ZXIueCAtIF90ZXh0V2lkdGggLyAyICsgKG9wdHMudGl0bGUub2Zmc2V0WCB8fCAwKTtcclxuICAgIHZhciBfc3RhcnRZID0gY2VudGVyLnkgKyB0aXRsZWZvbnRTaXplIC8gMiArIChvcHRzLnRpdGxlLm9mZnNldFkgfHwgMCk7XHJcbiAgICBpZiAoc3VidGl0bGUpIHtcclxuICAgICAgX3N0YXJ0WSAtPSAoc3VidGl0bGVIZWlnaHQgKyBtYXJnaW4pIC8gMjtcclxuICAgIH1cclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0LnNldEZvbnRTaXplKHRpdGxlZm9udFNpemUpO1xyXG4gICAgY29udGV4dC5zZXRGaWxsU3R5bGUodGl0bGVGb250Q29sb3IpO1xyXG4gICAgY29udGV4dC5maWxsVGV4dCh0aXRsZSwgX3N0YXJ0WCwgX3N0YXJ0WSk7XHJcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgY29udGV4dC5zdHJva2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdQb2ludFRleHQocG9pbnRzLCBzZXJpZXMsIGNvbmZpZywgY29udGV4dCkge1xyXG4gIC8vIOe7mOWItuaVsOaNruaWh+ahiFxyXG4gIHZhciBkYXRhID0gc2VyaWVzLmRhdGE7XHJcbiAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgIGlmIChpdGVtICE9PSBudWxsKSB7XHJcbiAgICAgIC8vdmFyIGZvcm1hdFZhbCA9IHNlcmllcy5mb3JtYXQgPyBzZXJpZXMuZm9ybWF0KGRhdGFbaW5kZXhdKSA6IGRhdGFbaW5kZXhdO1xyXG4gICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjb250ZXh0LnNldEZvbnRTaXplKHNlcmllcy50ZXh0U2l6ZSB8fCBjb25maWcuZm9udFNpemUpO1xyXG4gICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShzZXJpZXMudGV4dENvbG9yIHx8ICcjNjY2NjY2Jyk7XHJcbiAgICAgIHZhciB2YWx1ZSA9IGRhdGFbaW5kZXhdXHJcbiAgICAgIGlmICh0eXBlb2YgZGF0YVtpbmRleF0gPT09ICdvYmplY3QnICYmIGRhdGFbaW5kZXhdICE9PSBudWxsKSB7XHJcblx0XHRcdFx0aWYgKGRhdGFbaW5kZXhdLmNvbnN0cnVjdG9yID09IEFycmF5KSB7XHJcblx0XHRcdFx0XHR2YWx1ZSA9IGRhdGFbaW5kZXhdWzFdO1xyXG5cdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0dmFsdWUgPSBkYXRhW2luZGV4XS52YWx1ZVxyXG5cdFx0XHRcdH1cclxuICAgICAgfVxyXG4gICAgICB2YXIgZm9ybWF0VmFsID0gc2VyaWVzLmZvcm1hdCA/IHNlcmllcy5mb3JtYXQodmFsdWUpIDogdmFsdWU7XHJcbiAgICAgIGNvbnRleHQuZmlsbFRleHQoU3RyaW5nKGZvcm1hdFZhbCksIGl0ZW0ueCAtIG1lYXN1cmVUZXh0KGZvcm1hdFZhbCwgc2VyaWVzLnRleHRTaXplIHx8IGNvbmZpZy5mb250U2l6ZSkgLyAyLCBpdGVtLnkgLTQpO1xyXG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0dhdWdlTGFiZWwoZ2F1Z2VPcHRpb24sIHJhZGl1cywgY2VudGVyUG9zaXRpb24sIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xyXG4gIHJhZGl1cyAtPSBnYXVnZU9wdGlvbi53aWR0aCAvIDIgKyBjb25maWcuZ2F1Z2VMYWJlbFRleHRNYXJnaW47XHJcblxyXG4gIGxldCB0b3RhbEFuZ2xlID0gZ2F1Z2VPcHRpb24uc3RhcnRBbmdsZSAtIGdhdWdlT3B0aW9uLmVuZEFuZ2xlICsgMTtcclxuICBsZXQgc3BsaXRBbmdsZSA9IHRvdGFsQW5nbGUgLyBnYXVnZU9wdGlvbi5zcGxpdExpbmUuc3BsaXROdW1iZXI7XHJcbiAgbGV0IHRvdGFsTnVtYmVyID0gZ2F1Z2VPcHRpb24uZW5kTnVtYmVyIC0gZ2F1Z2VPcHRpb24uc3RhcnROdW1iZXI7XHJcbiAgbGV0IHNwbGl0TnVtYmVyID0gdG90YWxOdW1iZXIgLyBnYXVnZU9wdGlvbi5zcGxpdExpbmUuc3BsaXROdW1iZXI7XHJcbiAgbGV0IG5vd0FuZ2xlID0gZ2F1Z2VPcHRpb24uc3RhcnRBbmdsZTtcclxuICBsZXQgbm93TnVtYmVyID0gZ2F1Z2VPcHRpb24uc3RhcnROdW1iZXI7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBnYXVnZU9wdGlvbi5zcGxpdExpbmUuc3BsaXROdW1iZXIgKyAxOyBpKyspIHtcclxuICAgIHZhciBwb3MgPSB7XHJcbiAgICAgIHg6IHJhZGl1cyAqIE1hdGguY29zKG5vd0FuZ2xlICogTWF0aC5QSSksXHJcbiAgICAgIHk6IHJhZGl1cyAqIE1hdGguc2luKG5vd0FuZ2xlICogTWF0aC5QSSlcclxuICAgIH07XHJcbiAgICB2YXIgbGFiZWxUZXh0ID0gZ2F1Z2VPcHRpb24ubGFiZWxGb3JtYXQgPyBnYXVnZU9wdGlvbi5sYWJlbEZvcm1hdChub3dOdW1iZXIpIDogbm93TnVtYmVyO1xyXG4gICAgcG9zLnggKz0gY2VudGVyUG9zaXRpb24ueCAtIG1lYXN1cmVUZXh0KGxhYmVsVGV4dCkgLyAyO1xyXG4gICAgcG9zLnkgKz0gY2VudGVyUG9zaXRpb24ueTtcclxuICAgIHZhciBzdGFydFggPSBwb3MueDtcclxuICAgIHZhciBzdGFydFkgPSBwb3MueTtcclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0LnNldEZvbnRTaXplKGNvbmZpZy5mb250U2l6ZSk7XHJcbiAgICBjb250ZXh0LnNldEZpbGxTdHlsZShnYXVnZU9wdGlvbi5sYWJlbENvbG9yIHx8ICcjNjY2NjY2Jyk7XHJcbiAgICBjb250ZXh0LmZpbGxUZXh0KGxhYmVsVGV4dCwgc3RhcnRYLCBzdGFydFkgKyBjb25maWcuZm9udFNpemUgLyAyKTtcclxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG5cclxuICAgIG5vd0FuZ2xlICs9IHNwbGl0QW5nbGU7XHJcbiAgICBpZiAobm93QW5nbGUgPj0gMikge1xyXG4gICAgICBub3dBbmdsZSA9IG5vd0FuZ2xlICUgMjtcclxuICAgIH1cclxuICAgIG5vd051bWJlciArPSBzcGxpdE51bWJlcjtcclxuICB9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3UmFkYXJMYWJlbChhbmdsZUxpc3QsIHJhZGl1cywgY2VudGVyUG9zaXRpb24sIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xyXG4gIHZhciByYWRhck9wdGlvbiA9IG9wdHMuZXh0cmEucmFkYXIgfHwge307XHJcbiAgcmFkaXVzICs9IGNvbmZpZy5yYWRhckxhYmVsVGV4dE1hcmdpbjtcclxuXHJcbiAgYW5nbGVMaXN0LmZvckVhY2goZnVuY3Rpb24oYW5nbGUsIGluZGV4KSB7XHJcbiAgICB2YXIgcG9zID0ge1xyXG4gICAgICB4OiByYWRpdXMgKiBNYXRoLmNvcyhhbmdsZSksXHJcbiAgICAgIHk6IHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKVxyXG4gICAgfTtcclxuICAgIHZhciBwb3NSZWxhdGl2ZUNhbnZhcyA9IGNvbnZlcnRDb29yZGluYXRlT3JpZ2luKHBvcy54LCBwb3MueSwgY2VudGVyUG9zaXRpb24pO1xyXG4gICAgdmFyIHN0YXJ0WCA9IHBvc1JlbGF0aXZlQ2FudmFzLng7XHJcbiAgICB2YXIgc3RhcnRZID0gcG9zUmVsYXRpdmVDYW52YXMueTtcclxuICAgIGlmICh1dGlsLmFwcHJveGltYXRlbHlFcXVhbChwb3MueCwgMCkpIHtcclxuICAgICAgc3RhcnRYIC09IG1lYXN1cmVUZXh0KG9wdHMuY2F0ZWdvcmllc1tpbmRleF0gfHwgJycpIC8gMjtcclxuICAgIH0gZWxzZSBpZiAocG9zLnggPCAwKSB7XHJcbiAgICAgIHN0YXJ0WCAtPSBtZWFzdXJlVGV4dChvcHRzLmNhdGVnb3JpZXNbaW5kZXhdIHx8ICcnKTtcclxuICAgIH1cclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0LnNldEZvbnRTaXplKGNvbmZpZy5mb250U2l6ZSk7XHJcbiAgICBjb250ZXh0LnNldEZpbGxTdHlsZShyYWRhck9wdGlvbi5sYWJlbENvbG9yIHx8ICcjNjY2NjY2Jyk7XHJcbiAgICBjb250ZXh0LmZpbGxUZXh0KG9wdHMuY2F0ZWdvcmllc1tpbmRleF0gfHwgJycsIHN0YXJ0WCwgc3RhcnRZICsgY29uZmlnLmZvbnRTaXplIC8gMik7XHJcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgY29udGV4dC5zdHJva2UoKTtcclxuICB9KTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdQaWVUZXh0KHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCByYWRpdXMsIGNlbnRlcikge1xyXG4gIHZhciBsaW5lUmFkaXVzID0gY29uZmlnLnBpZUNoYXJ0TGluZVBhZGRpbmc7XHJcbiAgdmFyIHRleHRPYmplY3RDb2xsZWN0aW9uID0gW107XHJcbiAgdmFyIGxhc3RUZXh0T2JqZWN0ID0gbnVsbDtcclxuXHJcbiAgdmFyIHNlcmllc0NvbnZlcnQgPSBzZXJpZXMubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgIHZhciB0ZXh0ID0gaXRlbS5mb3JtYXQgPyBpdGVtLmZvcm1hdCgraXRlbS5fcHJvcG9ydGlvbl8udG9GaXhlZCgyKSkgOiB1dGlsLnRvRml4ZWQoaXRlbS5fcHJvcG9ydGlvbl8udG9GaXhlZCg0KSAqIDEwMCkgKyclJztcclxuICAgIGlmKGl0ZW0uX3Jvc2VfcHJvcG9ydGlvbl8pIGl0ZW0uX3Byb3BvcnRpb25fPWl0ZW0uX3Jvc2VfcHJvcG9ydGlvbl87XHJcbiAgICB2YXIgYXJjID0gMiAqIE1hdGguUEkgLSAoaXRlbS5fc3RhcnRfICsgMiAqIE1hdGguUEkgKiBpdGVtLl9wcm9wb3J0aW9uXyAvIDIpO1xyXG4gICAgdmFyIGNvbG9yID0gaXRlbS5jb2xvcjtcclxuICAgIHZhciByYWRpdXMgPSBpdGVtLl9yYWRpdXNfO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgYXJjOiBhcmMsXHJcbiAgICAgIHRleHQ6IHRleHQsXHJcbiAgICAgIGNvbG9yOiBjb2xvcixcclxuICAgICAgcmFkaXVzOiByYWRpdXMsXHJcbiAgICAgIHRleHRDb2xvcjogaXRlbS50ZXh0Q29sb3IsXHJcbiAgICAgIHRleHRTaXplOiBpdGVtLnRleHRTaXplLFxyXG4gICAgfTtcclxuICB9KTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllc0NvbnZlcnQubGVuZ3RoOyBpKyspIHtcclxuICAgIGxldCBpdGVtID0gc2VyaWVzQ29udmVydFtpXTtcclxuICAgIC8vIGxpbmUgZW5kXHJcbiAgICBsZXQgb3JnaW5YMSA9IE1hdGguY29zKGl0ZW0uYXJjKSAqIChpdGVtLnJhZGl1cyArIGxpbmVSYWRpdXMpO1xyXG4gICAgbGV0IG9yZ2luWTEgPSBNYXRoLnNpbihpdGVtLmFyYykgKiAoaXRlbS5yYWRpdXMgKyBsaW5lUmFkaXVzKTtcclxuXHJcbiAgICAvLyBsaW5lIHN0YXJ0XHJcbiAgICBsZXQgb3JnaW5YMiA9IE1hdGguY29zKGl0ZW0uYXJjKSAqIGl0ZW0ucmFkaXVzO1xyXG4gICAgbGV0IG9yZ2luWTIgPSBNYXRoLnNpbihpdGVtLmFyYykgKiBpdGVtLnJhZGl1cztcclxuXHJcbiAgICAvLyB0ZXh0IHN0YXJ0XHJcbiAgICBsZXQgb3JnaW5YMyA9IG9yZ2luWDEgPj0gMCA/IG9yZ2luWDEgKyBjb25maWcucGllQ2hhcnRUZXh0UGFkZGluZyA6IG9yZ2luWDEgLSBjb25maWcucGllQ2hhcnRUZXh0UGFkZGluZztcclxuICAgIGxldCBvcmdpblkzID0gb3JnaW5ZMTtcclxuICAgIGxldCB0ZXh0V2lkdGggPSBtZWFzdXJlVGV4dChpdGVtLnRleHQsaXRlbS50ZXh0U2l6ZXx8Y29uZmlnLmZvbnRTaXplKTtcclxuICAgIGxldCBzdGFydFkgPSBvcmdpblkzO1xyXG5cclxuICAgIGlmIChsYXN0VGV4dE9iamVjdCAmJiB1dGlsLmlzU2FtZVhDb29yZGluYXRlQXJlYShsYXN0VGV4dE9iamVjdC5zdGFydCwge1xyXG4gICAgICAgIHg6IG9yZ2luWDNcclxuICAgICAgfSkpIHtcclxuICAgICAgaWYgKG9yZ2luWDMgPiAwKSB7XHJcbiAgICAgICAgc3RhcnRZID0gTWF0aC5taW4ob3JnaW5ZMywgbGFzdFRleHRPYmplY3Quc3RhcnQueSk7XHJcbiAgICAgIH0gZWxzZSBpZiAob3JnaW5YMSA8IDApIHtcclxuICAgICAgICBzdGFydFkgPSBNYXRoLm1heChvcmdpblkzLCBsYXN0VGV4dE9iamVjdC5zdGFydC55KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAob3JnaW5ZMyA+IDApIHtcclxuICAgICAgICAgIHN0YXJ0WSA9IE1hdGgubWF4KG9yZ2luWTMsIGxhc3RUZXh0T2JqZWN0LnN0YXJ0LnkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzdGFydFkgPSBNYXRoLm1pbihvcmdpblkzLCBsYXN0VGV4dE9iamVjdC5zdGFydC55KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChvcmdpblgzIDwgMCkge1xyXG4gICAgICBvcmdpblgzIC09IHRleHRXaWR0aDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgdGV4dE9iamVjdCA9IHtcclxuICAgICAgbGluZVN0YXJ0OiB7XHJcbiAgICAgICAgeDogb3JnaW5YMixcclxuICAgICAgICB5OiBvcmdpblkyXHJcbiAgICAgIH0sXHJcbiAgICAgIGxpbmVFbmQ6IHtcclxuICAgICAgICB4OiBvcmdpblgxLFxyXG4gICAgICAgIHk6IG9yZ2luWTFcclxuICAgICAgfSxcclxuICAgICAgc3RhcnQ6IHtcclxuICAgICAgICB4OiBvcmdpblgzLFxyXG4gICAgICAgIHk6IHN0YXJ0WVxyXG4gICAgICB9LFxyXG4gICAgICB3aWR0aDogdGV4dFdpZHRoLFxyXG4gICAgICBoZWlnaHQ6IGNvbmZpZy5mb250U2l6ZSxcclxuICAgICAgdGV4dDogaXRlbS50ZXh0LFxyXG4gICAgICBjb2xvcjogaXRlbS5jb2xvcixcclxuICAgICAgdGV4dENvbG9yOiBpdGVtLnRleHRDb2xvcixcclxuICAgICAgdGV4dFNpemU6IGl0ZW0udGV4dFNpemVcclxuICAgIH07XHJcbiAgICBsYXN0VGV4dE9iamVjdCA9IGF2b2lkQ29sbGlzaW9uKHRleHRPYmplY3QsIGxhc3RUZXh0T2JqZWN0KTtcclxuICAgIHRleHRPYmplY3RDb2xsZWN0aW9uLnB1c2gobGFzdFRleHRPYmplY3QpO1xyXG4gIH1cclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0T2JqZWN0Q29sbGVjdGlvbi5sZW5ndGg7IGkrKykge1xyXG4gICAgbGV0IGl0ZW0gPSB0ZXh0T2JqZWN0Q29sbGVjdGlvbltpXTtcclxuICAgIGxldCBsaW5lU3RhcnRQb2lzdGlvbiA9IGNvbnZlcnRDb29yZGluYXRlT3JpZ2luKGl0ZW0ubGluZVN0YXJ0LngsIGl0ZW0ubGluZVN0YXJ0LnksIGNlbnRlcik7XHJcbiAgICBsZXQgbGluZUVuZFBvaXN0aW9uID0gY29udmVydENvb3JkaW5hdGVPcmlnaW4oaXRlbS5saW5lRW5kLngsIGl0ZW0ubGluZUVuZC55LCBjZW50ZXIpO1xyXG4gICAgbGV0IHRleHRQb3NpdGlvbiA9IGNvbnZlcnRDb29yZGluYXRlT3JpZ2luKGl0ZW0uc3RhcnQueCwgaXRlbS5zdGFydC55LCBjZW50ZXIpO1xyXG4gICAgY29udGV4dC5zZXRMaW5lV2lkdGgoMSAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICBjb250ZXh0LnNldEZvbnRTaXplKGNvbmZpZy5mb250U2l6ZSk7XHJcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShpdGVtLmNvbG9yKTtcclxuICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGl0ZW0uY29sb3IpO1xyXG4gICAgY29udGV4dC5tb3ZlVG8obGluZVN0YXJ0UG9pc3Rpb24ueCwgbGluZVN0YXJ0UG9pc3Rpb24ueSk7XHJcbiAgICBsZXQgY3VydmVTdGFydFggPSBpdGVtLnN0YXJ0LnggPCAwID8gdGV4dFBvc2l0aW9uLnggKyBpdGVtLndpZHRoIDogdGV4dFBvc2l0aW9uLng7XHJcbiAgICBsZXQgdGV4dFN0YXJ0WCA9IGl0ZW0uc3RhcnQueCA8IDAgPyB0ZXh0UG9zaXRpb24ueCAtIDUgOiB0ZXh0UG9zaXRpb24ueCArIDU7XHJcbiAgICBjb250ZXh0LnF1YWRyYXRpY0N1cnZlVG8obGluZUVuZFBvaXN0aW9uLngsIGxpbmVFbmRQb2lzdGlvbi55LCBjdXJ2ZVN0YXJ0WCwgdGV4dFBvc2l0aW9uLnkpO1xyXG4gICAgY29udGV4dC5tb3ZlVG8obGluZVN0YXJ0UG9pc3Rpb24ueCwgbGluZVN0YXJ0UG9pc3Rpb24ueSk7XHJcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0Lm1vdmVUbyh0ZXh0UG9zaXRpb24ueCArIGl0ZW0ud2lkdGgsIHRleHRQb3NpdGlvbi55KTtcclxuICAgIGNvbnRleHQuYXJjKGN1cnZlU3RhcnRYLCB0ZXh0UG9zaXRpb24ueSwgMiwgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgIGNvbnRleHQuc2V0Rm9udFNpemUoaXRlbS50ZXh0U2l6ZSB8fCBjb25maWcuZm9udFNpemUpO1xyXG4gICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaXRlbS50ZXh0Q29sb3IgfHwgJyM2NjY2NjYnKTtcclxuICAgIGNvbnRleHQuZmlsbFRleHQoaXRlbS50ZXh0LCB0ZXh0U3RhcnRYLCB0ZXh0UG9zaXRpb24ueSArIDMpO1xyXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1Rvb2xUaXBTcGxpdExpbmUob2Zmc2V0WCwgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcbiAgdmFyIHRvb2xUaXBPcHRpb24gPSBvcHRzLmV4dHJhLnRvb2x0aXAgfHwge307XHJcbiAgdG9vbFRpcE9wdGlvbi5ncmlkVHlwZSA9IHRvb2xUaXBPcHRpb24uZ3JpZFR5cGUgPT0gdW5kZWZpbmVkID8gJ3NvbGlkJyA6IHRvb2xUaXBPcHRpb24uZ3JpZFR5cGU7XHJcbiAgdG9vbFRpcE9wdGlvbi5kYXNoTGVuZ3RoID0gdG9vbFRpcE9wdGlvbi5kYXNoTGVuZ3RoID09IHVuZGVmaW5lZCA/IDQgOiB0b29sVGlwT3B0aW9uLmRhc2hMZW5ndGg7XHJcbiAgdmFyIHN0YXJ0WSA9IG9wdHMuYXJlYVswXTtcclxuICB2YXIgZW5kWSA9IG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzJdO1xyXG5cclxuICBpZiAodG9vbFRpcE9wdGlvbi5ncmlkVHlwZSA9PSAnZGFzaCcpIHtcclxuICAgIGNvbnRleHQuc2V0TGluZURhc2goW3Rvb2xUaXBPcHRpb24uZGFzaExlbmd0aCwgdG9vbFRpcE9wdGlvbi5kYXNoTGVuZ3RoXSk7XHJcbiAgfVxyXG4gIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUodG9vbFRpcE9wdGlvbi5ncmlkQ29sb3IgfHwgJyNjY2NjY2MnKTtcclxuICBjb250ZXh0LnNldExpbmVXaWR0aCgxICogb3B0cy5waXhlbFJhdGlvKTtcclxuICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gIGNvbnRleHQubW92ZVRvKG9mZnNldFgsIHN0YXJ0WSk7XHJcbiAgY29udGV4dC5saW5lVG8ob2Zmc2V0WCwgZW5kWSk7XHJcbiAgY29udGV4dC5zdHJva2UoKTtcclxuICBjb250ZXh0LnNldExpbmVEYXNoKFtdKTtcclxuXHJcbiAgaWYgKHRvb2xUaXBPcHRpb24ueEF4aXNMYWJlbCkge1xyXG4gICAgbGV0IGxhYmVsVGV4dCA9IG9wdHMuY2F0ZWdvcmllc1tvcHRzLnRvb2x0aXAuaW5kZXhdO1xyXG4gICAgY29udGV4dC5zZXRGb250U2l6ZShjb25maWcuZm9udFNpemUpO1xyXG4gICAgbGV0IHRleHRXaWR0aCA9IG1lYXN1cmVUZXh0KGxhYmVsVGV4dCwgY29uZmlnLmZvbnRTaXplKTtcclxuXHJcbiAgICBsZXQgdGV4dFggPSBvZmZzZXRYIC0gMC41ICogdGV4dFdpZHRoO1xyXG4gICAgbGV0IHRleHRZID0gZW5kWTtcclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0LnNldEZpbGxTdHlsZShoZXhUb1JnYih0b29sVGlwT3B0aW9uLmxhYmVsQmdDb2xvciB8fCBjb25maWcudG9vbFRpcEJhY2tncm91bmQsIHRvb2xUaXBPcHRpb24ubGFiZWxCZ09wYWNpdHkgfHwgY29uZmlnLnRvb2xUaXBPcGFjaXR5KSk7XHJcbiAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKHRvb2xUaXBPcHRpb24ubGFiZWxCZ0NvbG9yIHx8IGNvbmZpZy50b29sVGlwQmFja2dyb3VuZCk7XHJcbiAgICBjb250ZXh0LnNldExpbmVXaWR0aCgxICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgIGNvbnRleHQucmVjdCh0ZXh0WCAtIGNvbmZpZy50b29sVGlwUGFkZGluZywgdGV4dFksIHRleHRXaWR0aCArIDIgKiBjb25maWcudG9vbFRpcFBhZGRpbmcsIGNvbmZpZy5mb250U2l6ZSArIDIgKiBjb25maWcudG9vbFRpcFBhZGRpbmcpO1xyXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICBjb250ZXh0LmZpbGwoKTtcclxuXHJcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgY29udGV4dC5zZXRGb250U2l6ZShjb25maWcuZm9udFNpemUpO1xyXG4gICAgY29udGV4dC5zZXRGaWxsU3R5bGUodG9vbFRpcE9wdGlvbi5sYWJlbEZvbnRDb2xvciB8fCBjb25maWcuZm9udENvbG9yKTtcclxuICAgIGNvbnRleHQuZmlsbFRleHQoU3RyaW5nKGxhYmVsVGV4dCksIHRleHRYLCB0ZXh0WSArIGNvbmZpZy50b29sVGlwUGFkZGluZyArIGNvbmZpZy5mb250U2l6ZSk7XHJcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgY29udGV4dC5zdHJva2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdNYXJrTGluZShvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcclxuICBsZXQgbWFya0xpbmVPcHRpb24gPSBhc3NpZ24oe30sIHtcclxuICAgIHR5cGU6ICdzb2xpZCcsXHJcbiAgICBkYXNoTGVuZ3RoOiA0LFxyXG4gICAgZGF0YTogW11cclxuICB9LCBvcHRzLmV4dHJhLm1hcmtMaW5lKTtcclxuICBsZXQgc3RhcnRYID0gb3B0cy5hcmVhWzNdO1xyXG4gIGxldCBlbmRYID0gb3B0cy53aWR0aCAtIG9wdHMuYXJlYVsxXTtcclxuICBsZXQgcG9pbnRzID0gY2FsTWFya0xpbmVEYXRhKG1hcmtMaW5lT3B0aW9uLmRhdGEsIG9wdHMpO1xyXG5cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgbGV0IGl0ZW0gPSBhc3NpZ24oe30sIHtcclxuICAgICAgbGluZUNvbG9yOiAnI0RFNEE0MicsXHJcbiAgICAgIHNob3dMYWJlbDogZmFsc2UsXHJcbiAgICAgIGxhYmVsRm9udENvbG9yOiAnIzY2NjY2NicsXHJcbiAgICAgIGxhYmVsQmdDb2xvcjogJyNERkU4RkYnLFxyXG4gICAgICBsYWJlbEJnT3BhY2l0eTogMC44LFxyXG4gICAgICB5QXhpc0luZGV4OiAwXHJcbiAgICB9LCBwb2ludHNbaV0pO1xyXG5cclxuICAgIGlmIChtYXJrTGluZU9wdGlvbi50eXBlID09ICdkYXNoJykge1xyXG4gICAgICBjb250ZXh0LnNldExpbmVEYXNoKFttYXJrTGluZU9wdGlvbi5kYXNoTGVuZ3RoLCBtYXJrTGluZU9wdGlvbi5kYXNoTGVuZ3RoXSk7XHJcbiAgICB9XHJcbiAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKGl0ZW0ubGluZUNvbG9yKTtcclxuICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDEgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgIGNvbnRleHQubW92ZVRvKHN0YXJ0WCwgaXRlbS55KTtcclxuICAgIGNvbnRleHQubGluZVRvKGVuZFgsIGl0ZW0ueSk7XHJcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgY29udGV4dC5zZXRMaW5lRGFzaChbXSk7XHJcbiAgICBpZiAoaXRlbS5zaG93TGFiZWwpIHtcclxuICAgICAgbGV0IGxhYmVsVGV4dCA9IG9wdHMueUF4aXMuZm9ybWF0ID8gb3B0cy55QXhpcy5mb3JtYXQoTnVtYmVyKGl0ZW0udmFsdWUpKSA6IGl0ZW0udmFsdWU7XHJcbiAgICAgIGNvbnRleHQuc2V0Rm9udFNpemUoY29uZmlnLmZvbnRTaXplKTtcclxuICAgICAgbGV0IHRleHRXaWR0aCA9IG1lYXN1cmVUZXh0KGxhYmVsVGV4dCwgY29uZmlnLmZvbnRTaXplKTtcclxuICAgICAgbGV0IGJnU3RhcnRYID0gb3B0cy5wYWRkaW5nWzNdICsgY29uZmlnLnlBeGlzVGl0bGVXaWR0aCAtIGNvbmZpZy50b29sVGlwUGFkZGluZztcclxuICAgICAgbGV0IGJnRW5kWCA9IE1hdGgubWF4KG9wdHMuYXJlYVszXSwgdGV4dFdpZHRoICsgY29uZmlnLnRvb2xUaXBQYWRkaW5nICogMik7XHJcbiAgICAgIGxldCBiZ1dpZHRoID0gYmdFbmRYIC0gYmdTdGFydFg7XHJcblxyXG4gICAgICBsZXQgdGV4dFggPSBiZ1N0YXJ0WCArIChiZ1dpZHRoIC0gdGV4dFdpZHRoKSAvIDI7XHJcbiAgICAgIGxldCB0ZXh0WSA9IGl0ZW0ueTtcclxuICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaGV4VG9SZ2IoaXRlbS5sYWJlbEJnQ29sb3IsIGl0ZW0ubGFiZWxCZ09wYWNpdHkpKTtcclxuICAgICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShpdGVtLmxhYmVsQmdDb2xvcik7XHJcbiAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDEgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjb250ZXh0LnJlY3QoYmdTdGFydFgsIHRleHRZIC0gMC41ICogY29uZmlnLmZvbnRTaXplIC0gY29uZmlnLnRvb2xUaXBQYWRkaW5nLCBiZ1dpZHRoLCBjb25maWcuZm9udFNpemUgKyAyICogY29uZmlnLnRvb2xUaXBQYWRkaW5nKTtcclxuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgY29udGV4dC5maWxsKCk7XHJcblxyXG4gICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjb250ZXh0LnNldEZvbnRTaXplKGNvbmZpZy5mb250U2l6ZSk7XHJcbiAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGl0ZW0ubGFiZWxGb250Q29sb3IpO1xyXG4gICAgICBjb250ZXh0LmZpbGxUZXh0KFN0cmluZyhsYWJlbFRleHQpLCB0ZXh0WCwgdGV4dFkgKyAwLjUgKiBjb25maWcuZm9udFNpemUpO1xyXG4gICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1Rvb2xUaXBIb3JpemVudGFsTGluZShvcHRzLCBjb25maWcsIGNvbnRleHQsIGVhY2hTcGFjaW5nLCB4QXhpc1BvaW50cykge1xyXG4gIHZhciB0b29sVGlwT3B0aW9uID0gYXNzaWduKHt9LCB7XHJcbiAgICBncmlkVHlwZTogJ3NvbGlkJyxcclxuICAgIGRhc2hMZW5ndGg6IDRcclxuICB9LCBvcHRzLmV4dHJhLnRvb2x0aXApO1xyXG5cclxuICB2YXIgc3RhcnRYID0gb3B0cy5hcmVhWzNdO1xyXG4gIHZhciBlbmRYID0gb3B0cy53aWR0aCAtIG9wdHMuYXJlYVsxXTtcclxuXHJcbiAgaWYgKHRvb2xUaXBPcHRpb24uZ3JpZFR5cGUgPT0gJ2Rhc2gnKSB7XHJcbiAgICBjb250ZXh0LnNldExpbmVEYXNoKFt0b29sVGlwT3B0aW9uLmRhc2hMZW5ndGgsIHRvb2xUaXBPcHRpb24uZGFzaExlbmd0aF0pO1xyXG4gIH1cclxuICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKHRvb2xUaXBPcHRpb24uZ3JpZENvbG9yIHx8ICcjY2NjY2NjJyk7XHJcbiAgY29udGV4dC5zZXRMaW5lV2lkdGgoMSAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICBjb250ZXh0Lm1vdmVUbyhzdGFydFgsIG9wdHMudG9vbHRpcC5vZmZzZXQueSk7XHJcbiAgY29udGV4dC5saW5lVG8oZW5kWCwgb3B0cy50b29sdGlwLm9mZnNldC55KTtcclxuICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gIGNvbnRleHQuc2V0TGluZURhc2goW10pO1xyXG5cclxuICBpZiAodG9vbFRpcE9wdGlvbi55QXhpc0xhYmVsKSB7XHJcbiAgICBsZXQgbGFiZWxUZXh0ID0gY2FsVG9vbHRpcFlBeGlzRGF0YShvcHRzLnRvb2x0aXAub2Zmc2V0LnksIG9wdHMuc2VyaWVzLCBvcHRzLCBjb25maWcsIGVhY2hTcGFjaW5nKTtcclxuICAgIGxldCB3aWR0aEFyciA9IG9wdHMuY2hhcnREYXRhLnlBeGlzRGF0YS55QXhpc1dpZHRoO1xyXG4gICAgbGV0IHRTdGFydExlZnQ9b3B0cy5hcmVhWzNdO1xyXG4gICAgbGV0IHRTdGFydFJpZ2h0PW9wdHMud2lkdGgtb3B0cy5hcmVhWzFdO1xyXG4gICAgZm9yKGxldCBpPTA7aTxsYWJlbFRleHQubGVuZ3RoO2krKyl7XHJcbiAgICAgIGNvbnRleHQuc2V0Rm9udFNpemUoY29uZmlnLmZvbnRTaXplKTtcclxuICAgICAgbGV0IHRleHRXaWR0aCA9IG1lYXN1cmVUZXh0KGxhYmVsVGV4dFtpXSwgY29uZmlnLmZvbnRTaXplKTtcclxuICAgICAgbGV0IGJnU3RhcnRYLGJnRW5kWCxiZ1dpZHRoO1xyXG4gICAgICBpZih3aWR0aEFycltpXS5wb3NpdGlvbiA9PSAnbGVmdCcpe1xyXG4gICAgICAgIGJnU3RhcnRYID0gdFN0YXJ0TGVmdCAtIHdpZHRoQXJyW2ldLndpZHRoO1xyXG4gICAgICAgIGJnRW5kWCA9IE1hdGgubWF4KGJnU3RhcnRYLCBiZ1N0YXJ0WCArIHRleHRXaWR0aCArIGNvbmZpZy50b29sVGlwUGFkZGluZyAqIDIpO1xyXG4gICAgICB9ZWxzZXtcclxuICAgICAgICBiZ1N0YXJ0WCA9IHRTdGFydFJpZ2h0O1xyXG4gICAgICAgIGJnRW5kWCA9IE1hdGgubWF4KGJnU3RhcnRYICsgd2lkdGhBcnJbaV0ud2lkdGgsIGJnU3RhcnRYICsgdGV4dFdpZHRoICsgY29uZmlnLnRvb2xUaXBQYWRkaW5nICogMik7XHJcbiAgICAgIH1cclxuICAgICAgYmdXaWR0aCA9IGJnRW5kWCAtIGJnU3RhcnRYO1xyXG4gICAgICBcclxuICAgICAgbGV0IHRleHRYID0gYmdTdGFydFggKyAoYmdXaWR0aCAtIHRleHRXaWR0aCkgLyAyO1xyXG4gICAgICBsZXQgdGV4dFkgPSBvcHRzLnRvb2x0aXAub2Zmc2V0Lnk7XHJcbiAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGhleFRvUmdiKHRvb2xUaXBPcHRpb24ubGFiZWxCZ0NvbG9yIHx8IGNvbmZpZy50b29sVGlwQmFja2dyb3VuZCwgdG9vbFRpcE9wdGlvbi5sYWJlbEJnT3BhY2l0eSB8fCBjb25maWcudG9vbFRpcE9wYWNpdHkpKTtcclxuICAgICAgY29udGV4dC5zZXRTdHJva2VTdHlsZSh0b29sVGlwT3B0aW9uLmxhYmVsQmdDb2xvciB8fCBjb25maWcudG9vbFRpcEJhY2tncm91bmQpO1xyXG4gICAgICBjb250ZXh0LnNldExpbmVXaWR0aCgxICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgY29udGV4dC5yZWN0KGJnU3RhcnRYLCB0ZXh0WSAtIDAuNSAqIGNvbmZpZy5mb250U2l6ZSAtIGNvbmZpZy50b29sVGlwUGFkZGluZywgYmdXaWR0aCwgY29uZmlnLmZvbnRTaXplICsgMiAqIGNvbmZpZy50b29sVGlwUGFkZGluZyk7XHJcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gICAgICBcclxuICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgY29udGV4dC5zZXRGb250U2l6ZShjb25maWcuZm9udFNpemUpO1xyXG4gICAgICBjb250ZXh0LnNldEZpbGxTdHlsZSh0b29sVGlwT3B0aW9uLmxhYmVsRm9udENvbG9yIHx8IGNvbmZpZy5mb250Q29sb3IpO1xyXG4gICAgICBjb250ZXh0LmZpbGxUZXh0KGxhYmVsVGV4dFtpXSwgdGV4dFgsIHRleHRZICsgMC41ICogY29uZmlnLmZvbnRTaXplKTtcclxuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgaWYod2lkdGhBcnJbaV0ucG9zaXRpb24gPT0gJ2xlZnQnKXtcclxuICAgICAgICB0U3RhcnRMZWZ0IC09KHdpZHRoQXJyW2ldLndpZHRoICsgb3B0cy55QXhpcy5wYWRkaW5nKTtcclxuICAgICAgfWVsc2V7XHJcbiAgICAgICAgdFN0YXJ0UmlnaHQgKz13aWR0aEFycltpXS53aWR0aCsgb3B0cy55QXhpcy5wYWRkaW5nO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3VG9vbFRpcFNwbGl0QXJlYShvZmZzZXRYLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIGVhY2hTcGFjaW5nKSB7XHJcbiAgdmFyIHRvb2xUaXBPcHRpb24gPSBhc3NpZ24oe30sIHtcclxuICAgIGFjdGl2ZUJnQ29sb3I6ICcjMDAwMDAwJyxcclxuICAgIGFjdGl2ZUJnT3BhY2l0eTogMC4wOFxyXG4gIH0sIG9wdHMuZXh0cmEudG9vbHRpcCk7XHJcbiAgdmFyIHN0YXJ0WSA9IG9wdHMuYXJlYVswXTtcclxuICB2YXIgZW5kWSA9IG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzJdO1xyXG4gIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgY29udGV4dC5zZXRGaWxsU3R5bGUoaGV4VG9SZ2IodG9vbFRpcE9wdGlvbi5hY3RpdmVCZ0NvbG9yLCB0b29sVGlwT3B0aW9uLmFjdGl2ZUJnT3BhY2l0eSkpO1xyXG4gIGNvbnRleHQucmVjdChvZmZzZXRYIC0gZWFjaFNwYWNpbmcgLyAyLCBzdGFydFksIGVhY2hTcGFjaW5nLCBlbmRZIC0gc3RhcnRZKTtcclxuICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gIGNvbnRleHQuZmlsbCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3VG9vbFRpcCh0ZXh0TGlzdCwgb2Zmc2V0LCBvcHRzLCBjb25maWcsIGNvbnRleHQsIGVhY2hTcGFjaW5nLCB4QXhpc1BvaW50cykge1xyXG4gIHZhciB0b29sVGlwT3B0aW9uID0gYXNzaWduKHt9LCB7XHJcblx0XHRzaG93Qm94OnRydWUsXHJcbiAgICBiZ0NvbG9yOiAnIzAwMDAwMCcsXHJcbiAgICBiZ09wYWNpdHk6IDAuNyxcclxuICAgIGZvbnRDb2xvcjogJyNGRkZGRkYnXHJcbiAgfSwgb3B0cy5leHRyYS50b29sdGlwKTtcclxuICB2YXIgbGVnZW5kV2lkdGggPSA0ICogb3B0cy5waXhlbFJhdGlvO1xyXG4gIHZhciBsZWdlbmRNYXJnaW5SaWdodCA9IDUgKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgdmFyIGFycm93V2lkdGggPSA4ICogb3B0cy5waXhlbFJhdGlvO1xyXG4gIHZhciBpc092ZXJSaWdodEJvcmRlciA9IGZhbHNlO1xyXG4gIGlmIChvcHRzLnR5cGUgPT0gJ2xpbmUnIHx8IG9wdHMudHlwZSA9PSAnYXJlYScgfHwgb3B0cy50eXBlID09ICdjYW5kbGUnIHx8IG9wdHMudHlwZSA9PSAnbWl4Jykge1xyXG4gICAgZHJhd1Rvb2xUaXBTcGxpdExpbmUob3B0cy50b29sdGlwLm9mZnNldC54LCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gIH1cclxuXHJcbiAgb2Zmc2V0ID0gYXNzaWduKHtcclxuICAgIHg6IDAsXHJcbiAgICB5OiAwXHJcbiAgfSwgb2Zmc2V0KTtcclxuICBvZmZzZXQueSAtPSA4ICogb3B0cy5waXhlbFJhdGlvO1xyXG4gIHZhciB0ZXh0V2lkdGggPSB0ZXh0TGlzdC5tYXAoZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgcmV0dXJuIG1lYXN1cmVUZXh0KGl0ZW0udGV4dCwgY29uZmlnLmZvbnRTaXplKTtcclxuICB9KTtcclxuICB2YXIgdG9vbFRpcFdpZHRoID0gbGVnZW5kV2lkdGggKyBsZWdlbmRNYXJnaW5SaWdodCArIDQgKiBjb25maWcudG9vbFRpcFBhZGRpbmcgKyBNYXRoLm1heC5hcHBseShudWxsLCB0ZXh0V2lkdGgpO1xyXG4gIHZhciB0b29sVGlwSGVpZ2h0ID0gMiAqIGNvbmZpZy50b29sVGlwUGFkZGluZyArIHRleHRMaXN0Lmxlbmd0aCAqIGNvbmZpZy50b29sVGlwTGluZUhlaWdodDtcclxuXHJcblx0aWYodG9vbFRpcE9wdGlvbi5zaG93Qm94ID09IGZhbHNlKXsgcmV0dXJuIH1cclxuICAvLyBpZiBiZXlvbmQgdGhlIHJpZ2h0IGJvcmRlclxyXG4gIGlmIChvZmZzZXQueCAtIE1hdGguYWJzKG9wdHMuX3Njcm9sbERpc3RhbmNlXykgKyBhcnJvd1dpZHRoICsgdG9vbFRpcFdpZHRoID4gb3B0cy53aWR0aCkge1xyXG4gICAgaXNPdmVyUmlnaHRCb3JkZXIgPSB0cnVlO1xyXG4gIH1cclxuICBpZiAodG9vbFRpcEhlaWdodCArIG9mZnNldC55ID4gb3B0cy5oZWlnaHQpIHtcclxuICAgIG9mZnNldC55ID0gb3B0cy5oZWlnaHQgLSB0b29sVGlwSGVpZ2h0O1xyXG4gIH1cclxuICAvLyBkcmF3IGJhY2tncm91bmQgcmVjdFxyXG4gIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgY29udGV4dC5zZXRGaWxsU3R5bGUoaGV4VG9SZ2IodG9vbFRpcE9wdGlvbi5iZ0NvbG9yIHx8IGNvbmZpZy50b29sVGlwQmFja2dyb3VuZCwgdG9vbFRpcE9wdGlvbi5iZ09wYWNpdHkgfHwgY29uZmlnLnRvb2xUaXBPcGFjaXR5KSk7XHJcbiAgaWYgKGlzT3ZlclJpZ2h0Qm9yZGVyKSB7XHJcbiAgICBjb250ZXh0Lm1vdmVUbyhvZmZzZXQueCwgb2Zmc2V0LnkgKyAxMCAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICBjb250ZXh0LmxpbmVUbyhvZmZzZXQueCAtIGFycm93V2lkdGgsIG9mZnNldC55ICsgMTAgKiBvcHRzLnBpeGVsUmF0aW8gLSA1ICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgIGNvbnRleHQubGluZVRvKG9mZnNldC54IC0gYXJyb3dXaWR0aCwgb2Zmc2V0LnkpO1xyXG4gICAgY29udGV4dC5saW5lVG8ob2Zmc2V0LnggLSBhcnJvd1dpZHRoIC0gTWF0aC5yb3VuZCh0b29sVGlwV2lkdGgpLCBvZmZzZXQueSk7XHJcbiAgICBjb250ZXh0LmxpbmVUbyhvZmZzZXQueCAtIGFycm93V2lkdGggLSBNYXRoLnJvdW5kKHRvb2xUaXBXaWR0aCksIG9mZnNldC55ICsgdG9vbFRpcEhlaWdodCk7XHJcbiAgICBjb250ZXh0LmxpbmVUbyhvZmZzZXQueCAtIGFycm93V2lkdGgsIG9mZnNldC55ICsgdG9vbFRpcEhlaWdodCk7XHJcbiAgICBjb250ZXh0LmxpbmVUbyhvZmZzZXQueCAtIGFycm93V2lkdGgsIG9mZnNldC55ICsgMTAgKiBvcHRzLnBpeGVsUmF0aW8gKyA1ICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgIGNvbnRleHQubGluZVRvKG9mZnNldC54LCBvZmZzZXQueSArIDEwICogb3B0cy5waXhlbFJhdGlvKTtcclxuICB9IGVsc2Uge1xyXG4gICAgY29udGV4dC5tb3ZlVG8ob2Zmc2V0LngsIG9mZnNldC55ICsgMTAgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgY29udGV4dC5saW5lVG8ob2Zmc2V0LnggKyBhcnJvd1dpZHRoLCBvZmZzZXQueSArIDEwICogb3B0cy5waXhlbFJhdGlvIC0gNSAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICBjb250ZXh0LmxpbmVUbyhvZmZzZXQueCArIGFycm93V2lkdGgsIG9mZnNldC55KTtcclxuICAgIGNvbnRleHQubGluZVRvKG9mZnNldC54ICsgYXJyb3dXaWR0aCArIE1hdGgucm91bmQodG9vbFRpcFdpZHRoKSwgb2Zmc2V0LnkpO1xyXG4gICAgY29udGV4dC5saW5lVG8ob2Zmc2V0LnggKyBhcnJvd1dpZHRoICsgTWF0aC5yb3VuZCh0b29sVGlwV2lkdGgpLCBvZmZzZXQueSArIHRvb2xUaXBIZWlnaHQpO1xyXG4gICAgY29udGV4dC5saW5lVG8ob2Zmc2V0LnggKyBhcnJvd1dpZHRoLCBvZmZzZXQueSArIHRvb2xUaXBIZWlnaHQpO1xyXG4gICAgY29udGV4dC5saW5lVG8ob2Zmc2V0LnggKyBhcnJvd1dpZHRoLCBvZmZzZXQueSArIDEwICogb3B0cy5waXhlbFJhdGlvICsgNSAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICBjb250ZXh0LmxpbmVUbyhvZmZzZXQueCwgb2Zmc2V0LnkgKyAxMCAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgfVxyXG5cclxuICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gIGNvbnRleHQuZmlsbCgpO1xyXG5cclxuICAvLyBkcmF3IGxlZ2VuZFxyXG4gIHRleHRMaXN0LmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgIGlmIChpdGVtLmNvbG9yICE9PSBudWxsKSB7XHJcbiAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGl0ZW0uY29sb3IpO1xyXG4gICAgICB2YXIgc3RhcnRYID0gb2Zmc2V0LnggKyBhcnJvd1dpZHRoICsgMiAqIGNvbmZpZy50b29sVGlwUGFkZGluZztcclxuICAgICAgdmFyIHN0YXJ0WSA9IG9mZnNldC55ICsgKGNvbmZpZy50b29sVGlwTGluZUhlaWdodCAtIGNvbmZpZy5mb250U2l6ZSkgLyAyICsgY29uZmlnLnRvb2xUaXBMaW5lSGVpZ2h0ICogaW5kZXggK1xyXG4gICAgICAgIGNvbmZpZy50b29sVGlwUGFkZGluZyArIDE7XHJcbiAgICAgIGlmIChpc092ZXJSaWdodEJvcmRlcikge1xyXG4gICAgICAgIHN0YXJ0WCA9IG9mZnNldC54IC0gdG9vbFRpcFdpZHRoIC0gYXJyb3dXaWR0aCArIDIgKiBjb25maWcudG9vbFRpcFBhZGRpbmc7XHJcbiAgICAgIH1cclxuICAgICAgY29udGV4dC5maWxsUmVjdChzdGFydFgsIHN0YXJ0WSwgbGVnZW5kV2lkdGgsIGNvbmZpZy5mb250U2l6ZSk7XHJcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIC8vIGRyYXcgdGV4dCBsaXN0XHJcblxyXG4gIHRleHRMaXN0LmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgIHZhciBzdGFydFggPSBvZmZzZXQueCArIGFycm93V2lkdGggKyAyICogY29uZmlnLnRvb2xUaXBQYWRkaW5nICsgbGVnZW5kV2lkdGggKyBsZWdlbmRNYXJnaW5SaWdodDtcclxuICAgIGlmIChpc092ZXJSaWdodEJvcmRlcikge1xyXG4gICAgICBzdGFydFggPSBvZmZzZXQueCAtIHRvb2xUaXBXaWR0aCAtIGFycm93V2lkdGggKyAyICogY29uZmlnLnRvb2xUaXBQYWRkaW5nICsgK2xlZ2VuZFdpZHRoICsgbGVnZW5kTWFyZ2luUmlnaHQ7XHJcbiAgICB9XHJcbiAgICB2YXIgc3RhcnRZID0gb2Zmc2V0LnkgKyAoY29uZmlnLnRvb2xUaXBMaW5lSGVpZ2h0IC0gY29uZmlnLmZvbnRTaXplKSAvIDIgKyBjb25maWcudG9vbFRpcExpbmVIZWlnaHQgKiBpbmRleCArXHJcbiAgICAgIGNvbmZpZy50b29sVGlwUGFkZGluZztcclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0LnNldEZvbnRTaXplKGNvbmZpZy5mb250U2l6ZSk7XHJcbiAgICBjb250ZXh0LnNldEZpbGxTdHlsZSh0b29sVGlwT3B0aW9uLmZvbnRDb2xvcik7XHJcbiAgICBjb250ZXh0LmZpbGxUZXh0KGl0ZW0udGV4dCwgc3RhcnRYLCBzdGFydFkgKyBjb25maWcuZm9udFNpemUpO1xyXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdZQXhpc1RpdGxlKHRpdGxlLCBvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcclxuICB2YXIgc3RhcnRYID0gY29uZmlnLnhBeGlzSGVpZ2h0ICsgKG9wdHMuaGVpZ2h0IC0gY29uZmlnLnhBeGlzSGVpZ2h0IC0gbWVhc3VyZVRleHQodGl0bGUpKSAvIDI7XHJcbiAgY29udGV4dC5zYXZlKCk7XHJcbiAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICBjb250ZXh0LnNldEZvbnRTaXplKGNvbmZpZy5mb250U2l6ZSk7XHJcbiAgY29udGV4dC5zZXRGaWxsU3R5bGUob3B0cy55QXhpcy50aXRsZUZvbnRDb2xvciB8fCAnIzMzMzMzMycpO1xyXG4gIGNvbnRleHQudHJhbnNsYXRlKDAsIG9wdHMuaGVpZ2h0KTtcclxuICBjb250ZXh0LnJvdGF0ZSgtOTAgKiBNYXRoLlBJIC8gMTgwKTtcclxuICBjb250ZXh0LmZpbGxUZXh0KHRpdGxlLCBzdGFydFgsIG9wdHMucGFkZGluZ1szXSArIDAuNSAqIGNvbmZpZy5mb250U2l6ZSk7XHJcbiAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gIGNvbnRleHQucmVzdG9yZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3Q29sdW1uRGF0YVBvaW50cyhzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xyXG4gIGxldCBwcm9jZXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAxO1xyXG4gIGxldCB4QXhpc0RhdGEgPSBvcHRzLmNoYXJ0RGF0YS54QXhpc0RhdGEsXHJcbiAgICB4QXhpc1BvaW50cyA9IHhBeGlzRGF0YS54QXhpc1BvaW50cyxcclxuICAgIGVhY2hTcGFjaW5nID0geEF4aXNEYXRhLmVhY2hTcGFjaW5nO1xyXG4gIGxldCBjb2x1bW5PcHRpb24gPSBhc3NpZ24oe30sIHtcclxuICAgIHR5cGU6ICdncm91cCcsXHJcbiAgICB3aWR0aDogZWFjaFNwYWNpbmcgLyAyLFxyXG4gICAgbWV0ZXI6IHtcclxuICAgICAgYm9yZGVyOiA0LFxyXG4gICAgICBmaWxsQ29sb3I6ICcjRkZGRkZGJ1xyXG4gICAgfVxyXG4gIH0sIG9wdHMuZXh0cmEuY29sdW1uKTtcclxuICBcclxuICBsZXQgY2FsUG9pbnRzID0gW107XHJcbiAgY29udGV4dC5zYXZlKCk7XHJcblx0XHJcblx0bGV0IGxlZnROdW09LTI7XHJcblx0bGV0IHJpZ2h0TnVtPXhBeGlzUG9pbnRzLmxlbmd0aCsyO1xyXG5cdFxyXG4gIGlmIChvcHRzLl9zY3JvbGxEaXN0YW5jZV8gJiYgb3B0cy5fc2Nyb2xsRGlzdGFuY2VfICE9PSAwICYmIG9wdHMuZW5hYmxlU2Nyb2xsID09PSB0cnVlKSB7XHJcbiAgICBjb250ZXh0LnRyYW5zbGF0ZShvcHRzLl9zY3JvbGxEaXN0YW5jZV8sIDApO1xyXG5cdFx0bGVmdE51bT1NYXRoLmZsb29yKC1vcHRzLl9zY3JvbGxEaXN0YW5jZV8vZWFjaFNwYWNpbmcpLTI7XHJcblx0XHRyaWdodE51bT1sZWZ0TnVtK29wdHMueEF4aXMuaXRlbUNvdW50KzQ7XHJcbiAgfVxyXG4gIGlmIChvcHRzLnRvb2x0aXAgJiYgb3B0cy50b29sdGlwLnRleHRMaXN0ICYmIG9wdHMudG9vbHRpcC50ZXh0TGlzdC5sZW5ndGggJiYgcHJvY2VzcyA9PT0gMSkge1xyXG4gICAgZHJhd1Rvb2xUaXBTcGxpdEFyZWEob3B0cy50b29sdGlwLm9mZnNldC54LCBvcHRzLCBjb25maWcsIGNvbnRleHQsIGVhY2hTcGFjaW5nKTtcclxuICB9XHJcblx0XHJcbiAgc2VyaWVzLmZvckVhY2goZnVuY3Rpb24oZWFjaFNlcmllcywgc2VyaWVzSW5kZXgpIHtcclxuICAgIGxldCByYW5nZXMsbWluUmFuZ2UsbWF4UmFuZ2U7XHJcbiAgICByYW5nZXMgPSBbXS5jb25jYXQob3B0cy5jaGFydERhdGEueUF4aXNEYXRhLnJhbmdlc1tlYWNoU2VyaWVzLmluZGV4XSk7XHJcbiAgICBtaW5SYW5nZSA9IHJhbmdlcy5wb3AoKTtcclxuICAgIG1heFJhbmdlID0gcmFuZ2VzLnNoaWZ0KCk7XHJcbiAgICBcclxuICAgIHZhciBkYXRhID0gZWFjaFNlcmllcy5kYXRhO1xyXG4gICAgc3dpdGNoIChjb2x1bW5PcHRpb24udHlwZSkge1xyXG4gICAgICBjYXNlICdncm91cCc6XHJcbiAgICAgICAgdmFyIHBvaW50cyA9IGdldERhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZywgcHJvY2Vzcyk7XHJcbiAgICAgICAgdmFyIHRvb2x0aXBQb2ludHMgPSBnZXRTdGFja0RhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZywgc2VyaWVzSW5kZXgsIHNlcmllcywgcHJvY2Vzcyk7XHJcbiAgICAgICAgY2FsUG9pbnRzLnB1c2godG9vbHRpcFBvaW50cyk7XHJcbiAgICAgICAgcG9pbnRzID0gZml4Q29sdW1lRGF0YShwb2ludHMsIGVhY2hTcGFjaW5nLCBzZXJpZXMubGVuZ3RoLCBzZXJpZXNJbmRleCwgY29uZmlnLCBvcHRzKTtcclxuXHRcdFx0XHRmb3IobGV0IGk9MDtpPHBvaW50cy5sZW5ndGg7aSsrKXtcclxuXHRcdFx0XHRcdGxldCBpdGVtPXBvaW50c1tpXTtcclxuICAgICAgICAgIGlmIChpdGVtICE9PSBudWxsICYmIGk+bGVmdE51bSAmJiBpPHJpZ2h0TnVtKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoaXRlbS5jb2xvciB8fCBlYWNoU2VyaWVzLmNvbG9yKTtcclxuICAgICAgICAgICAgY29udGV4dC5zZXRMaW5lV2lkdGgoMSlcclxuICAgICAgICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaXRlbS5jb2xvciB8fCBlYWNoU2VyaWVzLmNvbG9yKTtcclxuICAgICAgICAgICAgdmFyIHN0YXJ0WCA9IGl0ZW0ueCAtIGl0ZW0ud2lkdGggLyAyO1xyXG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gb3B0cy5oZWlnaHQgLSBpdGVtLnkgLSBvcHRzLmFyZWFbMl07XHJcbiAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKHN0YXJ0WCwgaXRlbS55KTtcclxuICAgICAgICAgICAgY29udGV4dC5saW5lVG8oc3RhcnRYK2l0ZW0ud2lkdGgtMixpdGVtLnkpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhzdGFydFgraXRlbS53aWR0aC0yLG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzJdKTtcclxuICAgICAgICAgICAgY29udGV4dC5saW5lVG8oc3RhcnRYLG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzJdKTtcclxuICAgICAgICAgICAgY29udGV4dC5saW5lVG8oc3RhcnRYLGl0ZW0ueSk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ3N0YWNrJzpcclxuICAgICAgICAvLyDnu5jliLbloIblj6DmlbDmja7lm75cclxuICAgICAgICB2YXIgcG9pbnRzID0gZ2V0U3RhY2tEYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHNlcmllc0luZGV4LCBzZXJpZXMsIHByb2Nlc3MpO1xyXG4gICAgICAgIGNhbFBvaW50cy5wdXNoKHBvaW50cyk7XHJcbiAgICAgICAgcG9pbnRzID0gZml4Q29sdW1lU3RhY2tEYXRhKHBvaW50cywgZWFjaFNwYWNpbmcsIHNlcmllcy5sZW5ndGgsIHNlcmllc0luZGV4LCBjb25maWcsIG9wdHMsIHNlcmllcyk7XHJcblxyXG4gICAgICAgIGZvcihsZXQgaT0wO2k8cG9pbnRzLmxlbmd0aDtpKyspe1xyXG4gICAgICAgIFx0bGV0IGl0ZW09cG9pbnRzW2ldO1xyXG4gICAgICAgICAgaWYgKGl0ZW0gIT09IG51bGwgJiYgaT5sZWZ0TnVtICYmIGk8cmlnaHROdW0pIHtcclxuICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaXRlbS5jb2xvciB8fCBlYWNoU2VyaWVzLmNvbG9yKTtcclxuICAgICAgICAgICAgdmFyIHN0YXJ0WCA9IGl0ZW0ueCAtIGl0ZW0ud2lkdGggLyAyICsgMTtcclxuICAgICAgICAgICAgdmFyIGhlaWdodCA9IG9wdHMuaGVpZ2h0IC0gaXRlbS55IC0gb3B0cy5hcmVhWzJdO1xyXG4gICAgICAgICAgICB2YXIgaGVpZ2h0MCA9IG9wdHMuaGVpZ2h0IC0gaXRlbS55MCAtIG9wdHMuYXJlYVsyXTtcclxuICAgICAgICAgICAgaWYgKHNlcmllc0luZGV4ID4gMCkge1xyXG4gICAgICAgICAgICAgIGhlaWdodCAtPSBoZWlnaHQwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKHN0YXJ0WCwgaXRlbS55KTtcclxuICAgICAgICAgICAgY29udGV4dC5maWxsUmVjdChzdGFydFgsIGl0ZW0ueSwgaXRlbS53aWR0aCAtIDIsIGhlaWdodCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ21ldGVyJzpcclxuICAgICAgICAvLyDnu5jliLbmuKnluqborqHmlbDmja7lm75cclxuICAgICAgICB2YXIgcG9pbnRzID0gZ2V0RGF0YVBvaW50cyhkYXRhLCBtaW5SYW5nZSwgbWF4UmFuZ2UsIHhBeGlzUG9pbnRzLCBlYWNoU3BhY2luZywgb3B0cywgY29uZmlnLCBwcm9jZXNzKTtcclxuICAgICAgICBjYWxQb2ludHMucHVzaChwb2ludHMpO1xyXG4gICAgICAgIHBvaW50cyA9IGZpeENvbHVtZU1ldGVyRGF0YShwb2ludHMsIGVhY2hTcGFjaW5nLCBzZXJpZXMubGVuZ3RoLCBzZXJpZXNJbmRleCwgY29uZmlnLCBvcHRzLCBjb2x1bW5PcHRpb24ubWV0ZXIuYm9yZGVyKTtcclxuICAgICAgICBpZiAoc2VyaWVzSW5kZXggPT0gMCkge1xyXG4gICAgICAgICAgZm9yKGxldCBpPTA7aTxwb2ludHMubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgICBcdGxldCBpdGVtPXBvaW50c1tpXTtcclxuICAgICAgICAgICAgaWYgKGl0ZW0gIT09IG51bGwgJiYgaT5sZWZ0TnVtICYmIGk8cmlnaHROdW0pIHtcclxuICAgICAgICAgICAgICAvL+eUu+iDjOaZr+minOiJslxyXG4gICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoY29sdW1uT3B0aW9uLm1ldGVyLmZpbGxDb2xvcik7XHJcbiAgICAgICAgICAgICAgdmFyIHN0YXJ0WCA9IGl0ZW0ueCAtIGl0ZW0ud2lkdGggLyAyO1xyXG4gICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBvcHRzLmhlaWdodCAtIGl0ZW0ueSAtIG9wdHMuYXJlYVsyXTtcclxuICAgICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhzdGFydFgsIGl0ZW0ueSk7XHJcbiAgICAgICAgICAgICAgY29udGV4dC5maWxsUmVjdChzdGFydFgsIGl0ZW0ueSwgaXRlbS53aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gICAgICAgICAgICAgIC8v55S76L655qGG57q/XHJcbiAgICAgICAgICAgICAgaWYgKGNvbHVtbk9wdGlvbi5tZXRlci5ib3JkZXIgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShlYWNoU2VyaWVzLmNvbG9yKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKGNvbHVtbk9wdGlvbi5tZXRlci5ib3JkZXIgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYICsgY29sdW1uT3B0aW9uLm1ldGVyLmJvcmRlciAqIDAuNSwgaXRlbS55ICsgaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHN0YXJ0WCArIGNvbHVtbk9wdGlvbi5tZXRlci5ib3JkZXIgKiAwLjUsIGl0ZW0ueSArIGNvbHVtbk9wdGlvbi5tZXRlci5ib3JkZXIgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oc3RhcnRYICsgaXRlbS53aWR0aCAtIGNvbHVtbk9wdGlvbi5tZXRlci5ib3JkZXIgKiAwLjUsIGl0ZW0ueSArIGNvbHVtbk9wdGlvbi5tZXRlci5ib3JkZXIgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oc3RhcnRYICsgaXRlbS53aWR0aCAtIGNvbHVtbk9wdGlvbi5tZXRlci5ib3JkZXIgKiAwLjUsIGl0ZW0ueSArIGhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZm9yKGxldCBpPTA7aTxwb2ludHMubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgICBcdGxldCBpdGVtPXBvaW50c1tpXTtcclxuICAgICAgICAgICAgaWYgKGl0ZW0gIT09IG51bGwgJiYgaT5sZWZ0TnVtICYmIGk8cmlnaHROdW0pIHtcclxuICAgICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGl0ZW0uY29sb3IgfHwgZWFjaFNlcmllcy5jb2xvcik7XHJcbiAgICAgICAgICAgICAgdmFyIHN0YXJ0WCA9IGl0ZW0ueCAtIGl0ZW0ud2lkdGggLyAyO1xyXG4gICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBvcHRzLmhlaWdodCAtIGl0ZW0ueSAtIG9wdHMuYXJlYVsyXTtcclxuICAgICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhzdGFydFgsIGl0ZW0ueSk7XHJcbiAgICAgICAgICAgICAgY29udGV4dC5maWxsUmVjdChzdGFydFgsIGl0ZW0ueSwgaXRlbS53aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgaWYgKG9wdHMuZGF0YUxhYmVsICE9PSBmYWxzZSAmJiBwcm9jZXNzID09PSAxKSB7XHJcbiAgICBzZXJpZXMuZm9yRWFjaChmdW5jdGlvbihlYWNoU2VyaWVzLCBzZXJpZXNJbmRleCkge1xyXG4gICAgICBsZXQgcmFuZ2VzLG1pblJhbmdlLG1heFJhbmdlO1xyXG4gICAgICAgIHJhbmdlcyA9IFtdLmNvbmNhdChvcHRzLmNoYXJ0RGF0YS55QXhpc0RhdGEucmFuZ2VzW2VhY2hTZXJpZXMuaW5kZXhdKTtcclxuICAgICAgICBtaW5SYW5nZSA9IHJhbmdlcy5wb3AoKTtcclxuICAgICAgICBtYXhSYW5nZSA9IHJhbmdlcy5zaGlmdCgpO1xyXG4gICAgICB2YXIgZGF0YSA9IGVhY2hTZXJpZXMuZGF0YTtcclxuICAgICAgc3dpdGNoIChjb2x1bW5PcHRpb24udHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ2dyb3VwJzpcclxuICAgICAgICAgIHZhciBwb2ludHMgPSBnZXREYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHByb2Nlc3MpO1xyXG4gICAgICAgICAgcG9pbnRzID0gZml4Q29sdW1lRGF0YShwb2ludHMsIGVhY2hTcGFjaW5nLCBzZXJpZXMubGVuZ3RoLCBzZXJpZXNJbmRleCwgY29uZmlnLCBvcHRzKTtcclxuICAgICAgICAgIGRyYXdQb2ludFRleHQocG9pbnRzLCBlYWNoU2VyaWVzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnc3RhY2snOlxyXG4gICAgICAgICAgdmFyIHBvaW50cyA9IGdldFN0YWNrRGF0YVBvaW50cyhkYXRhLCBtaW5SYW5nZSwgbWF4UmFuZ2UsIHhBeGlzUG9pbnRzLCBlYWNoU3BhY2luZywgb3B0cywgY29uZmlnLCBzZXJpZXNJbmRleCwgc2VyaWVzLCBwcm9jZXNzKTtcclxuICAgICAgICAgIGRyYXdQb2ludFRleHQocG9pbnRzLCBlYWNoU2VyaWVzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnbWV0ZXInOlxyXG4gICAgICAgICAgdmFyIHBvaW50cyA9IGdldERhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZywgcHJvY2Vzcyk7XHJcbiAgICAgICAgICBkcmF3UG9pbnRUZXh0KHBvaW50cywgZWFjaFNlcmllcywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNvbnRleHQucmVzdG9yZSgpO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgeEF4aXNQb2ludHM6IHhBeGlzUG9pbnRzLFxyXG4gICAgY2FsUG9pbnRzOiBjYWxQb2ludHMsXHJcbiAgICBlYWNoU3BhY2luZzogZWFjaFNwYWNpbmdcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3Q2FuZGxlRGF0YVBvaW50cyhzZXJpZXMsIHNlcmllc01BLCBvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcclxuICB2YXIgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogMTtcclxuICB2YXIgY2FuZGxlT3B0aW9uID0gYXNzaWduKHt9LCB7XHJcbiAgICBjb2xvcjoge30sXHJcbiAgICBhdmVyYWdlOiB7fVxyXG4gIH0sIG9wdHMuZXh0cmEuY2FuZGxlKTtcclxuICBjYW5kbGVPcHRpb24uY29sb3IgPSBhc3NpZ24oe30sIHtcclxuICAgIHVwTGluZTogJyNmMDQ4NjQnLFxyXG4gICAgdXBGaWxsOiAnI2YwNDg2NCcsXHJcbiAgICBkb3duTGluZTogJyMyZmMyNWInLFxyXG4gICAgZG93bkZpbGw6ICcjMmZjMjViJ1xyXG4gIH0sIGNhbmRsZU9wdGlvbi5jb2xvcik7XHJcbiAgY2FuZGxlT3B0aW9uLmF2ZXJhZ2UgPSBhc3NpZ24oe30sIHtcclxuICAgIHNob3c6IGZhbHNlLFxyXG4gICAgbmFtZTogW10sXHJcbiAgICBkYXk6IFtdLFxyXG4gICAgY29sb3I6IGNvbmZpZy5jb2xvcnNcclxuICB9LCBjYW5kbGVPcHRpb24uYXZlcmFnZSk7XHJcbiAgb3B0cy5leHRyYS5jYW5kbGUgPSBjYW5kbGVPcHRpb247XHJcblxyXG4gIGxldCB4QXhpc0RhdGEgPSBvcHRzLmNoYXJ0RGF0YS54QXhpc0RhdGEsXHJcbiAgICB4QXhpc1BvaW50cyA9IHhBeGlzRGF0YS54QXhpc1BvaW50cyxcclxuICAgIGVhY2hTcGFjaW5nID0geEF4aXNEYXRhLmVhY2hTcGFjaW5nO1xyXG5cclxuICBsZXQgY2FsUG9pbnRzID0gW107XHJcblxyXG4gIGNvbnRleHQuc2F2ZSgpO1xyXG5cdFxyXG5cdGxldCBsZWZ0TnVtPS0yO1xyXG5cdGxldCByaWdodE51bT14QXhpc1BvaW50cy5sZW5ndGgrMjtcclxuXHRsZXQgbGVmdFNwYWNlPTA7XHJcblx0bGV0IHJpZ2h0U3BhY2U9b3B0cy53aWR0aCtlYWNoU3BhY2luZztcclxuXHRcclxuICBpZiAob3B0cy5fc2Nyb2xsRGlzdGFuY2VfICYmIG9wdHMuX3Njcm9sbERpc3RhbmNlXyAhPT0gMCAmJiBvcHRzLmVuYWJsZVNjcm9sbCA9PT0gdHJ1ZSkge1xyXG4gICAgY29udGV4dC50cmFuc2xhdGUob3B0cy5fc2Nyb2xsRGlzdGFuY2VfLCAwKTtcclxuXHRcdGxlZnROdW09TWF0aC5mbG9vcigtb3B0cy5fc2Nyb2xsRGlzdGFuY2VfL2VhY2hTcGFjaW5nKS0yO1xyXG5cdFx0cmlnaHROdW09bGVmdE51bStvcHRzLnhBeGlzLml0ZW1Db3VudCs0O1xyXG5cdFx0bGVmdFNwYWNlPS1vcHRzLl9zY3JvbGxEaXN0YW5jZV8tZWFjaFNwYWNpbmcrb3B0cy5hcmVhWzNdO1xyXG5cdFx0cmlnaHRTcGFjZT1sZWZ0U3BhY2UrKG9wdHMueEF4aXMuaXRlbUNvdW50KzQpKmVhY2hTcGFjaW5nO1xyXG4gIH1cclxuXHJcbiAgLy/nlLvlnYfnur9cclxuICBpZiAoY2FuZGxlT3B0aW9uLmF2ZXJhZ2Uuc2hvdyB8fCBzZXJpZXNNQSkgeyAvL01lcmdlIHB1bGwgcmVxdWVzdCAhMTIgZnJvbSDpgrHotLXnv5RcclxuICAgIHNlcmllc01BLmZvckVhY2goZnVuY3Rpb24oZWFjaFNlcmllcywgc2VyaWVzSW5kZXgpIHtcclxuICAgICAgbGV0IHJhbmdlcyxtaW5SYW5nZSxtYXhSYW5nZTtcclxuICAgICAgcmFuZ2VzID0gW10uY29uY2F0KG9wdHMuY2hhcnREYXRhLnlBeGlzRGF0YS5yYW5nZXNbZWFjaFNlcmllcy5pbmRleF0pO1xyXG4gICAgICBtaW5SYW5nZSA9IHJhbmdlcy5wb3AoKTtcclxuICAgICAgbWF4UmFuZ2UgPSByYW5nZXMuc2hpZnQoKTtcclxuXHJcbiAgICAgIHZhciBkYXRhID0gZWFjaFNlcmllcy5kYXRhO1xyXG4gICAgICB2YXIgcG9pbnRzID0gZ2V0RGF0YVBvaW50cyhkYXRhLCBtaW5SYW5nZSwgbWF4UmFuZ2UsIHhBeGlzUG9pbnRzLCBlYWNoU3BhY2luZywgb3B0cywgY29uZmlnLCBwcm9jZXNzKTtcclxuICAgICAgdmFyIHNwbGl0UG9pbnRMaXN0ID0gc3BsaXRQb2ludHMocG9pbnRzKTtcclxuXHRcdFx0XHJcblx0XHRcdGZvcihsZXQgaT0wO2k8c3BsaXRQb2ludExpc3QubGVuZ3RoO2krKyl7XHJcblx0XHRcdFx0bGV0IHBvaW50cz1zcGxpdFBvaW50TGlzdFtpXTtcclxuXHRcdFx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRcdGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoZWFjaFNlcmllcy5jb2xvcik7XHJcblx0XHRcdFx0Y29udGV4dC5zZXRMaW5lV2lkdGgoMSk7XHJcblx0XHRcdFx0aWYgKHBvaW50cy5sZW5ndGggPT09IDEpIHtcclxuXHRcdFx0XHRcdGNvbnRleHQubW92ZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7XHJcblx0XHRcdFx0XHRjb250ZXh0LmFyYyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnksIDEsIDAsIDIgKiBNYXRoLlBJKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Y29udGV4dC5tb3ZlVG8ocG9pbnRzWzBdLngsIHBvaW50c1swXS55KTtcclxuXHRcdFx0XHRcdGxldCBzdGFydFBvaW50PTA7XHJcblx0XHRcdFx0XHRmb3IobGV0IGo9MDtqPHBvaW50cy5sZW5ndGg7aisrKXtcclxuXHRcdFx0XHRcdFx0bGV0IGl0ZW09cG9pbnRzW2pdO1xyXG5cdFx0XHRcdFx0XHRpZihzdGFydFBvaW50PT0wICYmIGl0ZW0ueCA+IGxlZnRTcGFjZSl7XHJcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5tb3ZlVG8oaXRlbS54LCBpdGVtLnkpO1xyXG5cdFx0XHRcdFx0XHRcdHN0YXJ0UG9pbnQ9MTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRpZiAoaiA+IDAgJiYgaXRlbS54ID4gbGVmdFNwYWNlICYmIGl0ZW0ueCA8IHJpZ2h0U3BhY2UpIHtcclxuXHRcdFx0XHRcdFx0XHR2YXIgY3RybFBvaW50ID0gY3JlYXRlQ3VydmVDb250cm9sUG9pbnRzKHBvaW50cywgaiAtIDEpO1xyXG5cdFx0XHRcdFx0XHRcdGNvbnRleHQuYmV6aWVyQ3VydmVUbyhjdHJsUG9pbnQuY3RyQS54LCBjdHJsUG9pbnQuY3RyQS55LCBjdHJsUG9pbnQuY3RyQi54LCBjdHJsUG9pbnQuY3RyQi55LGl0ZW0ueCwgaXRlbS55KTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0Y29udGV4dC5tb3ZlVG8ocG9pbnRzWzBdLngsIHBvaW50c1swXS55KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Y29udGV4dC5jbG9zZVBhdGgoKTtcclxuXHRcdFx0XHRjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgLy/nlLtL57q/XHJcbiAgc2VyaWVzLmZvckVhY2goZnVuY3Rpb24oZWFjaFNlcmllcywgc2VyaWVzSW5kZXgpIHtcclxuICAgIGxldCByYW5nZXMsbWluUmFuZ2UsbWF4UmFuZ2U7XHJcbiAgICByYW5nZXMgPSBbXS5jb25jYXQob3B0cy5jaGFydERhdGEueUF4aXNEYXRhLnJhbmdlc1tlYWNoU2VyaWVzLmluZGV4XSk7XHJcbiAgICBtaW5SYW5nZSA9IHJhbmdlcy5wb3AoKTtcclxuICAgIG1heFJhbmdlID0gcmFuZ2VzLnNoaWZ0KCk7XHJcbiAgICB2YXIgZGF0YSA9IGVhY2hTZXJpZXMuZGF0YTtcclxuICAgIHZhciBwb2ludHMgPSBnZXRDYW5kbGVEYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHByb2Nlc3MpO1xyXG4gICAgY2FsUG9pbnRzLnB1c2gocG9pbnRzKTtcclxuICAgIHZhciBzcGxpdFBvaW50TGlzdCA9IHNwbGl0UG9pbnRzKHBvaW50cyk7XHJcblxyXG5cdFx0Zm9yKGxldCBpPTA7aTxzcGxpdFBvaW50TGlzdFswXS5sZW5ndGg7aSsrKXtcclxuXHRcdFx0aWYoaT5sZWZ0TnVtICYmIGk8cmlnaHROdW0pe1xyXG5cdFx0XHRcdGxldCBpdGVtPXNwbGl0UG9pbnRMaXN0WzBdW2ldO1xyXG5cdFx0XHRcdGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblx0XHRcdFx0Ly/lpoLmnpzkuIrmtqhcclxuXHRcdFx0XHRpZiAoZGF0YVtpXVsxXSAtIGRhdGFbaV1bMF0gPiAwKSB7XHJcblx0XHRcdFx0XHRjb250ZXh0LnNldFN0cm9rZVN0eWxlKGNhbmRsZU9wdGlvbi5jb2xvci51cExpbmUpO1xyXG5cdFx0XHRcdFx0Y29udGV4dC5zZXRGaWxsU3R5bGUoY2FuZGxlT3B0aW9uLmNvbG9yLnVwRmlsbCk7XHJcblx0XHRcdFx0XHRjb250ZXh0LnNldExpbmVXaWR0aCgxICogb3B0cy5waXhlbFJhdGlvKTtcclxuXHRcdFx0XHRcdGNvbnRleHQubW92ZVRvKGl0ZW1bM10ueCwgaXRlbVszXS55KTsgLy/pobbngrlcclxuXHRcdFx0XHRcdGNvbnRleHQubGluZVRvKGl0ZW1bMV0ueCwgaXRlbVsxXS55KTsgLy/mlLbnm5jkuK3pl7TngrlcclxuXHRcdFx0XHRcdGNvbnRleHQubGluZVRvKGl0ZW1bMV0ueCAtIGVhY2hTcGFjaW5nIC8gNCwgaXRlbVsxXS55KTsgLy/mlLbnm5jlt6bkvqfngrlcclxuXHRcdFx0XHRcdGNvbnRleHQubGluZVRvKGl0ZW1bMF0ueCAtIGVhY2hTcGFjaW5nIC8gNCwgaXRlbVswXS55KTsgLy/lvIDnm5jlt6bkvqfngrlcclxuXHRcdFx0XHRcdGNvbnRleHQubGluZVRvKGl0ZW1bMF0ueCwgaXRlbVswXS55KTsgLy/lvIDnm5jkuK3pl7TngrlcclxuXHRcdFx0XHRcdGNvbnRleHQubGluZVRvKGl0ZW1bMl0ueCwgaXRlbVsyXS55KTsgLy/lupXngrlcclxuXHRcdFx0XHRcdGNvbnRleHQubGluZVRvKGl0ZW1bMF0ueCwgaXRlbVswXS55KTsgLy/lvIDnm5jkuK3pl7TngrlcclxuXHRcdFx0XHRcdGNvbnRleHQubGluZVRvKGl0ZW1bMF0ueCArIGVhY2hTcGFjaW5nIC8gNCwgaXRlbVswXS55KTsgLy/lvIDnm5jlj7PkvqfngrlcclxuXHRcdFx0XHRcdGNvbnRleHQubGluZVRvKGl0ZW1bMV0ueCArIGVhY2hTcGFjaW5nIC8gNCwgaXRlbVsxXS55KTsgLy/mlLbnm5jlj7PkvqfngrlcclxuXHRcdFx0XHRcdGNvbnRleHQubGluZVRvKGl0ZW1bMV0ueCwgaXRlbVsxXS55KTsgLy/mlLbnm5jkuK3pl7TngrlcclxuXHRcdFx0XHRcdGNvbnRleHQubW92ZVRvKGl0ZW1bM10ueCwgaXRlbVszXS55KTsgLy/pobbngrlcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Y29udGV4dC5zZXRTdHJva2VTdHlsZShjYW5kbGVPcHRpb24uY29sb3IuZG93bkxpbmUpO1xyXG5cdFx0XHRcdFx0Y29udGV4dC5zZXRGaWxsU3R5bGUoY2FuZGxlT3B0aW9uLmNvbG9yLmRvd25GaWxsKTtcclxuXHRcdFx0XHRcdGNvbnRleHQuc2V0TGluZVdpZHRoKDEgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG5cdFx0XHRcdFx0Y29udGV4dC5tb3ZlVG8oaXRlbVszXS54LCBpdGVtWzNdLnkpOyAvL+mhtueCuVxyXG5cdFx0XHRcdFx0Y29udGV4dC5saW5lVG8oaXRlbVswXS54LCBpdGVtWzBdLnkpOyAvL+W8gOebmOS4remXtOeCuVxyXG5cdFx0XHRcdFx0Y29udGV4dC5saW5lVG8oaXRlbVswXS54IC0gZWFjaFNwYWNpbmcgLyA0LCBpdGVtWzBdLnkpOyAvL+W8gOebmOW3puS+p+eCuVxyXG5cdFx0XHRcdFx0Y29udGV4dC5saW5lVG8oaXRlbVsxXS54IC0gZWFjaFNwYWNpbmcgLyA0LCBpdGVtWzFdLnkpOyAvL+aUtuebmOW3puS+p+eCuVxyXG5cdFx0XHRcdFx0Y29udGV4dC5saW5lVG8oaXRlbVsxXS54LCBpdGVtWzFdLnkpOyAvL+aUtuebmOS4remXtOeCuVxyXG5cdFx0XHRcdFx0Y29udGV4dC5saW5lVG8oaXRlbVsyXS54LCBpdGVtWzJdLnkpOyAvL+W6leeCuVxyXG5cdFx0XHRcdFx0Y29udGV4dC5saW5lVG8oaXRlbVsxXS54LCBpdGVtWzFdLnkpOyAvL+aUtuebmOS4remXtOeCuVxyXG5cdFx0XHRcdFx0Y29udGV4dC5saW5lVG8oaXRlbVsxXS54ICsgZWFjaFNwYWNpbmcgLyA0LCBpdGVtWzFdLnkpOyAvL+aUtuebmOWPs+S+p+eCuVxyXG5cdFx0XHRcdFx0Y29udGV4dC5saW5lVG8oaXRlbVswXS54ICsgZWFjaFNwYWNpbmcgLyA0LCBpdGVtWzBdLnkpOyAvL+W8gOebmOWPs+S+p+eCuVxyXG5cdFx0XHRcdFx0Y29udGV4dC5saW5lVG8oaXRlbVswXS54LCBpdGVtWzBdLnkpOyAvL+W8gOebmOS4remXtOeCuVxyXG5cdFx0XHRcdFx0Y29udGV4dC5tb3ZlVG8oaXRlbVszXS54LCBpdGVtWzNdLnkpOyAvL+mhtueCuVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG5cdFx0XHRcdGNvbnRleHQuZmlsbCgpO1xyXG5cdFx0XHRcdGNvbnRleHQuc3Ryb2tlKCk7XHJcblx0XHRcdH1cclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgY29udGV4dC5yZXN0b3JlKCk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICB4QXhpc1BvaW50czogeEF4aXNQb2ludHMsXHJcbiAgICBjYWxQb2ludHM6IGNhbFBvaW50cyxcclxuICAgIGVhY2hTcGFjaW5nOiBlYWNoU3BhY2luZ1xyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdBcmVhRGF0YVBvaW50cyhzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xyXG4gIHZhciBwcm9jZXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAxO1xyXG4gIHZhciBhcmVhT3B0aW9uID0gYXNzaWduKHt9LHtcclxuICAgIHR5cGU6ICdzdHJhaWdodCcsXHJcbiAgICBvcGFjaXR5OiAwLjIsXHJcbiAgICBhZGRMaW5lOiBmYWxzZSxcclxuICAgIHdpZHRoOiAyLFxyXG5cdFx0Z3JhZGllbnQ6ZmFsc2VcclxuICB9LG9wdHMuZXh0cmEuYXJlYSk7XHJcblxyXG4gIGxldCB4QXhpc0RhdGEgPSBvcHRzLmNoYXJ0RGF0YS54QXhpc0RhdGEsXHJcbiAgICB4QXhpc1BvaW50cyA9IHhBeGlzRGF0YS54QXhpc1BvaW50cyxcclxuICAgIGVhY2hTcGFjaW5nID0geEF4aXNEYXRhLmVhY2hTcGFjaW5nO1xyXG5cclxuICBsZXQgZW5kWSA9IG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzJdO1xyXG4gIGxldCBjYWxQb2ludHMgPSBbXTtcclxuXHJcbiAgY29udGV4dC5zYXZlKCk7XHJcblx0bGV0IGxlZnRTcGFjZT0wO1xyXG5cdGxldCByaWdodFNwYWNlPW9wdHMud2lkdGgrZWFjaFNwYWNpbmc7XHJcbiAgaWYgKG9wdHMuX3Njcm9sbERpc3RhbmNlXyAmJiBvcHRzLl9zY3JvbGxEaXN0YW5jZV8gIT09IDAgJiYgb3B0cy5lbmFibGVTY3JvbGwgPT09IHRydWUpIHtcclxuICAgIGNvbnRleHQudHJhbnNsYXRlKG9wdHMuX3Njcm9sbERpc3RhbmNlXywgMCk7XHJcblx0XHRsZWZ0U3BhY2U9LW9wdHMuX3Njcm9sbERpc3RhbmNlXy1lYWNoU3BhY2luZytvcHRzLmFyZWFbM107XHJcblx0XHRyaWdodFNwYWNlPWxlZnRTcGFjZSsob3B0cy54QXhpcy5pdGVtQ291bnQrNCkqZWFjaFNwYWNpbmc7XHJcbiAgfVxyXG5cclxuICBzZXJpZXMuZm9yRWFjaChmdW5jdGlvbihlYWNoU2VyaWVzLCBzZXJpZXNJbmRleCkge1xyXG4gICAgbGV0IHJhbmdlcyxtaW5SYW5nZSxtYXhSYW5nZTtcclxuICAgIHJhbmdlcyA9IFtdLmNvbmNhdChvcHRzLmNoYXJ0RGF0YS55QXhpc0RhdGEucmFuZ2VzW2VhY2hTZXJpZXMuaW5kZXhdKTtcclxuICAgIG1pblJhbmdlID0gcmFuZ2VzLnBvcCgpO1xyXG4gICAgbWF4UmFuZ2UgPSByYW5nZXMuc2hpZnQoKTtcclxuICAgIGxldCBkYXRhID0gZWFjaFNlcmllcy5kYXRhO1xyXG4gICAgbGV0IHBvaW50cyA9IGdldERhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZywgcHJvY2Vzcyk7XHJcbiAgICBjYWxQb2ludHMucHVzaChwb2ludHMpO1xyXG5cclxuICAgIGxldCBzcGxpdFBvaW50TGlzdCA9IHNwbGl0UG9pbnRzKHBvaW50cyk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNwbGl0UG9pbnRMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGxldCBwb2ludHMgPSBzcGxpdFBvaW50TGlzdFtpXTtcclxuICAgICAgLy8g57uY5Yi25Yy65Z+f5pWwXHJcbiAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoaGV4VG9SZ2IoZWFjaFNlcmllcy5jb2xvciwgYXJlYU9wdGlvbi5vcGFjaXR5KSk7XHJcblx0XHRcdGlmKGFyZWFPcHRpb24uZ3JhZGllbnQpe1xyXG5cdFx0XHRcdGxldCBncmFkaWVudCA9IGNvbnRleHQuY3JlYXRlTGluZWFyR3JhZGllbnQoMCwgb3B0cy5hcmVhWzBdLCAwLCBvcHRzLmhlaWdodC1vcHRzLmFyZWFbMl0pO1xyXG5cdFx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCgnMCcsIGhleFRvUmdiKGVhY2hTZXJpZXMuY29sb3IsIGFyZWFPcHRpb24ub3BhY2l0eSkpO1xyXG5cdFx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCgnMS4wJyxoZXhUb1JnYihcIiNGRkZGRkZcIiwgMC4xKSk7XHJcblx0XHRcdFx0Y29udGV4dC5zZXRGaWxsU3R5bGUoZ3JhZGllbnQpO1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRjb250ZXh0LnNldEZpbGxTdHlsZShoZXhUb1JnYihlYWNoU2VyaWVzLmNvbG9yLCBhcmVhT3B0aW9uLm9wYWNpdHkpKTtcclxuXHRcdFx0fVxyXG4gICAgICBjb250ZXh0LnNldExpbmVXaWR0aChhcmVhT3B0aW9uLndpZHRoICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgaWYgKHBvaW50cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgbGV0IGZpcnN0UG9pbnQgPSBwb2ludHNbMF07XHJcbiAgICAgICAgbGV0IGxhc3RQb2ludCA9IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8oZmlyc3RQb2ludC54LCBmaXJzdFBvaW50LnkpO1xyXG5cdFx0XHRcdGxldCBzdGFydFBvaW50PTA7XHJcbiAgICAgICAgaWYgKGFyZWFPcHRpb24udHlwZSA9PT0gJ2N1cnZlJykge1xyXG5cdFx0XHRcdFx0Zm9yKGxldCBqPTA7ajxwb2ludHMubGVuZ3RoO2orKyl7XHJcblx0XHRcdFx0XHRcdGxldCBpdGVtPXBvaW50c1tqXTtcclxuXHRcdFx0XHRcdFx0aWYoc3RhcnRQb2ludD09MCAmJiBpdGVtLnggPiBsZWZ0U3BhY2Upe1xyXG5cdFx0XHRcdFx0XHRcdGNvbnRleHQubW92ZVRvKGl0ZW0ueCwgaXRlbS55KTtcclxuXHRcdFx0XHRcdFx0XHRzdGFydFBvaW50PTE7XHJcblx0XHRcdFx0XHRcdH1cclxuICAgICAgICAgICAgaWYgKGogPiAwICYmIGl0ZW0ueCA+IGxlZnRTcGFjZSAmJiBpdGVtLnggPCByaWdodFNwYWNlKSB7XHJcbiAgICAgICAgICAgICAgbGV0IGN0cmxQb2ludCA9IGNyZWF0ZUN1cnZlQ29udHJvbFBvaW50cyhwb2ludHMsIGogLSAxKTtcclxuICAgICAgICAgICAgICBjb250ZXh0LmJlemllckN1cnZlVG8oY3RybFBvaW50LmN0ckEueCwgY3RybFBvaW50LmN0ckEueSwgY3RybFBvaW50LmN0ckIueCwgY3RybFBvaW50LmN0ckIueSxpdGVtLngsIGl0ZW0ueSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHRcdFx0XHRcdGZvcihsZXQgaj0wO2o8cG9pbnRzLmxlbmd0aDtqKyspe1xyXG5cdFx0XHRcdFx0XHRsZXQgaXRlbT1wb2ludHNbal07XHJcblx0XHRcdFx0XHRcdGlmKHN0YXJ0UG9pbnQ9PTAgJiYgaXRlbS54ID4gbGVmdFNwYWNlKXtcclxuXHRcdFx0XHRcdFx0XHRjb250ZXh0Lm1vdmVUbyhpdGVtLngsIGl0ZW0ueSk7XHJcblx0XHRcdFx0XHRcdFx0c3RhcnRQb2ludD0xO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQgIGlmIChqID4gMCAmJiBpdGVtLnggPiBsZWZ0U3BhY2UgJiYgaXRlbS54IDwgcmlnaHRTcGFjZSkge1xyXG4gICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0ueCwgaXRlbS55KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRleHQubGluZVRvKGxhc3RQb2ludC54LCBlbmRZKTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhmaXJzdFBvaW50LngsIGVuZFkpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKGZpcnN0UG9pbnQueCwgZmlyc3RQb2ludC55KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsZXQgaXRlbSA9IHBvaW50c1swXTtcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhpdGVtLnggLSBlYWNoU3BhY2luZyAvIDIsIGl0ZW0ueSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbS54ICsgZWFjaFNwYWNpbmcgLyAyLCBpdGVtLnkpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0ueCArIGVhY2hTcGFjaW5nIC8gMiwgZW5kWSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbS54IC0gZWFjaFNwYWNpbmcgLyAyLCBlbmRZKTtcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhpdGVtLnggLSBlYWNoU3BhY2luZyAvIDIsIGl0ZW0ueSk7XHJcbiAgICAgIH1cclxuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgY29udGV4dC5maWxsKCk7XHJcblxyXG4gICAgICAvL+eUu+i/nue6v1xyXG4gICAgICBpZiAoYXJlYU9wdGlvbi5hZGRMaW5lKSB7XHJcblx0XHRcdFx0aWYgKGVhY2hTZXJpZXMubGluZVR5cGUgPT0gJ2Rhc2gnKSB7XHJcblx0XHRcdFx0XHRsZXQgZGFzaExlbmd0aCA9IGVhY2hTZXJpZXMuZGFzaExlbmd0aD9lYWNoU2VyaWVzLmRhc2hMZW5ndGg6ODtcclxuXHRcdFx0XHRcdGRhc2hMZW5ndGggKj0gb3B0cy5waXhlbFJhdGlvO1xyXG5cdFx0XHRcdCAgY29udGV4dC5zZXRMaW5lRGFzaChbZGFzaExlbmd0aCwgZGFzaExlbmd0aF0pO1xyXG5cdFx0XHRcdH1cclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoZWFjaFNlcmllcy5jb2xvcik7XHJcbiAgICAgICAgY29udGV4dC5zZXRMaW5lV2lkdGgoYXJlYU9wdGlvbi53aWR0aCAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgaWYgKHBvaW50cy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgIGNvbnRleHQubW92ZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7XHJcbiAgICAgICAgICBjb250ZXh0LmFyYyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnksIDEsIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8ocG9pbnRzWzBdLngsIHBvaW50c1swXS55KTtcclxuXHRcdFx0XHRcdGxldCBzdGFydFBvaW50PTA7XHJcbiAgICAgICAgICBpZiAoYXJlYU9wdGlvbi50eXBlID09PSAnY3VydmUnKSB7XHJcbiAgICAgICAgICAgIGZvcihsZXQgaj0wO2o8cG9pbnRzLmxlbmd0aDtqKyspe1xyXG4gICAgICAgICAgICBcdGxldCBpdGVtPXBvaW50c1tqXTtcclxuICAgICAgICAgICAgXHRpZihzdGFydFBvaW50PT0wICYmIGl0ZW0ueCA+IGxlZnRTcGFjZSl7XHJcbiAgICAgICAgICAgIFx0XHRjb250ZXh0Lm1vdmVUbyhpdGVtLngsIGl0ZW0ueSk7XHJcbiAgICAgICAgICAgIFx0XHRzdGFydFBvaW50PTE7XHJcbiAgICAgICAgICAgIFx0fVxyXG4gICAgICAgICAgICAgIGlmIChqID4gMCAmJiBpdGVtLnggPiBsZWZ0U3BhY2UgJiYgaXRlbS54IDwgcmlnaHRTcGFjZSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGN0cmxQb2ludCA9IGNyZWF0ZUN1cnZlQ29udHJvbFBvaW50cyhwb2ludHMsIGogLSAxKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuYmV6aWVyQ3VydmVUbyhjdHJsUG9pbnQuY3RyQS54LCBjdHJsUG9pbnQuY3RyQS55LCBjdHJsUG9pbnQuY3RyQi54LCBjdHJsUG9pbnQuY3RyQi55LGl0ZW0ueCxpdGVtLnkpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGZvcihsZXQgaj0wO2o8cG9pbnRzLmxlbmd0aDtqKyspe1xyXG4gICAgICAgICAgICBcdGxldCBpdGVtPXBvaW50c1tqXTtcclxuICAgICAgICAgICAgXHRpZihzdGFydFBvaW50PT0wICYmIGl0ZW0ueCA+IGxlZnRTcGFjZSl7XHJcbiAgICAgICAgICAgIFx0XHRjb250ZXh0Lm1vdmVUbyhpdGVtLngsIGl0ZW0ueSk7XHJcbiAgICAgICAgICAgIFx0XHRzdGFydFBvaW50PTE7XHJcbiAgICAgICAgICAgIFx0fVxyXG4gICAgICAgICAgICAgIGlmIChqID4gMCAmJiBpdGVtLnggPiBsZWZ0U3BhY2UgJiYgaXRlbS54IDwgcmlnaHRTcGFjZSkge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbS54LCBpdGVtLnkpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNvbnRleHQubW92ZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcblx0XHRcdFx0Y29udGV4dC5zZXRMaW5lRGFzaChbXSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL+eUu+eCuVxyXG4gICAgaWYgKG9wdHMuZGF0YVBvaW50U2hhcGUgIT09IGZhbHNlKSB7XHJcbiAgICAgIGRyYXdQb2ludFNoYXBlKHBvaW50cywgZWFjaFNlcmllcy5jb2xvciwgZWFjaFNlcmllcy5wb2ludFNoYXBlLCBjb250ZXh0LCBvcHRzKTtcclxuICAgIH1cclxuXHJcbiAgfSk7XHJcblxyXG4gIGlmIChvcHRzLmRhdGFMYWJlbCAhPT0gZmFsc2UgJiYgcHJvY2VzcyA9PT0gMSkge1xyXG4gICAgc2VyaWVzLmZvckVhY2goZnVuY3Rpb24oZWFjaFNlcmllcywgc2VyaWVzSW5kZXgpIHtcclxuICAgICAgbGV0IHJhbmdlcyxtaW5SYW5nZSxtYXhSYW5nZTtcclxuICAgICAgcmFuZ2VzID0gW10uY29uY2F0KG9wdHMuY2hhcnREYXRhLnlBeGlzRGF0YS5yYW5nZXNbZWFjaFNlcmllcy5pbmRleF0pO1xyXG4gICAgICBtaW5SYW5nZSA9IHJhbmdlcy5wb3AoKTtcclxuICAgICAgbWF4UmFuZ2UgPSByYW5nZXMuc2hpZnQoKTtcclxuICAgICAgdmFyIGRhdGEgPSBlYWNoU2VyaWVzLmRhdGE7XHJcbiAgICAgIHZhciBwb2ludHMgPSBnZXREYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHByb2Nlc3MpO1xyXG4gICAgICBkcmF3UG9pbnRUZXh0KHBvaW50cywgZWFjaFNlcmllcywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY29udGV4dC5yZXN0b3JlKCk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICB4QXhpc1BvaW50czogeEF4aXNQb2ludHMsXHJcbiAgICBjYWxQb2ludHM6IGNhbFBvaW50cyxcclxuICAgIGVhY2hTcGFjaW5nOiBlYWNoU3BhY2luZ1xyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdMaW5lRGF0YVBvaW50cyhzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xyXG4gIHZhciBwcm9jZXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAxO1xyXG4gIHZhciBsaW5lT3B0aW9uID0gYXNzaWduKHt9LHtcclxuXHRcdHR5cGU6ICdzdHJhaWdodCcsXHJcblx0XHR3aWR0aDogMlxyXG5cdH0sb3B0cy5leHRyYS5saW5lKTtcclxuXHRsaW5lT3B0aW9uLndpZHRoICo9b3B0cy5waXhlbFJhdGlvO1xyXG5cdFxyXG4gIGxldCB4QXhpc0RhdGEgPSBvcHRzLmNoYXJ0RGF0YS54QXhpc0RhdGEsXHJcbiAgICB4QXhpc1BvaW50cyA9IHhBeGlzRGF0YS54QXhpc1BvaW50cyxcclxuICAgIGVhY2hTcGFjaW5nID0geEF4aXNEYXRhLmVhY2hTcGFjaW5nO1xyXG4gIHZhciBjYWxQb2ludHMgPSBbXTtcclxuXHJcbiAgY29udGV4dC5zYXZlKCk7XHJcblx0bGV0IGxlZnRTcGFjZT0wO1xyXG5cdGxldCByaWdodFNwYWNlPW9wdHMud2lkdGgrZWFjaFNwYWNpbmc7XHJcbiAgaWYgKG9wdHMuX3Njcm9sbERpc3RhbmNlXyAmJiBvcHRzLl9zY3JvbGxEaXN0YW5jZV8gIT09IDAgJiYgb3B0cy5lbmFibGVTY3JvbGwgPT09IHRydWUpIHtcclxuICAgIGNvbnRleHQudHJhbnNsYXRlKG9wdHMuX3Njcm9sbERpc3RhbmNlXywgMCk7XHJcblx0XHRsZWZ0U3BhY2U9LW9wdHMuX3Njcm9sbERpc3RhbmNlXy1lYWNoU3BhY2luZytvcHRzLmFyZWFbM107XHJcblx0XHRyaWdodFNwYWNlPWxlZnRTcGFjZSsob3B0cy54QXhpcy5pdGVtQ291bnQrNCkqZWFjaFNwYWNpbmc7XHJcbiAgfVxyXG5cclxuICBzZXJpZXMuZm9yRWFjaChmdW5jdGlvbihlYWNoU2VyaWVzLCBzZXJpZXNJbmRleCkge1xyXG4gICAgbGV0IHJhbmdlcyxtaW5SYW5nZSxtYXhSYW5nZTtcclxuICAgIHJhbmdlcyA9IFtdLmNvbmNhdChvcHRzLmNoYXJ0RGF0YS55QXhpc0RhdGEucmFuZ2VzW2VhY2hTZXJpZXMuaW5kZXhdKTtcclxuICAgIG1pblJhbmdlID0gcmFuZ2VzLnBvcCgpO1xyXG4gICAgbWF4UmFuZ2UgPSByYW5nZXMuc2hpZnQoKTtcclxuICAgIHZhciBkYXRhID0gZWFjaFNlcmllcy5kYXRhO1xyXG4gICAgdmFyIHBvaW50cyA9IGdldERhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZywgcHJvY2Vzcyk7XHJcbiAgICBjYWxQb2ludHMucHVzaChwb2ludHMpO1xyXG4gICAgdmFyIHNwbGl0UG9pbnRMaXN0ID0gc3BsaXRQb2ludHMocG9pbnRzKTtcclxuXHRcdFxyXG5cdFx0aWYgKGVhY2hTZXJpZXMubGluZVR5cGUgPT0gJ2Rhc2gnKSB7XHJcblx0XHRcdGxldCBkYXNoTGVuZ3RoID0gZWFjaFNlcmllcy5kYXNoTGVuZ3RoP2VhY2hTZXJpZXMuZGFzaExlbmd0aDo4O1xyXG5cdFx0XHRkYXNoTGVuZ3RoICo9IG9wdHMucGl4ZWxSYXRpbztcclxuXHRcdCAgY29udGV4dC5zZXRMaW5lRGFzaChbZGFzaExlbmd0aCwgZGFzaExlbmd0aF0pO1xyXG5cdFx0fVxyXG5cdFx0Y29udGV4dC5iZWdpblBhdGgoKTtcclxuXHRcdGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoZWFjaFNlcmllcy5jb2xvcik7XHJcblx0XHRjb250ZXh0LnNldExpbmVXaWR0aChsaW5lT3B0aW9uLndpZHRoKTtcclxuXHRcdFxyXG4gICAgc3BsaXRQb2ludExpc3QuZm9yRWFjaChmdW5jdGlvbihwb2ludHMsIGluZGV4KSB7XHJcblx0XHRcdFxyXG4gICAgICBpZiAocG9pbnRzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgIGNvbnRleHQubW92ZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7XHJcbiAgICAgICAgY29udGV4dC5hcmMocG9pbnRzWzBdLngsIHBvaW50c1swXS55LCAxLCAwLCAyICogTWF0aC5QSSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8ocG9pbnRzWzBdLngsIHBvaW50c1swXS55KTtcclxuXHRcdFx0XHRsZXQgc3RhcnRQb2ludD0wO1xyXG4gICAgICAgIGlmIChsaW5lT3B0aW9uLnR5cGUgPT09ICdjdXJ2ZScpIHtcclxuICAgICAgICAgIGZvcihsZXQgaj0wO2o8cG9pbnRzLmxlbmd0aDtqKyspe1xyXG4gICAgICAgICAgXHRsZXQgaXRlbT1wb2ludHNbal07XHJcbiAgICAgICAgICBcdGlmKHN0YXJ0UG9pbnQ9PTAgJiYgaXRlbS54ID4gbGVmdFNwYWNlKXtcclxuICAgICAgICAgIFx0XHRjb250ZXh0Lm1vdmVUbyhpdGVtLngsIGl0ZW0ueSk7XHJcbiAgICAgICAgICBcdFx0c3RhcnRQb2ludD0xO1xyXG4gICAgICAgICAgXHR9XHJcbiAgICAgICAgICAgIGlmIChqID4gMCAmJiBpdGVtLnggPiBsZWZ0U3BhY2UgJiYgaXRlbS54IDwgcmlnaHRTcGFjZSkge1xyXG4gICAgICAgICAgICAgIHZhciBjdHJsUG9pbnQgPSBjcmVhdGVDdXJ2ZUNvbnRyb2xQb2ludHMocG9pbnRzLCBqIC0gMSk7XHJcbiAgICAgICAgICAgICAgY29udGV4dC5iZXppZXJDdXJ2ZVRvKGN0cmxQb2ludC5jdHJBLngsIGN0cmxQb2ludC5jdHJBLnksIGN0cmxQb2ludC5jdHJCLngsIGN0cmxQb2ludC5jdHJCLnksaXRlbS54LCBpdGVtLnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0gXHJcblx0XHRcdFx0aWYgKGxpbmVPcHRpb24udHlwZSA9PT0gJ3N0cmFpZ2h0Jykge1xyXG4gICAgICAgICAgZm9yKGxldCBqPTA7ajxwb2ludHMubGVuZ3RoO2orKyl7XHJcbiAgICAgICAgICBcdGxldCBpdGVtPXBvaW50c1tqXTtcclxuICAgICAgICAgIFx0aWYoc3RhcnRQb2ludD09MCAmJiBpdGVtLnggPiBsZWZ0U3BhY2Upe1xyXG4gICAgICAgICAgXHRcdGNvbnRleHQubW92ZVRvKGl0ZW0ueCwgaXRlbS55KTtcclxuICAgICAgICAgIFx0XHRzdGFydFBvaW50PTE7XHJcbiAgICAgICAgICBcdH1cclxuICAgICAgICAgICAgaWYgKGogPiAwICYmIGl0ZW0ueCA+IGxlZnRTcGFjZSAmJiBpdGVtLnggPCByaWdodFNwYWNlKSB7XHJcbiAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbS54LCBpdGVtLnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHRcdFx0XHRpZiAobGluZU9wdGlvbi50eXBlID09PSAnc3RlcCcpIHtcclxuXHRcdFx0XHQgIGZvcihsZXQgaj0wO2o8cG9pbnRzLmxlbmd0aDtqKyspe1xyXG5cdFx0XHRcdCAgXHRsZXQgaXRlbT1wb2ludHNbal07XHJcblx0XHRcdFx0ICBcdGlmKHN0YXJ0UG9pbnQ9PTAgJiYgaXRlbS54ID4gbGVmdFNwYWNlKXtcclxuXHRcdFx0XHQgIFx0XHRjb250ZXh0Lm1vdmVUbyhpdGVtLngsIGl0ZW0ueSk7XHJcblx0XHRcdFx0ICBcdFx0c3RhcnRQb2ludD0xO1xyXG5cdFx0XHRcdCAgXHR9XHJcblx0XHRcdFx0ICAgIGlmIChqID4gMCAmJiBpdGVtLnggPiBsZWZ0U3BhY2UgJiYgaXRlbS54IDwgcmlnaHRTcGFjZSkge1xyXG5cdFx0XHRcdFx0XHRcdGNvbnRleHQubGluZVRvKGl0ZW0ueCwgcG9pbnRzW2otMV0ueSk7XHJcblx0XHRcdFx0ICAgICAgY29udGV4dC5saW5lVG8oaXRlbS54LCBpdGVtLnkpO1xyXG5cdFx0XHRcdCAgICB9XHJcblx0XHRcdFx0ICB9O1xyXG5cdFx0XHRcdH1cclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgfSk7XHJcblx0XHRcclxuXHRcdGNvbnRleHQuc3Ryb2tlKCk7XHJcblx0XHRjb250ZXh0LnNldExpbmVEYXNoKFtdKTtcclxuXHRcdFxyXG4gICAgaWYgKG9wdHMuZGF0YVBvaW50U2hhcGUgIT09IGZhbHNlKSB7XHJcbiAgICAgIGRyYXdQb2ludFNoYXBlKHBvaW50cywgZWFjaFNlcmllcy5jb2xvciwgZWFjaFNlcmllcy5wb2ludFNoYXBlLCBjb250ZXh0LCBvcHRzKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgaWYgKG9wdHMuZGF0YUxhYmVsICE9PSBmYWxzZSAmJiBwcm9jZXNzID09PSAxKSB7XHJcbiAgICBzZXJpZXMuZm9yRWFjaChmdW5jdGlvbihlYWNoU2VyaWVzLCBzZXJpZXNJbmRleCkge1xyXG4gICAgICBsZXQgcmFuZ2VzLG1pblJhbmdlLG1heFJhbmdlO1xyXG4gICAgICByYW5nZXMgPSBbXS5jb25jYXQob3B0cy5jaGFydERhdGEueUF4aXNEYXRhLnJhbmdlc1tlYWNoU2VyaWVzLmluZGV4XSk7XHJcbiAgICAgIG1pblJhbmdlID0gcmFuZ2VzLnBvcCgpO1xyXG4gICAgICBtYXhSYW5nZSA9IHJhbmdlcy5zaGlmdCgpO1xyXG4gICAgICB2YXIgZGF0YSA9IGVhY2hTZXJpZXMuZGF0YTtcclxuICAgICAgdmFyIHBvaW50cyA9IGdldERhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZywgcHJvY2Vzcyk7XHJcbiAgICAgIGRyYXdQb2ludFRleHQocG9pbnRzLCBlYWNoU2VyaWVzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjb250ZXh0LnJlc3RvcmUoKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHhBeGlzUG9pbnRzOiB4QXhpc1BvaW50cyxcclxuICAgIGNhbFBvaW50czogY2FsUG9pbnRzLFxyXG4gICAgZWFjaFNwYWNpbmc6IGVhY2hTcGFjaW5nXHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd01peERhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcclxuICBsZXQgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogMTtcclxuICBcclxuICBsZXQgeEF4aXNEYXRhID0gb3B0cy5jaGFydERhdGEueEF4aXNEYXRhLFxyXG4gICAgeEF4aXNQb2ludHMgPSB4QXhpc0RhdGEueEF4aXNQb2ludHMsXHJcbiAgICBlYWNoU3BhY2luZyA9IHhBeGlzRGF0YS5lYWNoU3BhY2luZztcclxuXHJcbiAgbGV0IGVuZFkgPSBvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVsyXTtcclxuICBsZXQgY2FsUG9pbnRzID0gW107XHJcblxyXG4gIHZhciBjb2x1bW5JbmRleCA9IDA7XHJcbiAgdmFyIGNvbHVtbkxlbmd0aCA9IDA7XHJcbiAgc2VyaWVzLmZvckVhY2goZnVuY3Rpb24oZWFjaFNlcmllcywgc2VyaWVzSW5kZXgpIHtcclxuICAgIGlmIChlYWNoU2VyaWVzLnR5cGUgPT0gJ2NvbHVtbicpIHtcclxuICAgICAgY29sdW1uTGVuZ3RoICs9IDE7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgY29udGV4dC5zYXZlKCk7XHJcblx0bGV0IGxlZnROdW09LTI7XHJcblx0bGV0IHJpZ2h0TnVtPXhBeGlzUG9pbnRzLmxlbmd0aCsyO1xyXG5cdGxldCBsZWZ0U3BhY2U9MDtcclxuXHRsZXQgcmlnaHRTcGFjZT1vcHRzLndpZHRoK2VhY2hTcGFjaW5nO1xyXG4gIGlmIChvcHRzLl9zY3JvbGxEaXN0YW5jZV8gJiYgb3B0cy5fc2Nyb2xsRGlzdGFuY2VfICE9PSAwICYmIG9wdHMuZW5hYmxlU2Nyb2xsID09PSB0cnVlKSB7XHJcbiAgICBjb250ZXh0LnRyYW5zbGF0ZShvcHRzLl9zY3JvbGxEaXN0YW5jZV8sIDApO1xyXG5cdFx0bGVmdE51bT1NYXRoLmZsb29yKC1vcHRzLl9zY3JvbGxEaXN0YW5jZV8vZWFjaFNwYWNpbmcpLTI7XHJcblx0XHRyaWdodE51bT1sZWZ0TnVtK29wdHMueEF4aXMuaXRlbUNvdW50KzQ7XHJcblx0XHRsZWZ0U3BhY2U9LW9wdHMuX3Njcm9sbERpc3RhbmNlXy1lYWNoU3BhY2luZytvcHRzLmFyZWFbM107XHJcblx0XHRyaWdodFNwYWNlPWxlZnRTcGFjZSsob3B0cy54QXhpcy5pdGVtQ291bnQrNCkqZWFjaFNwYWNpbmc7XHJcbiAgfVxyXG5cclxuICBzZXJpZXMuZm9yRWFjaChmdW5jdGlvbihlYWNoU2VyaWVzLCBzZXJpZXNJbmRleCkge1xyXG4gICAgbGV0IHJhbmdlcyxtaW5SYW5nZSxtYXhSYW5nZTtcclxuICAgIFxyXG5cdFx0cmFuZ2VzID0gW10uY29uY2F0KG9wdHMuY2hhcnREYXRhLnlBeGlzRGF0YS5yYW5nZXNbZWFjaFNlcmllcy5pbmRleF0pO1xyXG5cdFx0bWluUmFuZ2UgPSByYW5nZXMucG9wKCk7XHJcblx0XHRtYXhSYW5nZSA9IHJhbmdlcy5zaGlmdCgpO1xyXG5cclxuICAgIHZhciBkYXRhID0gZWFjaFNlcmllcy5kYXRhO1xyXG4gICAgdmFyIHBvaW50cyA9IGdldERhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZywgcHJvY2Vzcyk7XHJcbiAgICBjYWxQb2ludHMucHVzaChwb2ludHMpO1xyXG5cclxuICAgIC8vIOe7mOWItuafseeKtuaVsOaNruWbvlxyXG4gICAgaWYgKGVhY2hTZXJpZXMudHlwZSA9PSAnY29sdW1uJykge1xyXG4gICAgICBwb2ludHMgPSBmaXhDb2x1bWVEYXRhKHBvaW50cywgZWFjaFNwYWNpbmcsIGNvbHVtbkxlbmd0aCwgY29sdW1uSW5kZXgsIGNvbmZpZywgb3B0cyk7XHJcbiAgICAgIGZvcihsZXQgaT0wO2k8cG9pbnRzLmxlbmd0aDtpKyspe1xyXG4gICAgICBcdGxldCBpdGVtPXBvaW50c1tpXTtcclxuICAgICAgICBpZiAoaXRlbSAhPT0gbnVsbCAmJiBpPmxlZnROdW0gJiYgaTxyaWdodE51bSkge1xyXG4gICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoaXRlbS5jb2xvciB8fCBlYWNoU2VyaWVzLmNvbG9yKTtcclxuICAgICAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDEpXHJcbiAgICAgICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShpdGVtLmNvbG9yIHx8IGVhY2hTZXJpZXMuY29sb3IpO1xyXG4gICAgICAgICAgdmFyIHN0YXJ0WCA9IGl0ZW0ueCAtIGl0ZW0ud2lkdGggLyAyO1xyXG4gICAgICAgICAgdmFyIGhlaWdodCA9IG9wdHMuaGVpZ2h0IC0gaXRlbS55IC0gb3B0cy5hcmVhWzJdO1xyXG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYLCBpdGVtLnkpO1xyXG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYLCBpdGVtLnkpO1xyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8oc3RhcnRYK2l0ZW0ud2lkdGgtMixpdGVtLnkpO1xyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8oc3RhcnRYK2l0ZW0ud2lkdGgtMixvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVsyXSk7XHJcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyhzdGFydFgsb3B0cy5oZWlnaHQgLSBvcHRzLmFyZWFbMl0pO1xyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8oc3RhcnRYLGl0ZW0ueSk7XHJcbiAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBjb2x1bW5JbmRleCArPSAxO1xyXG4gICAgfVxyXG5cclxuICAgIC8v57uY5Yi25Yy65Z+f5Zu+5pWw5o2uXHJcblxyXG4gICAgaWYgKGVhY2hTZXJpZXMudHlwZSA9PSAnYXJlYScpIHtcclxuICAgICAgbGV0IHNwbGl0UG9pbnRMaXN0ID0gc3BsaXRQb2ludHMocG9pbnRzKTtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzcGxpdFBvaW50TGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGxldCBwb2ludHMgPSBzcGxpdFBvaW50TGlzdFtpXTtcclxuICAgICAgICAvLyDnu5jliLbljLrln5/mlbDmja5cclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoZWFjaFNlcmllcy5jb2xvcik7XHJcbiAgICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaGV4VG9SZ2IoZWFjaFNlcmllcy5jb2xvciwgMC4yKSk7XHJcbiAgICAgICAgY29udGV4dC5zZXRMaW5lV2lkdGgoMiAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgaWYgKHBvaW50cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICB2YXIgZmlyc3RQb2ludCA9IHBvaW50c1swXTtcclxuICAgICAgICAgIGxldCBsYXN0UG9pbnQgPSBwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8oZmlyc3RQb2ludC54LCBmaXJzdFBvaW50LnkpO1xyXG5cdFx0XHRcdFx0bGV0IHN0YXJ0UG9pbnQ9MDtcclxuICAgICAgICAgIGlmIChlYWNoU2VyaWVzLnN0eWxlID09PSAnY3VydmUnKSB7XHJcbiAgICAgICAgICAgIGZvcihsZXQgaj0wO2o8cG9pbnRzLmxlbmd0aDtqKyspe1xyXG4gICAgICAgICAgICBcdGxldCBpdGVtPXBvaW50c1tqXTtcclxuICAgICAgICAgICAgXHRpZihzdGFydFBvaW50PT0wICYmIGl0ZW0ueCA+IGxlZnRTcGFjZSl7XHJcbiAgICAgICAgICAgIFx0XHRjb250ZXh0Lm1vdmVUbyhpdGVtLngsIGl0ZW0ueSk7XHJcbiAgICAgICAgICAgIFx0XHRzdGFydFBvaW50PTE7XHJcbiAgICAgICAgICAgIFx0fVxyXG4gICAgICAgICAgICAgIGlmIChqID4gMCAmJiBpdGVtLnggPiBsZWZ0U3BhY2UgJiYgaXRlbS54IDwgcmlnaHRTcGFjZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGN0cmxQb2ludCA9IGNyZWF0ZUN1cnZlQ29udHJvbFBvaW50cyhwb2ludHMsIGogLSAxKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuYmV6aWVyQ3VydmVUbyhjdHJsUG9pbnQuY3RyQS54LCBjdHJsUG9pbnQuY3RyQS55LCBjdHJsUG9pbnQuY3RyQi54LCBjdHJsUG9pbnQuY3RyQi55LCBpdGVtLngsIGl0ZW0ueSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZm9yKGxldCBqPTA7ajxwb2ludHMubGVuZ3RoO2orKyl7XHJcbiAgICAgICAgICAgIFx0bGV0IGl0ZW09cG9pbnRzW2pdO1xyXG4gICAgICAgICAgICBcdGlmKHN0YXJ0UG9pbnQ9PTAgJiYgaXRlbS54ID4gbGVmdFNwYWNlKXtcclxuICAgICAgICAgICAgXHRcdGNvbnRleHQubW92ZVRvKGl0ZW0ueCwgaXRlbS55KTtcclxuICAgICAgICAgICAgXHRcdHN0YXJ0UG9pbnQ9MTtcclxuICAgICAgICAgICAgXHR9XHJcbiAgICAgICAgICAgICAgaWYgKGogPiAwICYmIGl0ZW0ueCA+IGxlZnRTcGFjZSAmJiBpdGVtLnggPCByaWdodFNwYWNlKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLngsIGl0ZW0ueSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8obGFzdFBvaW50LngsIGVuZFkpO1xyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8oZmlyc3RQb2ludC54LCBlbmRZKTtcclxuICAgICAgICAgIGNvbnRleHQubGluZVRvKGZpcnN0UG9pbnQueCwgZmlyc3RQb2ludC55KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgbGV0IGl0ZW0gPSBwb2ludHNbMF07XHJcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhpdGVtLnggLSBlYWNoU3BhY2luZyAvIDIsIGl0ZW0ueSk7XHJcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLnggKyBlYWNoU3BhY2luZyAvIDIsIGl0ZW0ueSk7XHJcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLnggKyBlYWNoU3BhY2luZyAvIDIsIGVuZFkpO1xyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbS54IC0gZWFjaFNwYWNpbmcgLyAyLCBlbmRZKTtcclxuICAgICAgICAgIGNvbnRleHQubW92ZVRvKGl0ZW0ueCAtIGVhY2hTcGFjaW5nIC8gMiwgaXRlbS55KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOe7mOWItuaKmOe6v+aVsOaNruWbvlxyXG4gICAgaWYgKGVhY2hTZXJpZXMudHlwZSA9PSAnbGluZScpIHtcclxuICAgICAgdmFyIHNwbGl0UG9pbnRMaXN0ID0gc3BsaXRQb2ludHMocG9pbnRzKTtcclxuICAgICAgc3BsaXRQb2ludExpc3QuZm9yRWFjaChmdW5jdGlvbihwb2ludHMsIGluZGV4KSB7XHJcblx0XHRcdFx0aWYgKGVhY2hTZXJpZXMubGluZVR5cGUgPT0gJ2Rhc2gnKSB7XHJcblx0XHRcdFx0XHRsZXQgZGFzaExlbmd0aCA9IGVhY2hTZXJpZXMuZGFzaExlbmd0aD9lYWNoU2VyaWVzLmRhc2hMZW5ndGg6ODtcclxuXHRcdFx0XHRcdGRhc2hMZW5ndGggKj0gb3B0cy5waXhlbFJhdGlvO1xyXG5cdFx0XHRcdCAgY29udGV4dC5zZXRMaW5lRGFzaChbZGFzaExlbmd0aCwgZGFzaExlbmd0aF0pO1xyXG5cdFx0XHRcdH1cclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoZWFjaFNlcmllcy5jb2xvcik7XHJcbiAgICAgICAgY29udGV4dC5zZXRMaW5lV2lkdGgoMiAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgaWYgKHBvaW50cy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgIGNvbnRleHQubW92ZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7XHJcbiAgICAgICAgICBjb250ZXh0LmFyYyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnksIDEsIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8ocG9pbnRzWzBdLngsIHBvaW50c1swXS55KTtcclxuXHRcdFx0XHRcdGxldCBzdGFydFBvaW50PTA7XHJcbiAgICAgICAgICBpZiAoZWFjaFNlcmllcy5zdHlsZSA9PSAnY3VydmUnKSB7XHJcbiAgICAgICAgICAgIGZvcihsZXQgaj0wO2o8cG9pbnRzLmxlbmd0aDtqKyspe1xyXG4gICAgICAgICAgICBcdGxldCBpdGVtPXBvaW50c1tqXTtcclxuICAgICAgICAgICAgXHRpZihzdGFydFBvaW50PT0wICYmIGl0ZW0ueCA+IGxlZnRTcGFjZSl7XHJcbiAgICAgICAgICAgIFx0XHRjb250ZXh0Lm1vdmVUbyhpdGVtLngsIGl0ZW0ueSk7XHJcbiAgICAgICAgICAgIFx0XHRzdGFydFBvaW50PTE7XHJcbiAgICAgICAgICAgIFx0fVxyXG4gICAgICAgICAgICAgIGlmIChqID4gMCAmJiBpdGVtLnggPiBsZWZ0U3BhY2UgJiYgaXRlbS54IDwgcmlnaHRTcGFjZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGN0cmxQb2ludCA9IGNyZWF0ZUN1cnZlQ29udHJvbFBvaW50cyhwb2ludHMsIGogLSAxKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuYmV6aWVyQ3VydmVUbyhjdHJsUG9pbnQuY3RyQS54LCBjdHJsUG9pbnQuY3RyQS55LCBjdHJsUG9pbnQuY3RyQi54LCBjdHJsUG9pbnQuY3RyQi55LGl0ZW0ueCxpdGVtLnkpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZm9yKGxldCBqPTA7ajxwb2ludHMubGVuZ3RoO2orKyl7XHJcbiAgICAgICAgICAgIFx0bGV0IGl0ZW09cG9pbnRzW2pdO1xyXG4gICAgICAgICAgICBcdGlmKHN0YXJ0UG9pbnQ9PTAgJiYgaXRlbS54ID4gbGVmdFNwYWNlKXtcclxuICAgICAgICAgICAgXHRcdGNvbnRleHQubW92ZVRvKGl0ZW0ueCwgaXRlbS55KTtcclxuICAgICAgICAgICAgXHRcdHN0YXJ0UG9pbnQ9MTtcclxuICAgICAgICAgICAgXHR9XHJcbiAgICAgICAgICAgICAgaWYgKGogPiAwICYmIGl0ZW0ueCA+IGxlZnRTcGFjZSAmJiBpdGVtLnggPCByaWdodFNwYWNlKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLngsIGl0ZW0ueSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG5cdFx0XHRcdGNvbnRleHQuc2V0TGluZURhc2goW10pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDnu5jliLbngrnmlbDmja7lm75cclxuICAgIGlmIChlYWNoU2VyaWVzLnR5cGUgPT0gJ3BvaW50Jykge1xyXG5cdFx0XHRlYWNoU2VyaWVzLmFkZFBvaW50ID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZWFjaFNlcmllcy5hZGRQb2ludCA9PSB0cnVlICYmIGVhY2hTZXJpZXMudHlwZSAhPT0gJ2NvbHVtbicgKSB7XHJcbiAgICAgIGRyYXdQb2ludFNoYXBlKHBvaW50cywgZWFjaFNlcmllcy5jb2xvciwgZWFjaFNlcmllcy5wb2ludFNoYXBlLCBjb250ZXh0LCBvcHRzKTtcclxuICAgIH1cclxuICB9KTtcclxuICBpZiAob3B0cy5kYXRhTGFiZWwgIT09IGZhbHNlICYmIHByb2Nlc3MgPT09IDEpIHtcclxuICAgIHZhciBjb2x1bW5JbmRleCA9IDA7XHJcbiAgICBzZXJpZXMuZm9yRWFjaChmdW5jdGlvbihlYWNoU2VyaWVzLCBzZXJpZXNJbmRleCkge1xyXG4gICAgICBsZXQgcmFuZ2VzLG1pblJhbmdlLG1heFJhbmdlO1xyXG4gICAgICBcclxuXHRcdFx0cmFuZ2VzID0gW10uY29uY2F0KG9wdHMuY2hhcnREYXRhLnlBeGlzRGF0YS5yYW5nZXNbZWFjaFNlcmllcy5pbmRleF0pO1xyXG5cdFx0XHRtaW5SYW5nZSA9IHJhbmdlcy5wb3AoKTtcclxuXHRcdFx0bWF4UmFuZ2UgPSByYW5nZXMuc2hpZnQoKTtcclxuXHRcdFx0XHRcclxuICAgICAgdmFyIGRhdGEgPSBlYWNoU2VyaWVzLmRhdGE7XHJcbiAgICAgIHZhciBwb2ludHMgPSBnZXREYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHByb2Nlc3MpO1xyXG4gICAgICBpZiAoZWFjaFNlcmllcy50eXBlICE9PSAnY29sdW1uJykge1xyXG4gICAgICAgIGRyYXdQb2ludFRleHQocG9pbnRzLCBlYWNoU2VyaWVzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHBvaW50cyA9IGZpeENvbHVtZURhdGEocG9pbnRzLCBlYWNoU3BhY2luZywgY29sdW1uTGVuZ3RoLCBjb2x1bW5JbmRleCwgY29uZmlnLCBvcHRzKTtcclxuICAgICAgICBkcmF3UG9pbnRUZXh0KHBvaW50cywgZWFjaFNlcmllcywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgICAgICBjb2x1bW5JbmRleCArPSAxO1xyXG4gICAgICB9XHJcblxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjb250ZXh0LnJlc3RvcmUoKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHhBeGlzUG9pbnRzOiB4QXhpc1BvaW50cyxcclxuICAgIGNhbFBvaW50czogY2FsUG9pbnRzLFxyXG4gICAgZWFjaFNwYWNpbmc6IGVhY2hTcGFjaW5nLFxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1Rvb2xUaXBCcmlkZ2Uob3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzLCBlYWNoU3BhY2luZywgeEF4aXNQb2ludHMpIHtcclxuICB2YXIgdG9vbFRpcE9wdGlvbiA9IG9wdHMuZXh0cmEudG9vbHRpcCB8fCB7fTtcclxuICBpZiAodG9vbFRpcE9wdGlvbi5ob3JpemVudGFsTGluZSAmJiBvcHRzLnRvb2x0aXAgJiYgcHJvY2VzcyA9PT0gMSAmJiAob3B0cy50eXBlID09ICdsaW5lJyB8fCBvcHRzLnR5cGUgPT0gJ2FyZWEnIHx8IG9wdHMudHlwZSA9PSAnY29sdW1uJyB8fCBvcHRzLnR5cGUgPT0gJ2NhbmRsZScgfHwgb3B0cy50eXBlID09ICdtaXgnKSkge1xyXG4gICAgZHJhd1Rvb2xUaXBIb3JpemVudGFsTGluZShvcHRzLCBjb25maWcsIGNvbnRleHQsIGVhY2hTcGFjaW5nLCB4QXhpc1BvaW50cylcclxuICB9XHJcbiAgY29udGV4dC5zYXZlKCk7XHJcbiAgaWYgKG9wdHMuX3Njcm9sbERpc3RhbmNlXyAmJiBvcHRzLl9zY3JvbGxEaXN0YW5jZV8gIT09IDAgJiYgb3B0cy5lbmFibGVTY3JvbGwgPT09IHRydWUpIHtcclxuICAgIGNvbnRleHQudHJhbnNsYXRlKG9wdHMuX3Njcm9sbERpc3RhbmNlXywgMCk7XHJcbiAgfVxyXG4gIGlmIChvcHRzLnRvb2x0aXAgJiYgb3B0cy50b29sdGlwLnRleHRMaXN0ICYmIG9wdHMudG9vbHRpcC50ZXh0TGlzdC5sZW5ndGggJiYgcHJvY2VzcyA9PT0gMSkge1xyXG4gICAgZHJhd1Rvb2xUaXAob3B0cy50b29sdGlwLnRleHRMaXN0LCBvcHRzLnRvb2x0aXAub2Zmc2V0LCBvcHRzLCBjb25maWcsIGNvbnRleHQsIGVhY2hTcGFjaW5nLCB4QXhpc1BvaW50cyk7XHJcbiAgfVxyXG4gIGNvbnRleHQucmVzdG9yZSgpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1hBeGlzKGNhdGVnb3JpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xyXG5cclxuICBsZXQgeEF4aXNEYXRhID0gb3B0cy5jaGFydERhdGEueEF4aXNEYXRhLFxyXG4gICAgeEF4aXNQb2ludHMgPSB4QXhpc0RhdGEueEF4aXNQb2ludHMsXHJcbiAgICBzdGFydFggPSB4QXhpc0RhdGEuc3RhcnRYLFxyXG4gICAgZW5kWCA9IHhBeGlzRGF0YS5lbmRYLFxyXG4gICAgZWFjaFNwYWNpbmcgPSB4QXhpc0RhdGEuZWFjaFNwYWNpbmc7XHJcbiAgdmFyIGJvdW5kYXJ5R2FwPSdjZW50ZXInO1xyXG4gIGlmIChvcHRzLnR5cGUgPT0gJ2xpbmUnfHxvcHRzLnR5cGUgPT0gJ2FyZWEnKXtcclxuICAgIGJvdW5kYXJ5R2FwPW9wdHMueEF4aXMuYm91bmRhcnlHYXA7XHJcbiAgfVxyXG4gIHZhciBzdGFydFkgPSBvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVsyXTtcclxuICB2YXIgZW5kWSA9IG9wdHMuYXJlYVswXTtcclxuXHJcbiAgLy/nu5jliLbmu5rliqjmnaFcclxuICBpZiAob3B0cy5lbmFibGVTY3JvbGwgJiYgb3B0cy54QXhpcy5zY3JvbGxTaG93KSB7XHJcbiAgICB2YXIgc2Nyb2xsWSA9IG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzJdICsgY29uZmlnLnhBeGlzSGVpZ2h0O1xyXG4gICAgdmFyIHNjcm9sbFNjcmVlbldpZHRoID0gZW5kWCAtIHN0YXJ0WDtcclxuICAgIHZhciBzY3JvbGxUb3RhbFdpZHRoID0gZWFjaFNwYWNpbmcgKiAoeEF4aXNQb2ludHMubGVuZ3RoIC0gMSk7XHJcbiAgICB2YXIgc2Nyb2xsV2lkdGggPSBzY3JvbGxTY3JlZW5XaWR0aCAqIHNjcm9sbFNjcmVlbldpZHRoIC8gc2Nyb2xsVG90YWxXaWR0aDtcclxuICAgIHZhciBzY3JvbGxMZWZ0ID0gMDtcclxuICAgIGlmIChvcHRzLl9zY3JvbGxEaXN0YW5jZV8pIHtcclxuICAgICAgc2Nyb2xsTGVmdCA9IC1vcHRzLl9zY3JvbGxEaXN0YW5jZV8gKiAoc2Nyb2xsU2NyZWVuV2lkdGgpIC8gc2Nyb2xsVG90YWxXaWR0aDtcclxuICAgIH1cclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0LnNldExpbmVDYXAoJ3JvdW5kJyk7XHJcbiAgICBjb250ZXh0LnNldExpbmVXaWR0aCg2ICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUob3B0cy54QXhpcy5zY3JvbGxCYWNrZ3JvdW5kQ29sb3IgfHwgXCIjRUZFQkVGXCIpO1xyXG4gICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYLCBzY3JvbGxZKTtcclxuICAgIGNvbnRleHQubGluZVRvKGVuZFgsIHNjcm9sbFkpO1xyXG4gICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgY29udGV4dC5zZXRMaW5lQ2FwKCdyb3VuZCcpO1xyXG4gICAgY29udGV4dC5zZXRMaW5lV2lkdGgoNiAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKG9wdHMueEF4aXMuc2Nyb2xsQ29sb3IgfHwgXCIjQTZBNkE2XCIpO1xyXG4gICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYICsgc2Nyb2xsTGVmdCwgc2Nyb2xsWSk7XHJcbiAgICBjb250ZXh0LmxpbmVUbyhzdGFydFggKyBzY3JvbGxMZWZ0ICsgc2Nyb2xsV2lkdGgsIHNjcm9sbFkpO1xyXG4gICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICBjb250ZXh0LnNldExpbmVDYXAoJ2J1dHQnKTtcclxuICB9XHJcblxyXG4gIGNvbnRleHQuc2F2ZSgpO1xyXG5cclxuICBpZiAob3B0cy5fc2Nyb2xsRGlzdGFuY2VfICYmIG9wdHMuX3Njcm9sbERpc3RhbmNlXyAhPT0gMCkge1xyXG4gICAgY29udGV4dC50cmFuc2xhdGUob3B0cy5fc2Nyb2xsRGlzdGFuY2VfLCAwKTtcclxuICB9XHJcblx0XHJcblx0Ly/nu5jliLZY6L205Yi75bqm57q/XHJcblx0aWYgKG9wdHMueEF4aXMuY2FsaWJyYXRpb24gPT09IHRydWUpIHtcclxuXHRcdGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUob3B0cy54QXhpcy5ncmlkQ29sb3IgfHwgXCIjY2NjY2NjXCIpO1xyXG5cdFx0Y29udGV4dC5zZXRMaW5lQ2FwKCdidXR0Jyk7XHJcblx0XHRjb250ZXh0LnNldExpbmVXaWR0aCgxICogb3B0cy5waXhlbFJhdGlvKTtcclxuXHQgIHhBeGlzUG9pbnRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuXHQgICAgaWYgKGluZGV4ID4gMCkge1xyXG5cdCAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblx0ICAgICAgY29udGV4dC5tb3ZlVG8oaXRlbSAtIGVhY2hTcGFjaW5nIC8gMiwgc3RhcnRZKTtcclxuXHQgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtIC0gZWFjaFNwYWNpbmcgLyAyLCBzdGFydFkgKyAzICogb3B0cy5waXhlbFJhdGlvKTtcclxuXHQgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG5cdCAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcblx0ICAgIH1cclxuXHQgIH0pO1xyXG5cdH1cclxuXHQvL+e7mOWItljovbTnvZHmoLxcclxuICBpZiAob3B0cy54QXhpcy5kaXNhYmxlR3JpZCAhPT0gdHJ1ZSkge1xyXG4gICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShvcHRzLnhBeGlzLmdyaWRDb2xvciB8fCBcIiNjY2NjY2NcIik7XHJcbiAgICBjb250ZXh0LnNldExpbmVDYXAoJ2J1dHQnKTtcclxuICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDEgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgaWYgKG9wdHMueEF4aXMuZ3JpZFR5cGUgPT0gJ2Rhc2gnKSB7XHJcbiAgICAgIGNvbnRleHQuc2V0TGluZURhc2goW29wdHMueEF4aXMuZGFzaExlbmd0aCwgb3B0cy54QXhpcy5kYXNoTGVuZ3RoXSk7XHJcbiAgICB9XHJcblx0XHRvcHRzLnhBeGlzLmdyaWRFdmFsID0gb3B0cy54QXhpcy5ncmlkRXZhbCB8fCAxO1xyXG5cdFx0eEF4aXNQb2ludHMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG5cdFx0XHRpZiAoaW5kZXggJSBvcHRzLnhBeGlzLmdyaWRFdmFsID09IDApIHtcclxuXHRcdFx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRcdGNvbnRleHQubW92ZVRvKGl0ZW0sIHN0YXJ0WSk7XHJcblx0XHRcdFx0Y29udGV4dC5saW5lVG8oaXRlbSwgZW5kWSk7XHJcblx0XHRcdFx0Y29udGV4dC5zdHJva2UoKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcbiAgICBjb250ZXh0LnNldExpbmVEYXNoKFtdKTtcclxuICB9XHJcbiAgXHJcblxyXG4gIC8v57uY5Yi2WOi9tOaWh+ahiFxyXG4gIGlmIChvcHRzLnhBeGlzLmRpc2FibGVkICE9PSB0cnVlKSB7XHJcbiAgICAvLyDlr7lY6L205YiX6KGo5YGa5oq956iA5aSE55CGXHJcbiAgICAvL+m7mOiupOWFqOmDqOaYvuekuljovbTmoIfnrb5cclxuICAgIGxldCBtYXhYQXhpc0xpc3RMZW5ndGggPSBjYXRlZ29yaWVzLmxlbmd0aDtcclxuICAgIC8v5aaC5p6c6K6+572u5LqGWOi9tOWNleWxj+aVsOmHj1xyXG4gICAgaWYgKG9wdHMueEF4aXMubGFiZWxDb3VudCkge1xyXG4gICAgICAvL+WmguaenOiuvue9rljovbTlr4bluqZcclxuICAgICAgaWYgKG9wdHMueEF4aXMuaXRlbUNvdW50KSB7XHJcbiAgICAgICAgbWF4WEF4aXNMaXN0TGVuZ3RoID0gTWF0aC5jZWlsKGNhdGVnb3JpZXMubGVuZ3RoIC8gb3B0cy54QXhpcy5pdGVtQ291bnQgKiBvcHRzLnhBeGlzLmxhYmVsQ291bnQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG1heFhBeGlzTGlzdExlbmd0aCA9IG9wdHMueEF4aXMubGFiZWxDb3VudDtcclxuICAgICAgfVxyXG4gICAgICBtYXhYQXhpc0xpc3RMZW5ndGggLT0gMTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcmF0aW8gPSBNYXRoLmNlaWwoY2F0ZWdvcmllcy5sZW5ndGggLyBtYXhYQXhpc0xpc3RMZW5ndGgpO1xyXG5cclxuICAgIGxldCBuZXdDYXRlZ29yaWVzID0gW107XHJcbiAgICBsZXQgY2dMZW5ndGggPSBjYXRlZ29yaWVzLmxlbmd0aDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2dMZW5ndGg7IGkrKykge1xyXG4gICAgICBpZiAoaSAlIHJhdGlvICE9PSAwKSB7XHJcbiAgICAgICAgbmV3Q2F0ZWdvcmllcy5wdXNoKFwiXCIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG5ld0NhdGVnb3JpZXMucHVzaChjYXRlZ29yaWVzW2ldKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgbmV3Q2F0ZWdvcmllc1tjZ0xlbmd0aCAtIDFdID0gY2F0ZWdvcmllc1tjZ0xlbmd0aCAtIDFdO1xyXG5cclxuICAgIHZhciB4QXhpc0ZvbnRTaXplID0gb3B0cy54QXhpcy5mb250U2l6ZSB8fCBjb25maWcuZm9udFNpemU7XHJcbiAgICBpZiAoY29uZmlnLl94QXhpc1RleHRBbmdsZV8gPT09IDApIHtcclxuICAgICAgbmV3Q2F0ZWdvcmllcy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgdmFyIG9mZnNldCA9IC0gbWVhc3VyZVRleHQoU3RyaW5nKGl0ZW0pLCB4QXhpc0ZvbnRTaXplKSAvIDI7XHJcbiAgICAgICAgaWYoYm91bmRhcnlHYXAgPT0gJ2NlbnRlcicpe1xyXG4gICAgICAgICAgb2Zmc2V0Kz1lYWNoU3BhY2luZyAvIDI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzY3JvbGxIZWlnaHQ9MDtcclxuICAgICAgICBpZihvcHRzLnhBeGlzLnNjcm9sbFNob3cpe1xyXG4gICAgICAgICAgc2Nyb2xsSGVpZ2h0PTYqb3B0cy5waXhlbFJhdGlvO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQuc2V0Rm9udFNpemUoeEF4aXNGb250U2l6ZSk7XHJcbiAgICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUob3B0cy54QXhpcy5mb250Q29sb3IgfHwgJyM2NjY2NjYnKTtcclxuICAgICAgICBjb250ZXh0LmZpbGxUZXh0KFN0cmluZyhpdGVtKSwgeEF4aXNQb2ludHNbaW5kZXhdICsgb2Zmc2V0LCBzdGFydFkgKyB4QXhpc0ZvbnRTaXplICsgKGNvbmZpZy54QXhpc0hlaWdodCAtIHNjcm9sbEhlaWdodCAtIHhBeGlzRm9udFNpemUpIC8gMik7XHJcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBuZXdDYXRlZ29yaWVzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgICAgICBjb250ZXh0LnNhdmUoKTtcclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQuc2V0Rm9udFNpemUoeEF4aXNGb250U2l6ZSk7XHJcbiAgICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUob3B0cy54QXhpcy5mb250Q29sb3IgfHwgJyM2NjY2NjYnKTtcclxuICAgICAgICB2YXIgdGV4dFdpZHRoID0gbWVhc3VyZVRleHQoU3RyaW5nKGl0ZW0pLHhBeGlzRm9udFNpemUpO1xyXG4gICAgICAgIHZhciBvZmZzZXQgPSAtIHRleHRXaWR0aDtcclxuICAgICAgICBpZihib3VuZGFyeUdhcCA9PSAnY2VudGVyJyl7XHJcbiAgICAgICAgICBvZmZzZXQrPWVhY2hTcGFjaW5nIC8gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIF9jYWxSb3RhdGVUcmFuc2xhdGUgPSBjYWxSb3RhdGVUcmFuc2xhdGUoeEF4aXNQb2ludHNbaW5kZXhdICsgZWFjaFNwYWNpbmcgLyAyLCBzdGFydFkgKyB4QXhpc0ZvbnRTaXplIC8gMiArIDUsIG9wdHMuaGVpZ2h0KSxcclxuICAgICAgICAgIHRyYW5zWCA9IF9jYWxSb3RhdGVUcmFuc2xhdGUudHJhbnNYLFxyXG4gICAgICAgICAgdHJhbnNZID0gX2NhbFJvdGF0ZVRyYW5zbGF0ZS50cmFuc1k7XHJcblxyXG4gICAgICAgIGNvbnRleHQucm90YXRlKC0xICogY29uZmlnLl94QXhpc1RleHRBbmdsZV8pO1xyXG4gICAgICAgIGNvbnRleHQudHJhbnNsYXRlKHRyYW5zWCwgdHJhbnNZKTtcclxuICAgICAgICBjb250ZXh0LmZpbGxUZXh0KFN0cmluZyhpdGVtKSwgeEF4aXNQb2ludHNbaW5kZXhdICsgb2Zmc2V0LCBzdGFydFkgKyB4QXhpc0ZvbnRTaXplICsgNSk7XHJcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgY29udGV4dC5yZXN0b3JlKCk7XHJcblx0XHJcblx0Ly/nu5jliLZY6L206L2057q/XHJcbiAgaWYob3B0cy54QXhpcy5heGlzTGluZSl7XHJcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShvcHRzLnhBeGlzLmF4aXNMaW5lQ29sb3IpO1xyXG4gICAgY29udGV4dC5zZXRMaW5lV2lkdGgoMSAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICBjb250ZXh0Lm1vdmVUbyhzdGFydFgsb3B0cy5oZWlnaHQtb3B0cy5hcmVhWzJdKTtcclxuICAgIGNvbnRleHQubGluZVRvKGVuZFgsb3B0cy5oZWlnaHQtb3B0cy5hcmVhWzJdKTtcclxuICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3WUF4aXNHcmlkKGNhdGVnb3JpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xyXG4gIGlmIChvcHRzLnlBeGlzLmRpc2FibGVHcmlkID09PSB0cnVlKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGxldCBzcGFjaW5nVmFsaWQgPSBvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVswXSAtIG9wdHMuYXJlYVsyXTtcclxuICBsZXQgZWFjaFNwYWNpbmcgPSBzcGFjaW5nVmFsaWQgLyBvcHRzLnlBeGlzLnNwbGl0TnVtYmVyO1xyXG4gIGxldCBzdGFydFggPSBvcHRzLmFyZWFbM107XHJcbiAgbGV0IHhBeGlzUG9pbnRzID0gb3B0cy5jaGFydERhdGEueEF4aXNEYXRhLnhBeGlzUG9pbnRzLFxyXG4gICAgeEF4aXNlYWNoU3BhY2luZyA9IG9wdHMuY2hhcnREYXRhLnhBeGlzRGF0YS5lYWNoU3BhY2luZztcclxuICBsZXQgVG90YWxXaWR0aCA9IHhBeGlzZWFjaFNwYWNpbmcgKiAoeEF4aXNQb2ludHMubGVuZ3RoIC0gMSk7XHJcbiAgbGV0IGVuZFggPSBzdGFydFggKyBUb3RhbFdpZHRoO1xyXG5cclxuICBsZXQgcG9pbnRzID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRzLnlBeGlzLnNwbGl0TnVtYmVyICsgMTsgaSsrKSB7XHJcbiAgICBwb2ludHMucHVzaChvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVsyXSAtIGVhY2hTcGFjaW5nICogaSk7XHJcbiAgfVxyXG5cclxuICBjb250ZXh0LnNhdmUoKTtcclxuICBpZiAob3B0cy5fc2Nyb2xsRGlzdGFuY2VfICYmIG9wdHMuX3Njcm9sbERpc3RhbmNlXyAhPT0gMCkge1xyXG4gICAgY29udGV4dC50cmFuc2xhdGUob3B0cy5fc2Nyb2xsRGlzdGFuY2VfLCAwKTtcclxuICB9XHJcblxyXG4gIGlmIChvcHRzLnlBeGlzLmdyaWRUeXBlID09ICdkYXNoJykge1xyXG4gICAgY29udGV4dC5zZXRMaW5lRGFzaChbb3B0cy55QXhpcy5kYXNoTGVuZ3RoLCBvcHRzLnlBeGlzLmRhc2hMZW5ndGhdKTtcclxuICB9XHJcbiAgY29udGV4dC5zZXRTdHJva2VTdHlsZShvcHRzLnlBeGlzLmdyaWRDb2xvcik7XHJcbiAgY29udGV4dC5zZXRMaW5lV2lkdGgoMSAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0Lm1vdmVUbyhzdGFydFgsIGl0ZW0pO1xyXG4gICAgY29udGV4dC5saW5lVG8oZW5kWCwgaXRlbSk7XHJcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gIH0pO1xyXG4gIGNvbnRleHQuc2V0TGluZURhc2goW10pO1xyXG5cclxuICBjb250ZXh0LnJlc3RvcmUoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1lBeGlzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcbiAgaWYgKG9wdHMueUF4aXMuZGlzYWJsZWQgPT09IHRydWUpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgdmFyIHNwYWNpbmdWYWxpZCA9IG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzBdIC0gb3B0cy5hcmVhWzJdO1xyXG4gIHZhciBlYWNoU3BhY2luZyA9IHNwYWNpbmdWYWxpZCAvIG9wdHMueUF4aXMuc3BsaXROdW1iZXI7XHJcbiAgdmFyIHN0YXJ0WCA9IG9wdHMuYXJlYVszXTtcclxuICB2YXIgZW5kWCA9IG9wdHMud2lkdGggLSBvcHRzLmFyZWFbMV07XHJcbiAgdmFyIGVuZFkgPSBvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVsyXTtcclxuICB2YXIgZmlsbEVuZFkgPSBlbmRZICsgY29uZmlnLnhBeGlzSGVpZ2h0O1xyXG4gIGlmIChvcHRzLnhBeGlzLnNjcm9sbFNob3cpIHtcclxuICAgIGZpbGxFbmRZIC09IDMgKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgfVxyXG5cdGlmIChvcHRzLnhBeGlzLnJvdGF0ZUxhYmVsKXtcclxuXHRcdGZpbGxFbmRZID0gb3B0cy5oZWlnaHQgLSBvcHRzLmFyZWFbMl0rMztcclxuXHR9XHJcbiAgLy8gc2V0IFlBeGlzIGJhY2tncm91bmRcclxuICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gIGNvbnRleHQuc2V0RmlsbFN0eWxlKG9wdHMuYmFja2dyb3VuZCB8fCAnI2ZmZmZmZicpO1xyXG4gIGlmIChvcHRzLl9zY3JvbGxEaXN0YW5jZV8gPCAwKSB7XHJcbiAgICBjb250ZXh0LmZpbGxSZWN0KDAsIDAsIHN0YXJ0WCwgZmlsbEVuZFkpO1xyXG4gIH1cclxuICBpZihvcHRzLmVuYWJsZVNjcm9sbCA9PSB0cnVlKXtcclxuICAgIGNvbnRleHQuZmlsbFJlY3QoZW5kWCwgMCwgb3B0cy53aWR0aCwgZmlsbEVuZFkpO1xyXG4gIH1cclxuICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gIGNvbnRleHQuc3Ryb2tlKCk7XHJcblxyXG4gIHZhciBwb2ludHMgPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8PSBvcHRzLnlBeGlzLnNwbGl0TnVtYmVyOyBpKyspIHtcclxuICAgIHBvaW50cy5wdXNoKG9wdHMuYXJlYVswXSArIGVhY2hTcGFjaW5nICogaSk7XHJcbiAgfVxyXG5cclxuICBsZXQgdFN0YXJ0TGVmdD1vcHRzLmFyZWFbM107XHJcbiAgbGV0IHRTdGFydFJpZ2h0PW9wdHMud2lkdGgtb3B0cy5hcmVhWzFdO1xyXG5cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IG9wdHMueUF4aXMuZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgbGV0IHlEYXRhID0gb3B0cy55QXhpcy5kYXRhW2ldO1xyXG4gICAgaWYoeURhdGEuZGlzYWJsZWQgIT09IHRydWUpe1xyXG4gICAgICBsZXQgcmFuZ2VzRm9ybWF0ID0gb3B0cy5jaGFydERhdGEueUF4aXNEYXRhLnJhbmdlc0Zvcm1hdFtpXTtcclxuICAgICAgbGV0IHlBeGlzRm9udFNpemUgPSB5RGF0YS5mb250U2l6ZSB8fCBjb25maWcuZm9udFNpemU7XHJcbiAgICAgIGxldCB5QXhpc1dpZHRoID0gb3B0cy5jaGFydERhdGEueUF4aXNEYXRhLnlBeGlzV2lkdGhbaV07XHJcbiAgICAgIC8v55S7Wei9tOWIu+W6puWPiuaWh+ahiFxyXG4gICAgICByYW5nZXNGb3JtYXQuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgICAgIHZhciBwb3MgPSBwb2ludHNbaW5kZXhdID8gcG9pbnRzW2luZGV4XSA6IGVuZFk7XHJcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LnNldEZvbnRTaXplKHlBeGlzRm9udFNpemUpO1xyXG4gICAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDEqb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKHlEYXRhLmF4aXNMaW5lQ29sb3J8fCcjY2NjY2NjJyk7XHJcbiAgICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoeURhdGEuZm9udENvbG9yfHwgJyM2NjY2NjYnKTtcclxuICAgICAgICBpZih5QXhpc1dpZHRoLnBvc2l0aW9uPT0nbGVmdCcpe1xyXG4gICAgICAgICAgY29udGV4dC5maWxsVGV4dChTdHJpbmcoaXRlbSksIHRTdGFydExlZnQgLSB5QXhpc1dpZHRoLndpZHRoICwgcG9zICsgeUF4aXNGb250U2l6ZSAvIDIpO1xyXG4gICAgICAgICAgLy/nlLvliLvluqbnur9cclxuICAgICAgICAgIGlmKHlEYXRhLmNhbGlicmF0aW9uPT10cnVlKXtcclxuICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8odFN0YXJ0TGVmdCxwb3MpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmxpbmVUbyh0U3RhcnRMZWZ0IC0gMypvcHRzLnBpeGVsUmF0aW8scG9zKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgIGNvbnRleHQuZmlsbFRleHQoU3RyaW5nKGl0ZW0pLCB0U3RhcnRSaWdodCArIDQqb3B0cy5waXhlbFJhdGlvLCBwb3MgKyB5QXhpc0ZvbnRTaXplIC8gMik7XHJcbiAgICAgICAgICAvL+eUu+WIu+W6pue6v1xyXG4gICAgICAgICAgaWYoeURhdGEuY2FsaWJyYXRpb249PXRydWUpe1xyXG4gICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyh0U3RhcnRSaWdodCxwb3MpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmxpbmVUbyh0U3RhcnRSaWdodCArIDMqb3B0cy5waXhlbFJhdGlvLHBvcyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgfSk7XHJcbiAgICAgIC8v55S7Wei9tOi9tOe6v1xyXG4gICAgICBpZiAoeURhdGEuYXhpc0xpbmUhPT1mYWxzZSkge1xyXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5zZXRTdHJva2VTdHlsZSh5RGF0YS5heGlzTGluZUNvbG9yfHwnI2NjY2NjYycpO1xyXG4gICAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDEgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgICAgIGlmKHlBeGlzV2lkdGgucG9zaXRpb249PSdsZWZ0Jyl7XHJcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyh0U3RhcnRMZWZ0LG9wdHMuaGVpZ2h0LW9wdHMuYXJlYVsyXSk7XHJcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyh0U3RhcnRMZWZ0LG9wdHMuYXJlYVswXSk7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyh0U3RhcnRSaWdodCxvcHRzLmhlaWdodC1vcHRzLmFyZWFbMl0pO1xyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8odFN0YXJ0UmlnaHQsb3B0cy5hcmVhWzBdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgfVxyXG5cdFx0XHRcclxuICAgICAgLy/nlLtZ6L205qCH6aKYXHJcbiAgICAgIGlmIChvcHRzLnlBeGlzLnNob3dUaXRsZSkge1xyXG5cdFx0XHRcdFxyXG4gICAgICAgIGxldCB0aXRsZUZvbnRTaXplID0geURhdGEudGl0bGVGb250U2l6ZSB8fCBjb25maWcuZm9udFNpemU7XHJcbiAgICAgICAgbGV0IHRpdGxlID0geURhdGEudGl0bGU7XHJcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LnNldEZvbnRTaXplKHRpdGxlRm9udFNpemUpO1xyXG4gICAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKHlEYXRhLnRpdGxlRm9udENvbG9yIHx8ICcjNjY2NjY2Jyk7XHJcbiAgICAgICAgaWYoeUF4aXNXaWR0aC5wb3NpdGlvbj09J2xlZnQnKXtcclxuICAgICAgICAgIGNvbnRleHQuZmlsbFRleHQodGl0bGUsIHRTdGFydExlZnQgLSBtZWFzdXJlVGV4dCh0aXRsZSx0aXRsZUZvbnRTaXplKS8yLCBvcHRzLmFyZWFbMF0tMTAqb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgIGNvbnRleHQuZmlsbFRleHQodGl0bGUsdFN0YXJ0UmlnaHQgLSBtZWFzdXJlVGV4dCh0aXRsZSx0aXRsZUZvbnRTaXplKS8yLCBvcHRzLmFyZWFbMF0tMTAqb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmKHlBeGlzV2lkdGgucG9zaXRpb249PSdsZWZ0Jyl7XHJcbiAgICAgICAgdFN0YXJ0TGVmdCAtPSh5QXhpc1dpZHRoLndpZHRoICsgb3B0cy55QXhpcy5wYWRkaW5nKTtcclxuICAgICAgfWVsc2V7XHJcbiAgICAgICAgdFN0YXJ0UmlnaHQgKz15QXhpc1dpZHRoLndpZHRoKyBvcHRzLnlBeGlzLnBhZGRpbmc7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdMZWdlbmQoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIGNoYXJ0RGF0YSkge1xyXG4gIGlmIChvcHRzLmxlZ2VuZC5zaG93ID09PSBmYWxzZSkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBsZXQgbGVnZW5kRGF0YSA9IGNoYXJ0RGF0YS5sZWdlbmREYXRhO1xyXG4gIGxldCBsZWdlbmRMaXN0ID0gbGVnZW5kRGF0YS5wb2ludHM7XHJcbiAgbGV0IGxlZ2VuZEFyZWEgPSBsZWdlbmREYXRhLmFyZWE7XHJcbiAgbGV0IHBhZGRpbmcgPSBvcHRzLmxlZ2VuZC5wYWRkaW5nO1xyXG4gIGxldCBmb250U2l6ZSA9IG9wdHMubGVnZW5kLmZvbnRTaXplO1xyXG4gIGxldCBzaGFwZVdpZHRoID0gMTUgKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgbGV0IHNoYXBlUmlnaHQgPSA1ICogb3B0cy5waXhlbFJhdGlvO1xyXG4gIGxldCBpdGVtR2FwID0gb3B0cy5sZWdlbmQuaXRlbUdhcDtcclxuICBsZXQgbGluZUhlaWdodCA9IE1hdGgubWF4KG9wdHMubGVnZW5kLmxpbmVIZWlnaHQgKiBvcHRzLnBpeGVsUmF0aW8sIGZvbnRTaXplKTtcclxuXHJcbiAgLy/nlLvog4zmma/lj4rovrnmoYZcclxuICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gIGNvbnRleHQuc2V0TGluZVdpZHRoKG9wdHMubGVnZW5kLmJvcmRlcldpZHRoKTtcclxuICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKG9wdHMubGVnZW5kLmJvcmRlckNvbG9yKTtcclxuICBjb250ZXh0LnNldEZpbGxTdHlsZShvcHRzLmxlZ2VuZC5iYWNrZ3JvdW5kQ29sb3IpO1xyXG4gIGNvbnRleHQubW92ZVRvKGxlZ2VuZEFyZWEuc3RhcnQueCwgbGVnZW5kQXJlYS5zdGFydC55KTtcclxuICBjb250ZXh0LnJlY3QobGVnZW5kQXJlYS5zdGFydC54LCBsZWdlbmRBcmVhLnN0YXJ0LnksIGxlZ2VuZEFyZWEud2lkdGgsIGxlZ2VuZEFyZWEuaGVpZ2h0KTtcclxuICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gIGNvbnRleHQuZmlsbCgpO1xyXG4gIGNvbnRleHQuc3Ryb2tlKCk7XHJcblxyXG4gIGxlZ2VuZExpc3QuZm9yRWFjaChmdW5jdGlvbihpdGVtTGlzdCwgbGlzdEluZGV4KSB7XHJcbiAgICBsZXQgd2lkdGggPSAwO1xyXG4gICAgbGV0IGhlaWdodCA9IDA7XHJcbiAgICB3aWR0aCA9IGxlZ2VuZERhdGEud2lkdGhBcnJbbGlzdEluZGV4XTtcclxuICAgIGhlaWdodCA9IGxlZ2VuZERhdGEuaGVpZ2h0QXJyW2xpc3RJbmRleF07XHJcbiAgICBsZXQgc3RhcnRYID0gMDtcclxuICAgIGxldCBzdGFydFkgPSAwO1xyXG4gICAgaWYgKG9wdHMubGVnZW5kLnBvc2l0aW9uID09ICd0b3AnIHx8IG9wdHMubGVnZW5kLnBvc2l0aW9uID09ICdib3R0b20nKSB7XHJcbiAgICAgIHN0YXJ0WCA9IGxlZ2VuZEFyZWEuc3RhcnQueCArIChsZWdlbmRBcmVhLndpZHRoIC0gd2lkdGgpIC8gMjtcclxuICAgICAgc3RhcnRZID0gbGVnZW5kQXJlYS5zdGFydC55ICsgcGFkZGluZyArIGxpc3RJbmRleCAqIGxpbmVIZWlnaHQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAobGlzdEluZGV4ID09IDApIHtcclxuICAgICAgICB3aWR0aCA9IDA7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgd2lkdGggPSBsZWdlbmREYXRhLndpZHRoQXJyW2xpc3RJbmRleCAtIDFdO1xyXG4gICAgICB9XHJcbiAgICAgIHN0YXJ0WCA9IGxlZ2VuZEFyZWEuc3RhcnQueCArIHBhZGRpbmcgKyB3aWR0aDtcclxuICAgICAgc3RhcnRZID0gbGVnZW5kQXJlYS5zdGFydC55ICsgcGFkZGluZyArIChsZWdlbmRBcmVhLmhlaWdodCAtIGhlaWdodCkgLyAyO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnRleHQuc2V0Rm9udFNpemUoY29uZmlnLmZvbnRTaXplKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbUxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgbGV0IGl0ZW0gPSBpdGVtTGlzdFtpXTtcclxuICAgICAgaXRlbS5hcmVhID0gWzAsIDAsIDAsIDBdO1xyXG4gICAgICBpdGVtLmFyZWFbMF0gPSBzdGFydFg7XHJcbiAgICAgIGl0ZW0uYXJlYVsxXSA9IHN0YXJ0WTtcclxuICAgICAgaXRlbS5hcmVhWzNdID0gc3RhcnRZICsgbGluZUhlaWdodDtcclxuICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgY29udGV4dC5zZXRMaW5lV2lkdGgoMSAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoaXRlbS5zaG93ID8gaXRlbS5jb2xvciA6IG9wdHMubGVnZW5kLmhpZGRlbkNvbG9yKTtcclxuICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaXRlbS5zaG93ID8gaXRlbS5jb2xvciA6IG9wdHMubGVnZW5kLmhpZGRlbkNvbG9yKTtcclxuICAgICAgc3dpdGNoIChpdGVtLmxlZ2VuZFNoYXBlKSB7XHJcbiAgICAgICAgY2FzZSAnbGluZSc6XHJcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhzdGFydFgsIHN0YXJ0WSArIDAuNSAqIGxpbmVIZWlnaHQgLSAyICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3Qoc3RhcnRYLCBzdGFydFkgKyAwLjUgKiBsaW5lSGVpZ2h0IC0gMiAqIG9wdHMucGl4ZWxSYXRpbywgMTUgKiBvcHRzLnBpeGVsUmF0aW8sIDQgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAndHJpYW5nbGUnOlxyXG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYICsgNy41ICogb3B0cy5waXhlbFJhdGlvLCBzdGFydFkgKyAwLjUgKiBsaW5lSGVpZ2h0IC0gNSAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyhzdGFydFggKyAyLjUgKiBvcHRzLnBpeGVsUmF0aW8sIHN0YXJ0WSArIDAuNSAqIGxpbmVIZWlnaHQgKyA1ICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgICAgIGNvbnRleHQubGluZVRvKHN0YXJ0WCArIDEyLjUgKiBvcHRzLnBpeGVsUmF0aW8sIHN0YXJ0WSArIDAuNSAqIGxpbmVIZWlnaHQgKyA1ICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgICAgIGNvbnRleHQubGluZVRvKHN0YXJ0WCArIDcuNSAqIG9wdHMucGl4ZWxSYXRpbywgc3RhcnRZICsgMC41ICogbGluZUhlaWdodCAtIDUgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnZGlhbW9uZCc6XHJcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhzdGFydFggKyA3LjUgKiBvcHRzLnBpeGVsUmF0aW8sIHN0YXJ0WSArIDAuNSAqIGxpbmVIZWlnaHQgLSA1ICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgICAgIGNvbnRleHQubGluZVRvKHN0YXJ0WCArIDIuNSAqIG9wdHMucGl4ZWxSYXRpbywgc3RhcnRZICsgMC41ICogbGluZUhlaWdodCk7XHJcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyhzdGFydFggKyA3LjUgKiBvcHRzLnBpeGVsUmF0aW8sIHN0YXJ0WSArIDAuNSAqIGxpbmVIZWlnaHQgKyA1ICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgICAgIGNvbnRleHQubGluZVRvKHN0YXJ0WCArIDEyLjUgKiBvcHRzLnBpeGVsUmF0aW8sIHN0YXJ0WSArIDAuNSAqIGxpbmVIZWlnaHQpO1xyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8oc3RhcnRYICsgNy41ICogb3B0cy5waXhlbFJhdGlvLCBzdGFydFkgKyAwLjUgKiBsaW5lSGVpZ2h0IC0gNSAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdjaXJjbGUnOlxyXG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYICsgNy41ICogb3B0cy5waXhlbFJhdGlvLCBzdGFydFkgKyAwLjUgKiBsaW5lSGVpZ2h0KTtcclxuICAgICAgICAgIGNvbnRleHQuYXJjKHN0YXJ0WCArIDcuNSAqIG9wdHMucGl4ZWxSYXRpbywgc3RhcnRZICsgMC41ICogbGluZUhlaWdodCwgNSAqIG9wdHMucGl4ZWxSYXRpbywgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAncmVjdCc6XHJcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhzdGFydFgsIHN0YXJ0WSArIDAuNSAqIGxpbmVIZWlnaHQgLSA1ICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3Qoc3RhcnRYLCBzdGFydFkgKyAwLjUgKiBsaW5lSGVpZ2h0IC0gNSAqIG9wdHMucGl4ZWxSYXRpbywgMTUgKiBvcHRzLnBpeGVsUmF0aW8sIDEwICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhzdGFydFgsIHN0YXJ0WSArIDAuNSAqIGxpbmVIZWlnaHQgLSA1ICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3Qoc3RhcnRYLCBzdGFydFkgKyAwLjUgKiBsaW5lSGVpZ2h0IC0gNSAqIG9wdHMucGl4ZWxSYXRpbywgMTUgKiBvcHRzLnBpeGVsUmF0aW8sIDEwICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgfVxyXG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuXHJcbiAgICAgIHN0YXJ0WCArPSBzaGFwZVdpZHRoICsgc2hhcGVSaWdodDtcclxuICAgICAgbGV0IGZvbnRUcmFucyA9IDAuNSAqIGxpbmVIZWlnaHQgKyAwLjUgKiBmb250U2l6ZSAtIDI7XHJcbiAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgIGNvbnRleHQuc2V0Rm9udFNpemUoZm9udFNpemUpO1xyXG4gICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShpdGVtLnNob3cgPyBvcHRzLmxlZ2VuZC5mb250Q29sb3IgOiBvcHRzLmxlZ2VuZC5oaWRkZW5Db2xvcik7XHJcbiAgICAgIGNvbnRleHQuZmlsbFRleHQoaXRlbS5uYW1lLCBzdGFydFgsIHN0YXJ0WSArIGZvbnRUcmFucyk7XHJcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgIGlmIChvcHRzLmxlZ2VuZC5wb3NpdGlvbiA9PSAndG9wJyB8fCBvcHRzLmxlZ2VuZC5wb3NpdGlvbiA9PSAnYm90dG9tJykge1xyXG4gICAgICAgIHN0YXJ0WCArPSBtZWFzdXJlVGV4dChpdGVtLm5hbWUsIGZvbnRTaXplKSArIGl0ZW1HYXA7XHJcbiAgICAgICAgaXRlbS5hcmVhWzJdID0gc3RhcnRYO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGl0ZW0uYXJlYVsyXSA9IHN0YXJ0WCArIG1lYXN1cmVUZXh0KGl0ZW0ubmFtZSwgZm9udFNpemUpICsgaXRlbUdhcDs7XHJcbiAgICAgICAgc3RhcnRYIC09IHNoYXBlV2lkdGggKyBzaGFwZVJpZ2h0O1xyXG4gICAgICAgIHN0YXJ0WSArPSBsaW5lSGVpZ2h0O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdQaWVEYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcbiAgdmFyIHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IDE7XHJcbiAgdmFyIHBpZU9wdGlvbiA9IGFzc2lnbih7fSwge1xyXG4gICAgYWN0aXZlT3BhY2l0eTogMC41LFxyXG4gICAgYWN0aXZlUmFkaXVzOiAxMCAqIG9wdHMucGl4ZWxSYXRpbyxcclxuICAgIG9mZnNldEFuZ2xlOiAwLFxyXG4gICAgbGFiZWxXaWR0aDogMTUgKiBvcHRzLnBpeGVsUmF0aW8sXHJcbiAgICByaW5nV2lkdGg6IDAsXHJcbiAgICBib3JkZXI6ZmFsc2UsXHJcbiAgICBib3JkZXJXaWR0aDoyLFxyXG4gICAgYm9yZGVyQ29sb3I6JyNGRkZGRkYnXHJcbiAgfSwgb3B0cy5leHRyYS5waWUpO1xyXG4gIHZhciBjZW50ZXJQb3NpdGlvbiA9IHtcclxuICAgIHg6IG9wdHMuYXJlYVszXSArIChvcHRzLndpZHRoIC0gb3B0cy5hcmVhWzFdIC0gb3B0cy5hcmVhWzNdKSAvIDIsXHJcbiAgICB5OiBvcHRzLmFyZWFbMF0gKyAob3B0cy5oZWlnaHQgLSBvcHRzLmFyZWFbMF0gLSBvcHRzLmFyZWFbMl0pIC8gMlxyXG4gIH07XHJcbiAgaWYgKGNvbmZpZy5waWVDaGFydExpbmVQYWRkaW5nID09IDApIHtcclxuICAgIGNvbmZpZy5waWVDaGFydExpbmVQYWRkaW5nID0gcGllT3B0aW9uLmFjdGl2ZVJhZGl1cztcclxuICB9XHJcblxyXG4gIHZhciByYWRpdXMgPSBNYXRoLm1pbigob3B0cy53aWR0aCAtIG9wdHMuYXJlYVsxXSAtIG9wdHMuYXJlYVszXSkgLyAyIC0gY29uZmlnLnBpZUNoYXJ0TGluZVBhZGRpbmcgLSBjb25maWcucGllQ2hhcnRUZXh0UGFkZGluZyAtIGNvbmZpZy5fcGllVGV4dE1heExlbmd0aF8sIChvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVswXSAtIG9wdHMuYXJlYVsyXSkgLyAyIC0gY29uZmlnLnBpZUNoYXJ0TGluZVBhZGRpbmcgLSBjb25maWcucGllQ2hhcnRUZXh0UGFkZGluZyk7XHJcblxyXG4gIHNlcmllcyA9IGdldFBpZURhdGFQb2ludHMoc2VyaWVzLCByYWRpdXMsIHByb2Nlc3MpO1xyXG5cclxuICB2YXIgYWN0aXZlUmFkaXVzID0gcGllT3B0aW9uLmFjdGl2ZVJhZGl1cztcclxuXHJcbiAgc2VyaWVzID0gc2VyaWVzLm1hcChmdW5jdGlvbihlYWNoU2VyaWVzKSB7XHJcbiAgICBlYWNoU2VyaWVzLl9zdGFydF8gKz0gKHBpZU9wdGlvbi5vZmZzZXRBbmdsZSkgKiBNYXRoLlBJIC8gMTgwO1xyXG4gICAgcmV0dXJuIGVhY2hTZXJpZXM7XHJcbiAgfSk7XHJcbiAgc2VyaWVzLmZvckVhY2goZnVuY3Rpb24oZWFjaFNlcmllcywgc2VyaWVzSW5kZXgpIHtcclxuICAgIGlmIChvcHRzLnRvb2x0aXApIHtcclxuICAgICAgaWYgKG9wdHMudG9vbHRpcC5pbmRleCA9PSBzZXJpZXNJbmRleCkge1xyXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaGV4VG9SZ2IoZWFjaFNlcmllcy5jb2xvciwgb3B0cy5leHRyYS5waWUuYWN0aXZlT3BhY2l0eSB8fCAwLjUpKTtcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55KTtcclxuICAgICAgICBjb250ZXh0LmFyYyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55LCBlYWNoU2VyaWVzLl9yYWRpdXNfICsgYWN0aXZlUmFkaXVzLCBlYWNoU2VyaWVzLl9zdGFydF8sXHJcbiAgICAgICAgICBlYWNoU2VyaWVzLl9zdGFydF8gKyAyICpcclxuICAgICAgICAgIGVhY2hTZXJpZXMuX3Byb3BvcnRpb25fICogTWF0aC5QSSk7XHJcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKHBpZU9wdGlvbi5ib3JkZXJXaWR0aCAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICBjb250ZXh0LmxpbmVKb2luID0gXCJyb3VuZFwiO1xyXG4gICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShwaWVPcHRpb24uYm9yZGVyQ29sb3IpO1xyXG4gICAgY29udGV4dC5zZXRGaWxsU3R5bGUoZWFjaFNlcmllcy5jb2xvcik7XHJcbiAgICBjb250ZXh0Lm1vdmVUbyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55KTtcclxuICAgIGNvbnRleHQuYXJjKGNlbnRlclBvc2l0aW9uLngsIGNlbnRlclBvc2l0aW9uLnksIGVhY2hTZXJpZXMuX3JhZGl1c18sIGVhY2hTZXJpZXMuX3N0YXJ0XywgZWFjaFNlcmllcy5fc3RhcnRfICsgMiAqIGVhY2hTZXJpZXMuX3Byb3BvcnRpb25fICogTWF0aC5QSSk7XHJcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgY29udGV4dC5maWxsKCk7XHJcbiAgICBpZiAocGllT3B0aW9uLmJvcmRlciA9PSB0cnVlKSB7XHJcbiAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIGlmIChvcHRzLnR5cGUgPT09ICdyaW5nJykge1xyXG4gICAgdmFyIGlubmVyUGllV2lkdGggPSByYWRpdXMgKiAwLjY7XHJcbiAgICBpZiAodHlwZW9mIG9wdHMuZXh0cmEucGllLnJpbmdXaWR0aCA9PT0gJ251bWJlcicgJiYgb3B0cy5leHRyYS5waWUucmluZ1dpZHRoID4gMCkge1xyXG4gICAgICBpbm5lclBpZVdpZHRoID0gTWF0aC5tYXgoMCwgcmFkaXVzIC0gb3B0cy5leHRyYS5waWUucmluZ1dpZHRoKTtcclxuICAgIH1cclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0LnNldEZpbGxTdHlsZShvcHRzLmJhY2tncm91bmQgfHwgJyNmZmZmZmYnKTtcclxuICAgIGNvbnRleHQubW92ZVRvKGNlbnRlclBvc2l0aW9uLngsIGNlbnRlclBvc2l0aW9uLnkpO1xyXG4gICAgY29udGV4dC5hcmMoY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSwgaW5uZXJQaWVXaWR0aCwgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gIH1cclxuXHJcbiAgaWYgKG9wdHMuZGF0YUxhYmVsICE9PSBmYWxzZSAmJiBwcm9jZXNzID09PSAxKSB7XHJcbiAgICB2YXIgdmFsaWQgPSBmYWxzZTtcclxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzZXJpZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgaWYgKHNlcmllc1tpXS5kYXRhID4gMCkge1xyXG4gICAgICAgIHZhbGlkID0gdHJ1ZTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh2YWxpZCkge1xyXG4gICAgICBkcmF3UGllVGV4dChzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgcmFkaXVzLCBjZW50ZXJQb3NpdGlvbik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAocHJvY2VzcyA9PT0gMSAmJiBvcHRzLnR5cGUgPT09ICdyaW5nJykge1xyXG4gICAgZHJhd1JpbmdUaXRsZShvcHRzLCBjb25maWcsIGNvbnRleHQsIGNlbnRlclBvc2l0aW9uKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBjZW50ZXI6IGNlbnRlclBvc2l0aW9uLFxyXG4gICAgcmFkaXVzOiByYWRpdXMsXHJcbiAgICBzZXJpZXM6IHNlcmllc1xyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdSb3NlRGF0YVBvaW50cyhzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xyXG4gIHZhciBwcm9jZXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAxO1xyXG4gIHZhciByb3NlT3B0aW9uID0gYXNzaWduKHt9LCB7XHJcbiAgICB0eXBlOiAnYXJlYScsXHJcbiAgICBhY3RpdmVPcGFjaXR5OiAwLjUsXHJcbiAgICBhY3RpdmVSYWRpdXM6IDEwICogb3B0cy5waXhlbFJhdGlvLFxyXG4gICAgb2Zmc2V0QW5nbGU6IDAsXHJcbiAgICBsYWJlbFdpZHRoOiAxNSAqIG9wdHMucGl4ZWxSYXRpbyxcclxuICAgIGJvcmRlcjpmYWxzZSxcclxuICAgIGJvcmRlcldpZHRoOjIsXHJcbiAgICBib3JkZXJDb2xvcjonI0ZGRkZGRidcclxuICB9LCBvcHRzLmV4dHJhLnJvc2UpO1xyXG4gIGlmIChjb25maWcucGllQ2hhcnRMaW5lUGFkZGluZyA9PSAwKSB7XHJcbiAgICBjb25maWcucGllQ2hhcnRMaW5lUGFkZGluZyA9IHJvc2VPcHRpb24uYWN0aXZlUmFkaXVzO1xyXG4gIH1cclxuICB2YXIgY2VudGVyUG9zaXRpb24gPSB7XHJcbiAgICB4OiBvcHRzLmFyZWFbM10gKyAob3B0cy53aWR0aCAtIG9wdHMuYXJlYVsxXSAtIG9wdHMuYXJlYVszXSkgLyAyLFxyXG4gICAgeTogb3B0cy5hcmVhWzBdICsgKG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzBdIC0gb3B0cy5hcmVhWzJdKSAvIDJcclxuICB9O1xyXG4gICB2YXIgcmFkaXVzID0gTWF0aC5taW4oKG9wdHMud2lkdGggLSBvcHRzLmFyZWFbMV0gLSBvcHRzLmFyZWFbM10pIC8gMiAtIGNvbmZpZy5waWVDaGFydExpbmVQYWRkaW5nIC0gY29uZmlnLnBpZUNoYXJ0VGV4dFBhZGRpbmcgLSBjb25maWcuX3BpZVRleHRNYXhMZW5ndGhfLCAob3B0cy5oZWlnaHQgLSBvcHRzLmFyZWFbMF0gLSBvcHRzLmFyZWFbMl0pIC8gMiAtIGNvbmZpZy5waWVDaGFydExpbmVQYWRkaW5nIC0gY29uZmlnLnBpZUNoYXJ0VGV4dFBhZGRpbmcpO1xyXG4gIHZhciBtaW5SYWRpdXMgPSByb3NlT3B0aW9uLm1pblJhZGl1cyB8fCByYWRpdXMgKiAwLjU7XHJcblxyXG4gIHNlcmllcyA9IGdldFJvc2VEYXRhUG9pbnRzKHNlcmllcywgcm9zZU9wdGlvbi50eXBlLCBtaW5SYWRpdXMsIHJhZGl1cywgcHJvY2Vzcyk7XHJcblxyXG4gIHZhciBhY3RpdmVSYWRpdXMgPSByb3NlT3B0aW9uLmFjdGl2ZVJhZGl1cztcclxuXHJcbiAgc2VyaWVzID0gc2VyaWVzLm1hcChmdW5jdGlvbihlYWNoU2VyaWVzKSB7XHJcbiAgICBlYWNoU2VyaWVzLl9zdGFydF8gKz0gKHJvc2VPcHRpb24ub2Zmc2V0QW5nbGUgfHwgMCkgKiBNYXRoLlBJIC8gMTgwO1xyXG4gICAgcmV0dXJuIGVhY2hTZXJpZXM7XHJcbiAgfSk7XHJcblxyXG4gIHNlcmllcy5mb3JFYWNoKGZ1bmN0aW9uKGVhY2hTZXJpZXMsIHNlcmllc0luZGV4KSB7XHJcbiAgICBpZiAob3B0cy50b29sdGlwKSB7XHJcbiAgICAgIGlmIChvcHRzLnRvb2x0aXAuaW5kZXggPT0gc2VyaWVzSW5kZXgpIHtcclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGhleFRvUmdiKGVhY2hTZXJpZXMuY29sb3IsIHJvc2VPcHRpb24uYWN0aXZlT3BhY2l0eSB8fCAwLjUpKTtcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55KTtcclxuICAgICAgICBjb250ZXh0LmFyYyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55LCBhY3RpdmVSYWRpdXMgKyBlYWNoU2VyaWVzLl9yYWRpdXNfLCBlYWNoU2VyaWVzLl9zdGFydF8sXHJcbiAgICAgICAgICBlYWNoU2VyaWVzLl9zdGFydF8gKyAyICogZWFjaFNlcmllcy5fcm9zZV9wcm9wb3J0aW9uXyAqIE1hdGguUEkpO1xyXG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0LnNldExpbmVXaWR0aChyb3NlT3B0aW9uLmJvcmRlcldpZHRoICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgIGNvbnRleHQubGluZUpvaW4gPSBcInJvdW5kXCI7XHJcbiAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKHJvc2VPcHRpb24uYm9yZGVyQ29sb3IpO1xyXG4gICAgY29udGV4dC5zZXRGaWxsU3R5bGUoZWFjaFNlcmllcy5jb2xvcik7XHJcbiAgICBjb250ZXh0Lm1vdmVUbyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55KTtcclxuICAgIGNvbnRleHQuYXJjKGNlbnRlclBvc2l0aW9uLngsIGNlbnRlclBvc2l0aW9uLnksIGVhY2hTZXJpZXMuX3JhZGl1c18sIGVhY2hTZXJpZXMuX3N0YXJ0XywgZWFjaFNlcmllcy5fc3RhcnRfICsgMiAqXHJcbiAgICAgIGVhY2hTZXJpZXMuX3Jvc2VfcHJvcG9ydGlvbl8gKiBNYXRoLlBJKTtcclxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgIGlmIChyb3NlT3B0aW9uLmJvcmRlciA9PSB0cnVlKSB7XHJcbiAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIGlmIChvcHRzLmRhdGFMYWJlbCAhPT0gZmFsc2UgJiYgcHJvY2VzcyA9PT0gMSkge1xyXG4gICAgdmFyIHZhbGlkID0gZmFsc2U7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc2VyaWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgIGlmIChzZXJpZXNbaV0uZGF0YSA+IDApIHtcclxuICAgICAgICB2YWxpZCA9IHRydWU7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodmFsaWQpIHtcclxuICAgICAgZHJhd1BpZVRleHQoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIHJhZGl1cywgY2VudGVyUG9zaXRpb24pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGNlbnRlcjogY2VudGVyUG9zaXRpb24sXHJcbiAgICByYWRpdXM6IHJhZGl1cyxcclxuICAgIHNlcmllczogc2VyaWVzXHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0FyY2JhckRhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcclxuICB2YXIgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogMTtcclxuICB2YXIgYXJjYmFyT3B0aW9uID0gYXNzaWduKHt9LCB7XHJcbiAgICBzdGFydEFuZ2xlOiAwLjc1LFxyXG4gICAgZW5kQW5nbGU6IDAuMjUsXHJcbiAgICB0eXBlOiAnZGVmYXVsdCcsXHJcbiAgICB3aWR0aDogMTIgKiBvcHRzLnBpeGVsUmF0aW8sXHJcblx0XHRnYXA6MiAqIG9wdHMucGl4ZWxSYXRpb1xyXG4gIH0sIG9wdHMuZXh0cmEuYXJjYmFyKTtcclxuXHJcbiAgc2VyaWVzID0gZ2V0QXJjYmFyRGF0YVBvaW50cyhzZXJpZXMsIGFyY2Jhck9wdGlvbiwgcHJvY2Vzcyk7XHJcblx0XHJcbiAgdmFyIGNlbnRlclBvc2l0aW9uO1xyXG5cdGlmKGFyY2Jhck9wdGlvbi5jZW50ZXIpe1xyXG5cdFx0Y2VudGVyUG9zaXRpb249YXJjYmFyT3B0aW9uLmNlbnRlcjtcclxuXHR9ZWxzZXtcclxuXHRcdGNlbnRlclBvc2l0aW9uPSB7XHJcblx0XHQgIHg6IG9wdHMud2lkdGggLyAyLFxyXG5cdFx0ICB5OiBvcHRzLmhlaWdodCAvIDJcclxuXHRcdH07XHJcblx0fVxyXG5cdFxyXG4gIHZhciByYWRpdXM7XHJcblx0aWYoYXJjYmFyT3B0aW9uLnJhZGl1cyl7XHJcblx0XHRyYWRpdXM9YXJjYmFyT3B0aW9uLnJhZGl1cztcclxuXHR9ZWxzZXtcclxuXHRcdHJhZGl1cyA9IE1hdGgubWluKGNlbnRlclBvc2l0aW9uLngsIGNlbnRlclBvc2l0aW9uLnkpO1xyXG5cdFx0cmFkaXVzIC09IDUgKiBvcHRzLnBpeGVsUmF0aW87XHJcblx0XHRyYWRpdXMgLT0gYXJjYmFyT3B0aW9uLndpZHRoIC8gMjtcclxuXHR9XHJcblx0XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgIGxldCBlYWNoU2VyaWVzID0gc2VyaWVzW2ldO1xyXG5cdFx0Ly/og4zmma/popzoibJcclxuXHRcdGNvbnRleHQuc2V0TGluZVdpZHRoKGFyY2Jhck9wdGlvbi53aWR0aCk7XHJcblx0XHRjb250ZXh0LnNldFN0cm9rZVN0eWxlKGFyY2Jhck9wdGlvbi5iYWNrZ3JvdW5kQ29sb3IgfHwgJyNFOUU5RTknKTtcclxuXHRcdGNvbnRleHQuc2V0TGluZUNhcCgncm91bmQnKTtcclxuXHRcdGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblx0XHRpZiAoYXJjYmFyT3B0aW9uLnR5cGUgPT0gJ2RlZmF1bHQnKSB7XHJcblx0XHQgIGNvbnRleHQuYXJjKGNlbnRlclBvc2l0aW9uLngsIGNlbnRlclBvc2l0aW9uLnksIHJhZGl1cy0oYXJjYmFyT3B0aW9uLndpZHRoK2FyY2Jhck9wdGlvbi5nYXApKmksIGFyY2Jhck9wdGlvbi5zdGFydEFuZ2xlICogTWF0aC5QSSwgYXJjYmFyT3B0aW9uLmVuZEFuZ2xlICogTWF0aC5QSSwgZmFsc2UpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdCAgY29udGV4dC5hcmMoY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSwgcmFkaXVzLShhcmNiYXJPcHRpb24ud2lkdGgrYXJjYmFyT3B0aW9uLmdhcCkqaSwgMCwgMiAqIE1hdGguUEksIGZhbHNlKTtcclxuXHRcdH1cclxuXHRcdGNvbnRleHQuc3Ryb2tlKCk7XHJcblx0XHQvL+i/m+W6puadoVxyXG4gICAgY29udGV4dC5zZXRMaW5lV2lkdGgoYXJjYmFyT3B0aW9uLndpZHRoKTtcclxuICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoZWFjaFNlcmllcy5jb2xvcik7XHJcbiAgICBjb250ZXh0LnNldExpbmVDYXAoJ3JvdW5kJyk7XHJcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgY29udGV4dC5hcmMoY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSwgcmFkaXVzLShhcmNiYXJPcHRpb24ud2lkdGgrYXJjYmFyT3B0aW9uLmdhcCkqaSwgYXJjYmFyT3B0aW9uLnN0YXJ0QW5nbGUgKiBNYXRoLlBJLCBlYWNoU2VyaWVzLl9wcm9wb3J0aW9uXyAqIE1hdGguUEksIGZhbHNlKTtcclxuICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgfVxyXG5cclxuICBkcmF3UmluZ1RpdGxlKG9wdHMsIGNvbmZpZywgY29udGV4dCwgY2VudGVyUG9zaXRpb24pO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgY2VudGVyOiBjZW50ZXJQb3NpdGlvbixcclxuICAgIHJhZGl1czogcmFkaXVzLFxyXG4gICAgc2VyaWVzOiBzZXJpZXNcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3R2F1Z2VEYXRhUG9pbnRzKGNhdGVnb3JpZXMsIHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcbiAgdmFyIHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IDE7XHJcbiAgdmFyIGdhdWdlT3B0aW9uID0gYXNzaWduKHt9LCB7XHJcblx0XHR0eXBlOidkZWZhdWx0JyxcclxuICAgIHN0YXJ0QW5nbGU6IDAuNzUsXHJcbiAgICBlbmRBbmdsZTogMC4yNSxcclxuICAgIHdpZHRoOiAxNSxcclxuICAgIHNwbGl0TGluZToge1xyXG4gICAgICBmaXhSYWRpdXM6IDAsXHJcbiAgICAgIHNwbGl0TnVtYmVyOiAxMCxcclxuICAgICAgd2lkdGg6IDE1LFxyXG4gICAgICBjb2xvcjogJyNGRkZGRkYnLFxyXG4gICAgICBjaGlsZE51bWJlcjogNSxcclxuICAgICAgY2hpbGRXaWR0aDogNVxyXG4gICAgfSxcclxuICAgIHBvaW50ZXI6IHtcclxuICAgICAgd2lkdGg6IDE1LFxyXG4gICAgICBjb2xvcjogJ2F1dG8nXHJcbiAgICB9XHJcbiAgfSwgb3B0cy5leHRyYS5nYXVnZSk7XHJcblxyXG4gIGlmIChnYXVnZU9wdGlvbi5vbGRBbmdsZSA9PSB1bmRlZmluZWQpIHtcclxuICAgIGdhdWdlT3B0aW9uLm9sZEFuZ2xlID0gZ2F1Z2VPcHRpb24uc3RhcnRBbmdsZTtcclxuICB9XHJcbiAgaWYgKGdhdWdlT3B0aW9uLm9sZERhdGEgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICBnYXVnZU9wdGlvbi5vbGREYXRhID0gMDtcclxuICB9XHJcbiAgY2F0ZWdvcmllcyA9IGdldEdhdWdlQXhpc1BvaW50cyhjYXRlZ29yaWVzLCBnYXVnZU9wdGlvbi5zdGFydEFuZ2xlLCBnYXVnZU9wdGlvbi5lbmRBbmdsZSk7XHJcblxyXG4gIHZhciBjZW50ZXJQb3NpdGlvbiA9IHtcclxuICAgIHg6IG9wdHMud2lkdGggLyAyLFxyXG4gICAgeTogb3B0cy5oZWlnaHQgLyAyXHJcbiAgfTtcclxuICB2YXIgcmFkaXVzID0gTWF0aC5taW4oY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSk7XHJcbiAgcmFkaXVzIC09IDUgKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgcmFkaXVzIC09IGdhdWdlT3B0aW9uLndpZHRoIC8gMjtcclxuICB2YXIgaW5uZXJSYWRpdXMgPSByYWRpdXMgLSBnYXVnZU9wdGlvbi53aWR0aDtcclxuXHR2YXIgdG90YWxBbmdsZT0wO1xyXG5cdFxyXG5cdC8v5Yik5pat5Luq6KGo55uY55qE5qC35byP77yaZGVmYXVsdOeZvuW6puagt+W8j++8jHByb2dyZXNz5paw5qC35byPXHJcblx0aWYoZ2F1Z2VPcHRpb24udHlwZSA9PSAncHJvZ3Jlc3MnKXtcclxuXHRcdFxyXG5cdFx0Ly8jIyDnrKzkuIDmraXnlLvkuK3lv4PlnIblvaLog4zmma/lkozov5vluqbmnaHog4zmma9cclxuXHRcdC8v5Lit5b+D5ZyG5b2i6IOM5pmvXHJcblx0XHR2YXIgcGllUmFkaXVzID0gcmFkaXVzIC0gZ2F1Z2VPcHRpb24ud2lkdGgqMztcclxuXHRcdGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblx0XHRsZXQgZ3JhZGllbnQgPSBjb250ZXh0LmNyZWF0ZUxpbmVhckdyYWRpZW50KGNlbnRlclBvc2l0aW9uLngsIGNlbnRlclBvc2l0aW9uLnktcGllUmFkaXVzLCBjZW50ZXJQb3NpdGlvbi54ICwgY2VudGVyUG9zaXRpb24ueStwaWVSYWRpdXMpO1xyXG5cdFx0Ly/phY3nva7muJDlj5jloavlhYXvvIjotbfngrnvvJrkuK3lv4PngrnlkJHkuIrlh4/ljYrlvoTvvJvnu5PmnZ/ngrnkuK3lv4PngrnlkJHkuIvliqDljYrlvoTvvIlcclxuXHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCgnMCcsIGhleFRvUmdiKHNlcmllc1swXS5jb2xvciwgMC4zKSk7XHJcblx0XHRncmFkaWVudC5hZGRDb2xvclN0b3AoJzEuMCcsaGV4VG9SZ2IoXCIjRkZGRkZGXCIsIDAuMSkpO1xyXG5cdFx0Y29udGV4dC5zZXRGaWxsU3R5bGUoZ3JhZGllbnQpO1xyXG5cdFx0Y29udGV4dC5hcmMoY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSwgcGllUmFkaXVzLCAwLCAyKk1hdGguUEksIGZhbHNlKTtcclxuXHRcdGNvbnRleHQuZmlsbCgpO1xyXG5cdFx0Ly/nlLvov5vluqbmnaHog4zmma9cclxuXHRcdGNvbnRleHQuc2V0TGluZVdpZHRoKGdhdWdlT3B0aW9uLndpZHRoKTtcclxuXHRcdGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoaGV4VG9SZ2Ioc2VyaWVzWzBdLmNvbG9yLCAwLjMpKTtcclxuXHRcdGNvbnRleHQuc2V0TGluZUNhcCgncm91bmQnKTtcclxuXHRcdGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblx0XHRjb250ZXh0LmFyYyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55LCBpbm5lclJhZGl1cyAsIGdhdWdlT3B0aW9uLnN0YXJ0QW5nbGUgKiBNYXRoLlBJLCBnYXVnZU9wdGlvbi5lbmRBbmdsZSAqTWF0aC5QSSwgZmFsc2UpO1xyXG5cdFx0Y29udGV4dC5zdHJva2UoKTtcclxuXHRcdFxyXG5cdFx0Ly8jIyDnrKzkuozmraXnlLvliLvluqbnur9cclxuXHRcdHRvdGFsQW5nbGUgPSBnYXVnZU9wdGlvbi5zdGFydEFuZ2xlIC0gZ2F1Z2VPcHRpb24uZW5kQW5nbGUgKyAxO1xyXG5cdFx0bGV0IHNwbGl0QW5nbGUgPSB0b3RhbEFuZ2xlIC8gZ2F1Z2VPcHRpb24uc3BsaXRMaW5lLnNwbGl0TnVtYmVyO1xyXG5cdFx0bGV0IGNoaWxkQW5nbGUgPSB0b3RhbEFuZ2xlIC8gZ2F1Z2VPcHRpb24uc3BsaXRMaW5lLnNwbGl0TnVtYmVyIC8gZ2F1Z2VPcHRpb24uc3BsaXRMaW5lLmNoaWxkTnVtYmVyO1xyXG5cdFx0bGV0IHN0YXJ0WCA9IC1yYWRpdXMgLSBnYXVnZU9wdGlvbi53aWR0aCAqIDAuNSAtIGdhdWdlT3B0aW9uLnNwbGl0TGluZS5maXhSYWRpdXM7XHJcblx0XHRsZXQgZW5kWCA9IC1yYWRpdXMgLSBnYXVnZU9wdGlvbi53aWR0aCAtIGdhdWdlT3B0aW9uLnNwbGl0TGluZS5maXhSYWRpdXMgKyBnYXVnZU9wdGlvbi5zcGxpdExpbmUud2lkdGg7XHJcblx0XHRjb250ZXh0LnNhdmUoKTtcclxuXHRcdGNvbnRleHQudHJhbnNsYXRlKGNlbnRlclBvc2l0aW9uLngsIGNlbnRlclBvc2l0aW9uLnkpO1xyXG5cdFx0Y29udGV4dC5yb3RhdGUoKGdhdWdlT3B0aW9uLnN0YXJ0QW5nbGUgLSAxKSAqIE1hdGguUEkpO1xyXG5cdFx0bGV0IGxlbiA9IGdhdWdlT3B0aW9uLnNwbGl0TGluZS5zcGxpdE51bWJlciAqIGdhdWdlT3B0aW9uLnNwbGl0TGluZS5jaGlsZE51bWJlciArIDE7XHJcblx0XHRsZXQgcHJvYyA9IHNlcmllc1swXS5kYXRhICogcHJvY2VzcztcclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuXHRcdCAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuXHRcdFx0Ly/liLvluqbnur/pmo/ov5vluqblj5joibJcclxuXHRcdFx0aWYocHJvYz4oaS9sZW4pKXtcclxuXHRcdFx0XHRjb250ZXh0LnNldFN0cm9rZVN0eWxlKGhleFRvUmdiKHNlcmllc1swXS5jb2xvciwgMSkpO1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRjb250ZXh0LnNldFN0cm9rZVN0eWxlKGhleFRvUmdiKHNlcmllc1swXS5jb2xvciwgMC4zKSk7XHJcblx0XHRcdH1cclxuXHRcdCAgY29udGV4dC5zZXRMaW5lV2lkdGgoMyAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcblx0XHQgIGNvbnRleHQubW92ZVRvKHN0YXJ0WCwgMCk7XHJcblx0XHQgIGNvbnRleHQubGluZVRvKGVuZFgsIDApO1xyXG5cdFx0ICBjb250ZXh0LnN0cm9rZSgpO1xyXG5cdFx0ICBjb250ZXh0LnJvdGF0ZShjaGlsZEFuZ2xlICogTWF0aC5QSSk7XHJcblx0XHR9XHJcblx0XHRjb250ZXh0LnJlc3RvcmUoKTtcclxuXHRcdFxyXG5cdFx0Ly8jIyDnrKzkuInmraXnlLvov5vluqbmnaFcclxuXHRcdHNlcmllcyA9IGdldEFyY2JhckRhdGFQb2ludHMoc2VyaWVzLCBnYXVnZU9wdGlvbiwgcHJvY2Vzcyk7XHJcblx0XHRjb250ZXh0LnNldExpbmVXaWR0aChnYXVnZU9wdGlvbi53aWR0aCk7XHJcblx0XHRjb250ZXh0LnNldFN0cm9rZVN0eWxlKHNlcmllc1swXS5jb2xvcik7XHJcblx0XHRjb250ZXh0LnNldExpbmVDYXAoJ3JvdW5kJyk7XHJcblx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdFx0Y29udGV4dC5hcmMoY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSwgaW5uZXJSYWRpdXMgLCBnYXVnZU9wdGlvbi5zdGFydEFuZ2xlICogTWF0aC5QSSwgc2VyaWVzWzBdLl9wcm9wb3J0aW9uXyAqTWF0aC5QSSwgZmFsc2UpO1xyXG5cdFx0Y29udGV4dC5zdHJva2UoKTtcclxuXHRcdFxyXG5cdFx0Ly8jIyDnrKzlm5vmraXnlLvmjIfpkohcclxuXHRcdGxldCBwb2ludGVyUmFkaXVzID0gcmFkaXVzIC0gZ2F1Z2VPcHRpb24ud2lkdGgqMi41O1xyXG5cdFx0Y29udGV4dC5zYXZlKCk7XHJcblx0XHRjb250ZXh0LnRyYW5zbGF0ZShjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55KTtcclxuXHRcdGNvbnRleHQucm90YXRlKChzZXJpZXNbMF0uX3Byb3BvcnRpb25fIC0gMSkgKiBNYXRoLlBJKTtcclxuXHRcdGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblx0XHRjb250ZXh0LnNldExpbmVXaWR0aChnYXVnZU9wdGlvbi53aWR0aC8zKTtcclxuXHRcdGxldCBncmFkaWVudDMgPSBjb250ZXh0LmNyZWF0ZUxpbmVhckdyYWRpZW50KDAsIC1wb2ludGVyUmFkaXVzKjAuNiwgMCAsIHBvaW50ZXJSYWRpdXMqMC42KTtcclxuXHRcdGdyYWRpZW50My5hZGRDb2xvclN0b3AoJzAnLCBoZXhUb1JnYignI0ZGRkZGRicsIDApKTtcclxuXHRcdGdyYWRpZW50My5hZGRDb2xvclN0b3AoJzAuNScsIGhleFRvUmdiKHNlcmllc1swXS5jb2xvciwgMSkpO1xyXG5cdFx0Z3JhZGllbnQzLmFkZENvbG9yU3RvcCgnMS4wJywgaGV4VG9SZ2IoJyNGRkZGRkYnLCAwKSk7XHJcblx0XHRjb250ZXh0LnNldFN0cm9rZVN0eWxlKGdyYWRpZW50Myk7XHJcblx0XHRjb250ZXh0LmFyYygwLCAwLCBwb2ludGVyUmFkaXVzICwgMC44NSogTWF0aC5QSSwgMS4xNSAqIE1hdGguUEksIGZhbHNlKTtcclxuXHRcdGNvbnRleHQuc3Ryb2tlKCk7XHJcblx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdFx0Y29udGV4dC5zZXRMaW5lV2lkdGgoMSk7XHJcblx0XHRjb250ZXh0LnNldFN0cm9rZVN0eWxlKHNlcmllc1swXS5jb2xvcik7XHJcblx0XHRjb250ZXh0LnNldEZpbGxTdHlsZShzZXJpZXNbMF0uY29sb3IpO1xyXG5cdFx0Y29udGV4dC5tb3ZlVG8oLXBvaW50ZXJSYWRpdXMtZ2F1Z2VPcHRpb24ud2lkdGgvMy8yLC00KTtcclxuXHRcdGNvbnRleHQubGluZVRvKC1wb2ludGVyUmFkaXVzLWdhdWdlT3B0aW9uLndpZHRoLzMvMi00LDApO1xyXG5cdFx0Y29udGV4dC5saW5lVG8oLXBvaW50ZXJSYWRpdXMtZ2F1Z2VPcHRpb24ud2lkdGgvMy8yLDQpO1xyXG5cdFx0Y29udGV4dC5saW5lVG8oLXBvaW50ZXJSYWRpdXMtZ2F1Z2VPcHRpb24ud2lkdGgvMy8yLC00KTtcclxuXHRcdGNvbnRleHQuc3Ryb2tlKCk7XHJcblx0XHRjb250ZXh0LmZpbGwoKTtcclxuXHRcdGNvbnRleHQucmVzdG9yZSgpO1xyXG5cdFx0XHJcblx0Ly9kZWZhdWx055m+5bqm5qC35byPXHJcblx0fWVsc2V7XHJcblx0XHQvL+eUu+iDjOaZr1xyXG5cdFx0Y29udGV4dC5zZXRMaW5lV2lkdGgoZ2F1Z2VPcHRpb24ud2lkdGgpO1xyXG5cdFx0Y29udGV4dC5zZXRMaW5lQ2FwKCdidXR0Jyk7XHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGNhdGVnb3JpZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdCAgbGV0IGVhY2hDYXRlZ29yaWVzID0gY2F0ZWdvcmllc1tpXTtcclxuXHRcdCAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuXHRcdCAgY29udGV4dC5zZXRTdHJva2VTdHlsZShlYWNoQ2F0ZWdvcmllcy5jb2xvcik7XHJcblx0XHQgIGNvbnRleHQuYXJjKGNlbnRlclBvc2l0aW9uLngsIGNlbnRlclBvc2l0aW9uLnksIHJhZGl1cywgZWFjaENhdGVnb3JpZXMuX3N0YXJ0QW5nbGVfICogTWF0aC5QSSwgZWFjaENhdGVnb3JpZXMuX2VuZEFuZ2xlXyAqTWF0aC5QSSwgZmFsc2UpO1xyXG5cdFx0ICBjb250ZXh0LnN0cm9rZSgpO1xyXG5cdFx0fVxyXG5cdFx0Y29udGV4dC5zYXZlKCk7XHJcblx0XHRcclxuXHRcdC8v55S75Yi75bqm57q/XHJcblx0XHR0b3RhbEFuZ2xlID0gZ2F1Z2VPcHRpb24uc3RhcnRBbmdsZSAtIGdhdWdlT3B0aW9uLmVuZEFuZ2xlICsgMTtcclxuXHRcdGxldCBzcGxpdEFuZ2xlID0gdG90YWxBbmdsZSAvIGdhdWdlT3B0aW9uLnNwbGl0TGluZS5zcGxpdE51bWJlcjtcclxuXHRcdGxldCBjaGlsZEFuZ2xlID0gdG90YWxBbmdsZSAvIGdhdWdlT3B0aW9uLnNwbGl0TGluZS5zcGxpdE51bWJlciAvIGdhdWdlT3B0aW9uLnNwbGl0TGluZS5jaGlsZE51bWJlcjtcclxuXHRcdGxldCBzdGFydFggPSAtcmFkaXVzIC0gZ2F1Z2VPcHRpb24ud2lkdGggKiAwLjUgLSBnYXVnZU9wdGlvbi5zcGxpdExpbmUuZml4UmFkaXVzO1xyXG5cdFx0bGV0IGVuZFggPSAtcmFkaXVzIC0gZ2F1Z2VPcHRpb24ud2lkdGggKiAwLjUgLSBnYXVnZU9wdGlvbi5zcGxpdExpbmUuZml4UmFkaXVzICsgZ2F1Z2VPcHRpb24uc3BsaXRMaW5lLndpZHRoO1xyXG5cdFx0bGV0IGNoaWxkZW5kWCA9IC1yYWRpdXMgLSBnYXVnZU9wdGlvbi53aWR0aCAqIDAuNSAtIGdhdWdlT3B0aW9uLnNwbGl0TGluZS5maXhSYWRpdXMgKyBnYXVnZU9wdGlvbi5zcGxpdExpbmUuY2hpbGRXaWR0aDtcclxuXHRcdFxyXG5cdFx0Y29udGV4dC50cmFuc2xhdGUoY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSk7XHJcblx0XHRjb250ZXh0LnJvdGF0ZSgoZ2F1Z2VPcHRpb24uc3RhcnRBbmdsZSAtIDEpICogTWF0aC5QSSk7XHJcblx0XHRcclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgZ2F1Z2VPcHRpb24uc3BsaXRMaW5lLnNwbGl0TnVtYmVyICsgMTsgaSsrKSB7XHJcblx0XHQgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblx0XHQgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoZ2F1Z2VPcHRpb24uc3BsaXRMaW5lLmNvbG9yKTtcclxuXHRcdCAgY29udGV4dC5zZXRMaW5lV2lkdGgoMiAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcblx0XHQgIGNvbnRleHQubW92ZVRvKHN0YXJ0WCwgMCk7XHJcblx0XHQgIGNvbnRleHQubGluZVRvKGVuZFgsIDApO1xyXG5cdFx0ICBjb250ZXh0LnN0cm9rZSgpO1xyXG5cdFx0ICBjb250ZXh0LnJvdGF0ZShzcGxpdEFuZ2xlICogTWF0aC5QSSk7XHJcblx0XHR9XHJcblx0XHRjb250ZXh0LnJlc3RvcmUoKTtcclxuXHRcdFxyXG5cdFx0Y29udGV4dC5zYXZlKCk7XHJcblx0XHRjb250ZXh0LnRyYW5zbGF0ZShjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55KTtcclxuXHRcdGNvbnRleHQucm90YXRlKChnYXVnZU9wdGlvbi5zdGFydEFuZ2xlIC0gMSkgKiBNYXRoLlBJKTtcclxuXHRcdFxyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBnYXVnZU9wdGlvbi5zcGxpdExpbmUuc3BsaXROdW1iZXIgKiBnYXVnZU9wdGlvbi5zcGxpdExpbmUuY2hpbGROdW1iZXIgKyAxOyBpKyspIHtcclxuXHRcdCAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuXHRcdCAgY29udGV4dC5zZXRTdHJva2VTdHlsZShnYXVnZU9wdGlvbi5zcGxpdExpbmUuY29sb3IpO1xyXG5cdFx0ICBjb250ZXh0LnNldExpbmVXaWR0aCgxICogb3B0cy5waXhlbFJhdGlvKTtcclxuXHRcdCAgY29udGV4dC5tb3ZlVG8oc3RhcnRYLCAwKTtcclxuXHRcdCAgY29udGV4dC5saW5lVG8oY2hpbGRlbmRYLCAwKTtcclxuXHRcdCAgY29udGV4dC5zdHJva2UoKTtcclxuXHRcdCAgY29udGV4dC5yb3RhdGUoY2hpbGRBbmdsZSAqIE1hdGguUEkpO1xyXG5cdFx0fVxyXG5cdFx0Y29udGV4dC5yZXN0b3JlKCk7XHJcblx0XHRcclxuXHRcdC8v55S75oyH6ZKIXHJcblx0XHRzZXJpZXMgPSBnZXRHYXVnZURhdGFQb2ludHMoc2VyaWVzLCBjYXRlZ29yaWVzLCBnYXVnZU9wdGlvbiwgcHJvY2Vzcyk7XHJcblx0XHRcclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgc2VyaWVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHQgIGxldCBlYWNoU2VyaWVzID0gc2VyaWVzW2ldO1xyXG5cdFx0ICBjb250ZXh0LnNhdmUoKTtcclxuXHRcdCAgY29udGV4dC50cmFuc2xhdGUoY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSk7XHJcblx0XHQgIGNvbnRleHQucm90YXRlKChlYWNoU2VyaWVzLl9wcm9wb3J0aW9uXyAtIDEpICogTWF0aC5QSSk7XHJcblx0XHQgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblx0XHQgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGVhY2hTZXJpZXMuY29sb3IpO1xyXG5cdFx0ICBjb250ZXh0Lm1vdmVUbyhnYXVnZU9wdGlvbi5wb2ludGVyLndpZHRoLCAwKTtcclxuXHRcdCAgY29udGV4dC5saW5lVG8oMCwgLWdhdWdlT3B0aW9uLnBvaW50ZXIud2lkdGggLyAyKTtcclxuXHRcdCAgY29udGV4dC5saW5lVG8oLWlubmVyUmFkaXVzLCAwKTtcclxuXHRcdCAgY29udGV4dC5saW5lVG8oMCwgZ2F1Z2VPcHRpb24ucG9pbnRlci53aWR0aCAvIDIpO1xyXG5cdFx0ICBjb250ZXh0LmxpbmVUbyhnYXVnZU9wdGlvbi5wb2ludGVyLndpZHRoLCAwKTtcclxuXHRcdCAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuXHRcdCAgY29udGV4dC5maWxsKCk7XHJcblx0XHQgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblx0XHQgIGNvbnRleHQuc2V0RmlsbFN0eWxlKCcjRkZGRkZGJyk7XHJcblx0XHQgIGNvbnRleHQuYXJjKDAsIDAsIGdhdWdlT3B0aW9uLnBvaW50ZXIud2lkdGggLyA2LCAwLCAyICogTWF0aC5QSSwgZmFsc2UpO1xyXG5cdFx0ICBjb250ZXh0LmZpbGwoKTtcclxuXHRcdCAgY29udGV4dC5yZXN0b3JlKCk7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdGlmIChvcHRzLmRhdGFMYWJlbCAhPT0gZmFsc2UpIHtcclxuXHRcdCAgZHJhd0dhdWdlTGFiZWwoZ2F1Z2VPcHRpb24sIHJhZGl1cywgY2VudGVyUG9zaXRpb24sIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdC8v55S75Luq6KGo55uY5qCH6aKY77yM5Ymv5qCH6aKYXHJcbiAgZHJhd1JpbmdUaXRsZShvcHRzLCBjb25maWcsIGNvbnRleHQsIGNlbnRlclBvc2l0aW9uKTtcclxuXHJcbiAgaWYgKHByb2Nlc3MgPT09IDEgJiYgb3B0cy50eXBlID09PSAnZ2F1Z2UnKSB7XHJcbiAgICBvcHRzLmV4dHJhLmdhdWdlLm9sZEFuZ2xlID0gc2VyaWVzWzBdLl9wcm9wb3J0aW9uXztcclxuICAgIG9wdHMuZXh0cmEuZ2F1Z2Uub2xkRGF0YSA9IHNlcmllc1swXS5kYXRhO1xyXG4gIH1cclxuICByZXR1cm4ge1xyXG4gICAgY2VudGVyOiBjZW50ZXJQb3NpdGlvbixcclxuICAgIHJhZGl1czogcmFkaXVzLFxyXG4gICAgaW5uZXJSYWRpdXM6IGlubmVyUmFkaXVzLFxyXG4gICAgY2F0ZWdvcmllczogY2F0ZWdvcmllcyxcclxuICAgIHRvdGFsQW5nbGU6IHRvdGFsQW5nbGVcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3UmFkYXJEYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcbiAgdmFyIHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IDE7XHJcbiAgdmFyIHJhZGFyT3B0aW9uID0gYXNzaWduKHt9LHtcclxuICAgIGdyaWRDb2xvcjogJyNjY2NjY2MnLFxyXG5cdFx0Z3JpZFR5cGU6ICdyYWRhcicsXHJcbiAgICBsYWJlbENvbG9yOiAnIzY2NjY2NicsXHJcbiAgICBvcGFjaXR5OiAwLjIsXHJcblx0XHRncmlkQ291bnQ6M1xyXG4gIH0sb3B0cy5leHRyYS5yYWRhcik7XHJcbiAgXHJcbiAgdmFyIGNvb3JkaW5hdGVBbmdsZSA9IGdldFJhZGFyQ29vcmRpbmF0ZVNlcmllcyhvcHRzLmNhdGVnb3JpZXMubGVuZ3RoKTtcclxuICBcclxuICB2YXIgY2VudGVyUG9zaXRpb24gPSB7XHJcbiAgICB4OiBvcHRzLmFyZWFbM10gKyAob3B0cy53aWR0aCAtIG9wdHMuYXJlYVsxXSAtIG9wdHMuYXJlYVszXSkgLyAyLFxyXG4gICAgeTogb3B0cy5hcmVhWzBdICsgKG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzBdIC0gb3B0cy5hcmVhWzJdKSAvIDJcclxuICB9O1xyXG5cclxuICB2YXIgcmFkaXVzID0gTWF0aC5taW4oY2VudGVyUG9zaXRpb24ueCAtIChnZXRNYXhUZXh0TGlzdExlbmd0aChvcHRzLmNhdGVnb3JpZXMpICsgY29uZmlnLnJhZGFyTGFiZWxUZXh0TWFyZ2luKSxjZW50ZXJQb3NpdGlvbi55IC0gY29uZmlnLnJhZGFyTGFiZWxUZXh0TWFyZ2luKTtcclxuICAvL1RPRE/pgLvovpHkuI3lr7lcclxuICByYWRpdXMgLT0gb3B0cy5wYWRkaW5nWzFdO1xyXG5cclxuICAvLyDnlLvliIblibLnur9cclxuICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gIGNvbnRleHQuc2V0TGluZVdpZHRoKDEgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUocmFkYXJPcHRpb24uZ3JpZENvbG9yKTtcclxuICBjb29yZGluYXRlQW5nbGUuZm9yRWFjaChmdW5jdGlvbihhbmdsZSkge1xyXG4gICAgdmFyIHBvcyA9IGNvbnZlcnRDb29yZGluYXRlT3JpZ2luKHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlKSwgcmFkaXVzICogTWF0aC5zaW4oYW5nbGUpLCBjZW50ZXJQb3NpdGlvbik7XHJcbiAgICBjb250ZXh0Lm1vdmVUbyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55KTtcclxuICAgIGNvbnRleHQubGluZVRvKHBvcy54LCBwb3MueSk7XHJcbiAgfSk7XHJcbiAgY29udGV4dC5zdHJva2UoKTtcclxuICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG5cdFxyXG4gIC8vIOeUu+iDjOaZr+e9keagvFxyXG4gIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGkpIHtcclxuICAgIHZhciBzdGFydFBvcyA9IHt9O1xyXG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDEgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShyYWRhck9wdGlvbi5ncmlkQ29sb3IpO1xyXG5cdFx0aWYocmFkYXJPcHRpb24uZ3JpZFR5cGU9PSdyYWRhcicpe1xyXG5cdFx0XHRjb29yZGluYXRlQW5nbGUuZm9yRWFjaChmdW5jdGlvbihhbmdsZSwgaW5kZXgpIHtcclxuXHRcdFx0ICB2YXIgcG9zID0gY29udmVydENvb3JkaW5hdGVPcmlnaW4ocmFkaXVzIC8gcmFkYXJPcHRpb24uZ3JpZENvdW50ICogaSAqIE1hdGguY29zKGFuZ2xlKSwgcmFkaXVzIC8gcmFkYXJPcHRpb24uZ3JpZENvdW50ICogaSAqIE1hdGguc2luKGFuZ2xlKSwgY2VudGVyUG9zaXRpb24pO1xyXG5cdFx0XHQgIGlmIChpbmRleCA9PT0gMCkge1xyXG5cdFx0XHQgICAgc3RhcnRQb3MgPSBwb3M7XHJcblx0XHRcdCAgICBjb250ZXh0Lm1vdmVUbyhwb3MueCwgcG9zLnkpO1xyXG5cdFx0XHQgIH0gZWxzZSB7XHJcblx0XHRcdCAgICBjb250ZXh0LmxpbmVUbyhwb3MueCwgcG9zLnkpO1xyXG5cdFx0XHQgIH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdGNvbnRleHQubGluZVRvKHN0YXJ0UG9zLngsIHN0YXJ0UG9zLnkpO1xyXG5cdFx0fWVsc2V7XHJcblx0XHRcdHZhciBwb3MgPSBjb252ZXJ0Q29vcmRpbmF0ZU9yaWdpbihyYWRpdXMgLyByYWRhck9wdGlvbi5ncmlkQ291bnQgKiBpICogTWF0aC5jb3MoMS41KSwgcmFkaXVzIC8gcmFkYXJPcHRpb24uZ3JpZENvdW50ICogaSAqIE1hdGguc2luKDEuNSksIGNlbnRlclBvc2l0aW9uKTtcclxuXHRcdFx0Y29udGV4dC5hcmMoY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSwgY2VudGVyUG9zaXRpb24ueSAtIHBvcy55LCAwLCAyICogTWF0aC5QSSwgZmFsc2UpO1xyXG5cdFx0fVxyXG4gICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgfTtcclxuXHJcbiAgZm9yICh2YXIgaSA9IDE7IGkgPD0gcmFkYXJPcHRpb24uZ3JpZENvdW50OyBpKyspIHtcclxuICAgIF9sb29wKGkpO1xyXG4gIH1cclxuXHJcbiAgdmFyIHJhZGFyRGF0YVBvaW50cyA9IGdldFJhZGFyRGF0YVBvaW50cyhjb29yZGluYXRlQW5nbGUsIGNlbnRlclBvc2l0aW9uLCByYWRpdXMsIHNlcmllcywgb3B0cywgcHJvY2Vzcyk7XHJcblxyXG4gIHJhZGFyRGF0YVBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uKGVhY2hTZXJpZXMsIHNlcmllc0luZGV4KSB7XHJcbiAgICAvLyDnu5jliLbljLrln5/mlbDmja5cclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0LnNldEZpbGxTdHlsZShoZXhUb1JnYihlYWNoU2VyaWVzLmNvbG9yLCByYWRhck9wdGlvbi5vcGFjaXR5KSk7XHJcbiAgICBlYWNoU2VyaWVzLmRhdGEuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgICBpZiAoaW5kZXggPT09IDApIHtcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhpdGVtLnBvc2l0aW9uLngsIGl0ZW0ucG9zaXRpb24ueSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbS5wb3NpdGlvbi54LCBpdGVtLnBvc2l0aW9uLnkpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICBjb250ZXh0LmZpbGwoKTtcclxuXHJcbiAgICBpZiAob3B0cy5kYXRhUG9pbnRTaGFwZSAhPT0gZmFsc2UpIHtcclxuICAgICAgdmFyIHBvaW50cyA9IGVhY2hTZXJpZXMuZGF0YS5tYXAoZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgIHJldHVybiBpdGVtLnBvc2l0aW9uO1xyXG4gICAgICB9KTtcclxuICAgICAgZHJhd1BvaW50U2hhcGUocG9pbnRzLCBlYWNoU2VyaWVzLmNvbG9yLCBlYWNoU2VyaWVzLnBvaW50U2hhcGUsIGNvbnRleHQsIG9wdHMpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIC8vIGRyYXcgbGFiZWwgdGV4dFxyXG4gIGRyYXdSYWRhckxhYmVsKGNvb3JkaW5hdGVBbmdsZSwgcmFkaXVzLCBjZW50ZXJQb3NpdGlvbiwgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGNlbnRlcjogY2VudGVyUG9zaXRpb24sXHJcbiAgICByYWRpdXM6IHJhZGl1cyxcclxuICAgIGFuZ2xlTGlzdDogY29vcmRpbmF0ZUFuZ2xlXHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gbm9ybWFsSW50KG1pbiwgbWF4LCBpdGVyKSB7XHJcbiAgICBpdGVyID0gaXRlcj09MD8xOml0ZXI7XHJcbiAgICB2YXIgYXJyID0gW107XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZXI7IGkrKykge1xyXG4gICAgICAgIGFycltpXSA9IE1hdGgucmFuZG9tKCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuICBNYXRoLmZsb29yKGFyci5yZWR1Y2UoZnVuY3Rpb24oaSxqKXtyZXR1cm4gaStqfSkvaXRlcioobWF4LW1pbikpK21pbjsgIFxyXG59O1xyXG5cclxuZnVuY3Rpb24gY29sbGlzaW9uTmV3KGFyZWEscG9pbnRzLHdpZHRoLGhlaWdodCl7XHJcbiAgICB2YXIgaXNJbj1mYWxzZTtcclxuICAgIGZvcihsZXQgaT0wO2k8cG9pbnRzLmxlbmd0aDtpKyspe1xyXG4gICAgICBpZihwb2ludHNbaV0uYXJlYSl7XHJcbiAgICAgICAgaWYoYXJlYVszXTxwb2ludHNbaV0uYXJlYVsxXXx8YXJlYVswXT5wb2ludHNbaV0uYXJlYVsyXXx8YXJlYVsxXT5wb2ludHNbaV0uYXJlYVszXXx8YXJlYVsyXTxwb2ludHNbaV0uYXJlYVswXSl7XHJcbiAgICAgICAgICBpZihhcmVhWzBdPDAgfHwgYXJlYVsxXTwwIHx8IGFyZWFbMl0+d2lkdGggfHwgYXJlYVszXT5oZWlnaHQpe1xyXG4gICAgICAgICAgICBpc0luPXRydWU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIGlzSW49ZmFsc2U7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBpc0luPXRydWU7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBpc0luO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gZ2V0Qm91bmRpbmdCb3goZGF0YSkge1xyXG4gIHZhciBib3VuZHMgPSB7fSwgY29vcmRzO1xyXG4gIGJvdW5kcy54TWluID0gMTgwO1xyXG4gIGJvdW5kcy54TWF4ID0gMDtcclxuICBib3VuZHMueU1pbiA9IDkwO1xyXG4gIGJvdW5kcy55TWF4ID0gMFxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgY29vcmRhID0gZGF0YVtpXS5nZW9tZXRyeS5jb29yZGluYXRlc1xyXG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IGNvb3JkYS5sZW5ndGg7IGsrKykge1xyXG4gICAgICAgICAgY29vcmRzID0gY29vcmRhW2tdO1xyXG4gICAgICAgICAgaWYgKGNvb3Jkcy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICAgIGNvb3JkcyA9IGNvb3Jkc1swXVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjb29yZHMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICB2YXIgbG9uZ2l0dWRlID0gY29vcmRzW2pdWzBdO1xyXG4gICAgICAgICAgICAgIHZhciBsYXRpdHVkZSA9IGNvb3Jkc1tqXVsxXTtcclxuICAgICAgICAgICAgICB2YXIgcG9pbnQgPSB7XHJcbiAgICAgICAgICAgICAgICAgIHg6IGxvbmdpdHVkZSwgXHJcbiAgICAgICAgICAgICAgICAgIHk6IGxhdGl0dWRlIFxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBib3VuZHMueE1pbiA9IGJvdW5kcy54TWluIDwgcG9pbnQueCA/IGJvdW5kcy54TWluIDogcG9pbnQueDtcclxuICAgICAgICAgICAgICBib3VuZHMueE1heCA9IGJvdW5kcy54TWF4ID4gcG9pbnQueCA/IGJvdW5kcy54TWF4IDogcG9pbnQueDtcclxuICAgICAgICAgICAgICBib3VuZHMueU1pbiA9IGJvdW5kcy55TWluIDwgcG9pbnQueSA/IGJvdW5kcy55TWluIDogcG9pbnQueTtcclxuICAgICAgICAgICAgICBib3VuZHMueU1heCA9IGJvdW5kcy55TWF4ID4gcG9pbnQueSA/IGJvdW5kcy55TWF4IDogcG9pbnQueTtcclxuICAgICAgICAgIH1cclxuICAgICAgfVxyXG4gIH1cclxuICByZXR1cm4gYm91bmRzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjb29yZGluYXRlVG9Qb2ludChsYXRpdHVkZSwgbG9uZ2l0dWRlLGJvdW5kcyxzY2FsZSx4b2Zmc2V0LHlvZmZzZXQpIHtcclxuICByZXR1cm4ge1xyXG4gICAgICB4OiAobG9uZ2l0dWRlIC0gYm91bmRzLnhNaW4pICogc2NhbGUreG9mZnNldCxcclxuICAgICAgeTogKGJvdW5kcy55TWF4IC0gbGF0aXR1ZGUpICogc2NhbGUreW9mZnNldFxyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBvaW50VG9Db29yZGluYXRlKHBvaW50WSwgcG9pbnRYLGJvdW5kcyxzY2FsZSx4b2Zmc2V0LHlvZmZzZXQpIHtcclxuICByZXR1cm4ge1xyXG4gICAgICB4OiAocG9pbnRYLXhvZmZzZXQpL3NjYWxlK2JvdW5kcy54TWluLFxyXG4gICAgICB5OiBib3VuZHMueU1heCAtIChwb2ludFkteW9mZnNldCkvc2NhbGVcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc1JheUludGVyc2VjdHNTZWdtZW50KHBvaSxzX3BvaSxlX3BvaSl7XHJcbiAgICAgIGlmIChzX3BvaVsxXT09ZV9wb2lbMV0pe3JldHVybiBmYWxzZTt9IFxyXG4gICAgICBpZiAoc19wb2lbMV0+cG9pWzFdICYmIGVfcG9pWzFdPnBvaVsxXSl7cmV0dXJuIGZhbHNlO31cclxuICAgICAgaWYgKHNfcG9pWzFdPHBvaVsxXSAmJiBlX3BvaVsxXTxwb2lbMV0pe3JldHVybiBmYWxzZTt9XHJcbiAgICAgIGlmIChzX3BvaVsxXT09cG9pWzFdICYmIGVfcG9pWzFdPnBvaVsxXSl7cmV0dXJuIGZhbHNlO31cclxuICAgICAgaWYgKGVfcG9pWzFdPT1wb2lbMV0gJiYgc19wb2lbMV0+cG9pWzFdKXtyZXR1cm4gZmFsc2U7fVxyXG4gICAgICBpZiAoc19wb2lbMF08cG9pWzBdICYmIGVfcG9pWzFdPHBvaVsxXSl7cmV0dXJuIGZhbHNlO31cclxuICAgICAgbGV0IHhzZWc9ZV9wb2lbMF0tKGVfcG9pWzBdLXNfcG9pWzBdKSooZV9wb2lbMV0tcG9pWzFdKS8oZV9wb2lbMV0tc19wb2lbMV0pOyBcclxuICAgICAgaWYgKHhzZWc8cG9pWzBdKXtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbn0gXHJcblxyXG5mdW5jdGlvbiBpc1BvaVdpdGhpblBvbHkocG9pLHBvbHkpe1xyXG4gIGxldCBzaW5zYz0wO1xyXG4gIGZvciAobGV0IGk9MDtpPHBvbHkubGVuZ3RoO2krKyl7XHJcbiAgICBsZXQgZXBvbHk9cG9seVtpXVswXTtcclxuICAgIGlmIChwb2x5Lmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgIGVwb2x5ID0gcG9seVtpXVswXVxyXG4gICAgfVxyXG4gICAgZm9yKGxldCBqPTA7ajxlcG9seS5sZW5ndGgtMTtqKyspe1xyXG4gICAgICBsZXQgc19wb2k9ZXBvbHlbal07XHJcbiAgICAgIGxldCBlX3BvaT1lcG9seVtqKzFdO1xyXG4gICAgICBpZiAoaXNSYXlJbnRlcnNlY3RzU2VnbWVudChwb2ksc19wb2ksZV9wb2kpKXtcclxuICAgICAgICBzaW5zYys9MTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBpZihzaW5zYyUyPT0xKXtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1lbHNle1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGRyYXdNYXBEYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcbiAgdmFyIG1hcE9wdGlvbj1hc3NpZ24oe30se1xyXG4gICAgYm9yZGVyOnRydWUsXHJcbiAgICBib3JkZXJXaWR0aDoxLFxyXG4gICAgYm9yZGVyQ29sb3I6JyM2NjY2NjYnLFxyXG4gICAgZmlsbE9wYWNpdHk6MC42LFxyXG4gICAgYWN0aXZlQm9yZGVyQ29sb3I6JyNmMDQ4NjQnLFxyXG4gICAgYWN0aXZlRmlsbENvbG9yOicjZmFjYzE0JyxcclxuICAgIGFjdGl2ZUZpbGxPcGFjaXR5OjFcclxuICB9LG9wdHMuZXh0cmEubWFwKTtcclxuICB2YXIgY29vcmRzLCBwb2ludDtcclxuICB2YXIgZGF0YSA9IHNlcmllcztcclxuICB2YXIgYm91bmRzPSBnZXRCb3VuZGluZ0JveChkYXRhKTtcclxuICB2YXIgeFNjYWxlID0gb3B0cy53aWR0aCAvIE1hdGguYWJzKGJvdW5kcy54TWF4IC0gYm91bmRzLnhNaW4pO1xyXG4gIHZhciB5U2NhbGUgPSBvcHRzLmhlaWdodCAvIE1hdGguYWJzKGJvdW5kcy55TWF4IC0gYm91bmRzLnlNaW4pO1xyXG4gIHZhciBzY2FsZSA9IHhTY2FsZSA8IHlTY2FsZSA/IHhTY2FsZSA6IHlTY2FsZTtcclxuICB2YXIgeG9mZnNldD1vcHRzLndpZHRoLzItTWF0aC5hYnMoYm91bmRzLnhNYXggLSBib3VuZHMueE1pbikvMipzY2FsZTtcclxuICB2YXIgeW9mZnNldD1vcHRzLmhlaWdodC8yLU1hdGguYWJzKGJvdW5kcy55TWF4IC0gYm91bmRzLnlNaW4pLzIqc2NhbGU7XHJcbiAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBvcHRzLndpZHRoLCBvcHRzLmhlaWdodCk7XHJcbiAgY29udGV4dC5zZXRGaWxsU3R5bGUob3B0cy5iYWNrZ3JvdW5kfHwnI0ZGRkZGRicpO1xyXG4gIGNvbnRleHQucmVjdCgwLDAsb3B0cy53aWR0aCxvcHRzLmhlaWdodCk7XHJcbiAgY29udGV4dC5maWxsKCk7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgY29udGV4dC5zZXRMaW5lV2lkdGgobWFwT3B0aW9uLmJvcmRlcldpZHRoICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUobWFwT3B0aW9uLmJvcmRlckNvbG9yKTtcclxuICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGhleFRvUmdiKHNlcmllc1tpXS5jb2xvciwgbWFwT3B0aW9uLmZpbGxPcGFjaXR5KSk7XHJcbiAgICBpZiAob3B0cy50b29sdGlwKSB7XHJcbiAgICAgIGlmIChvcHRzLnRvb2x0aXAuaW5kZXggPT0gaSApIHtcclxuICAgICAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKG1hcE9wdGlvbi5hY3RpdmVCb3JkZXJDb2xvcik7XHJcbiAgICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaGV4VG9SZ2IobWFwT3B0aW9uLmFjdGl2ZUZpbGxDb2xvciwgbWFwT3B0aW9uLmFjdGl2ZUZpbGxPcGFjaXR5KSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHZhciBjb29yZGEgPSBkYXRhW2ldLmdlb21ldHJ5LmNvb3JkaW5hdGVzXHJcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IGNvb3JkYS5sZW5ndGg7IGsrKykge1xyXG4gICAgICBjb29yZHMgPSBjb29yZGFba107XHJcbiAgICAgIGlmIChjb29yZHMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICBjb29yZHMgPSBjb29yZHNbMF1cclxuICAgICAgfVxyXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNvb3Jkcy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgIHBvaW50ID0gY29vcmRpbmF0ZVRvUG9pbnQoY29vcmRzW2pdWzFdLCBjb29yZHNbal1bMF0sYm91bmRzLHNjYWxlLHhvZmZzZXQseW9mZnNldClcclxuICAgICAgICBpZiAoaiA9PT0gMCkge1xyXG4gICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgIGNvbnRleHQubW92ZVRvKHBvaW50LngsIHBvaW50LnkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyhwb2ludC54LCBwb2ludC55KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgIGlmKG1hcE9wdGlvbi5ib3JkZXIgPT0gdHJ1ZSl7XHJcbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYob3B0cy5kYXRhTGFiZWwgPT0gdHJ1ZSl7XHJcbiAgICAgIHZhciBjZW50ZXJQb2ludCA9IGRhdGFbaV0ucHJvcGVydGllcy5jZW50cm9pZDtcclxuICAgICAgaWYoY2VudGVyUG9pbnQpe1xyXG4gICAgICAgIHBvaW50ID0gY29vcmRpbmF0ZVRvUG9pbnQoY2VudGVyUG9pbnRbMV0sIGNlbnRlclBvaW50WzBdLGJvdW5kcyxzY2FsZSx4b2Zmc2V0LHlvZmZzZXQpO1xyXG4gICAgICAgIGxldCBmb250U2l6ZT1kYXRhW2ldLnRleHRTaXplfHxjb25maWcuZm9udFNpemU7XHJcbiAgICAgICAgbGV0IHRleHQ9ZGF0YVtpXS5wcm9wZXJ0aWVzLm5hbWU7XHJcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LnNldEZvbnRTaXplKGZvbnRTaXplKVxyXG4gICAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGRhdGFbaV0udGV4dENvbG9yfHwnIzY2NjY2NicpXHJcbiAgICAgICAgY29udGV4dC5maWxsVGV4dCh0ZXh0LCBwb2ludC54LW1lYXN1cmVUZXh0KHRleHQsZm9udFNpemUpLzIsIHBvaW50LnkrZm9udFNpemUvMik7XHJcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIG9wdHMuY2hhcnREYXRhLm1hcERhdGE9e1xyXG4gICAgYm91bmRzOmJvdW5kcyxcclxuICAgIHNjYWxlOnNjYWxlLFxyXG4gICAgeG9mZnNldDp4b2Zmc2V0LFxyXG4gICAgeW9mZnNldDp5b2Zmc2V0XHJcbiAgfVxyXG4gIGRyYXdUb29sVGlwQnJpZGdlKG9wdHMsIGNvbmZpZywgY29udGV4dCwxKTtcclxuICBjb250ZXh0LmRyYXcoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0V29yZENsb3VkUG9pbnQob3B0cyx0eXBlKXtcclxuICBsZXQgcG9pbnRzID0gb3B0cy5zZXJpZXMuc29ydChmdW5jdGlvbihhLGIpe3JldHVybiBwYXJzZUludChiLnRleHRTaXplKS1wYXJzZUludChhLnRleHRTaXplKTt9KTtcclxuICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgIGNhc2UgJ25vcm1hbCc6XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgbGV0IHRleHQgPSBwb2ludHNbaV0ubmFtZTtcclxuICAgICAgICBsZXQgdEhlaWdodCA9IHBvaW50c1tpXS50ZXh0U2l6ZTtcclxuICAgICAgICBsZXQgdFdpZHRoID0gbWVhc3VyZVRleHQodGV4dCx0SGVpZ2h0KTtcclxuICAgICAgICBsZXQgeCx5O1xyXG4gICAgICAgIGxldCBhcmVhO1xyXG4gICAgICAgIGxldCBicmVha251bT0wO1xyXG4gICAgICAgIHdoaWxlKHRydWUpIHtcclxuICAgICAgICAgICAgYnJlYWtudW0rKztcclxuICAgICAgICAgICAgeCA9IG5vcm1hbEludCgtb3B0cy53aWR0aC8yLCBvcHRzLndpZHRoLzIsNSkgLSB0V2lkdGgvMjtcclxuICAgICAgICAgICAgeSA9IG5vcm1hbEludCgtb3B0cy5oZWlnaHQvMiwgb3B0cy5oZWlnaHQvMiw1KSArIHRIZWlnaHQvMjtcclxuICAgICAgICAgICAgYXJlYT1beC01K29wdHMud2lkdGgvMix5LTUtdEhlaWdodCtvcHRzLmhlaWdodC8yLHgrdFdpZHRoKzUrb3B0cy53aWR0aC8yLHkrNStvcHRzLmhlaWdodC8yXTtcclxuICAgICAgICAgICAgbGV0IGlzQ29sbGlzaW9uID0gY29sbGlzaW9uTmV3KGFyZWEscG9pbnRzLG9wdHMud2lkdGgsb3B0cy5oZWlnaHQpO1xyXG4gICAgICAgICAgICBpZiAoIWlzQ29sbGlzaW9uKSBicmVhaztcclxuICAgICAgICAgICAgaWYgKGJyZWFrbnVtPT0xMDAwKXtcclxuICAgICAgICAgICAgICBhcmVhPVstMTAwLC0xMDAsLTEwMCwtMTAwXTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcG9pbnRzW2ldLmFyZWE9YXJlYTtcclxuICAgICAgfVxyXG4gICAgYnJlYWs7XHJcbiAgICBjYXNlICd2ZXJ0aWNhbCc6XHJcbiAgICAgIGZ1bmN0aW9uIFNwaW4oKXtcclxuICAgICAgICAvL+iOt+WPluWdh+WMgOmaj+acuuWAvO+8jOaYr+WQpuaXi+i9rO+8jOaXi+i9rOeahOamgueOh+S4uu+8iDEtMC4177yJXHJcbiAgICAgICAgaWYgKE1hdGgucmFuZG9tKCk+MC43KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1lbHNlIHtyZXR1cm4gZmFsc2V9O1xyXG4gICAgICB9O1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykgeyBcclxuICAgICAgICBsZXQgdGV4dCA9IHBvaW50c1tpXS5uYW1lO1xyXG4gICAgICAgIGxldCB0SGVpZ2h0ID0gcG9pbnRzW2ldLnRleHRTaXplO1xyXG4gICAgICAgIGxldCB0V2lkdGggPSBtZWFzdXJlVGV4dCh0ZXh0LHRIZWlnaHQpO1xyXG4gICAgICAgIGxldCBpc1NwaW4gPSBTcGluKCk7IFxyXG4gICAgICAgIGxldCB4LHksYXJlYSxhcmVhdjtcclxuICAgICAgICBsZXQgYnJlYWtudW09MDtcclxuICAgICAgICB3aGlsZSh0cnVlKSB7XHJcbiAgICAgICAgICBicmVha251bSsrO1xyXG4gICAgICAgICAgbGV0IGlzQ29sbGlzaW9uO1xyXG4gICAgICAgICAgaWYgKGlzU3Bpbikge1xyXG4gICAgICAgICAgICAgIHggPSBub3JtYWxJbnQoLW9wdHMud2lkdGgvMiwgb3B0cy53aWR0aC8yLDUpIC0gdFdpZHRoLzI7XHJcbiAgICAgICAgICAgICAgeSA9IG5vcm1hbEludCgtb3B0cy5oZWlnaHQvMiwgb3B0cy5oZWlnaHQvMiw1KSt0SGVpZ2h0LzI7XHJcbiAgICAgICAgICAgICAgYXJlYT1beS01LXRXaWR0aCtvcHRzLndpZHRoLzIsKC14LTUrb3B0cy5oZWlnaHQvMikseSs1K29wdHMud2lkdGgvMiwoLXgrdEhlaWdodCs1K29wdHMuaGVpZ2h0LzIpXTtcclxuICAgICAgICAgICAgICBhcmVhdj1bb3B0cy53aWR0aC0ob3B0cy53aWR0aC8yLW9wdHMuaGVpZ2h0LzIpLSgteCt0SGVpZ2h0KzUrb3B0cy5oZWlnaHQvMiktNSwob3B0cy5oZWlnaHQvMi1vcHRzLndpZHRoLzIpKyh5LTUtdFdpZHRoK29wdHMud2lkdGgvMiktNSxvcHRzLndpZHRoLShvcHRzLndpZHRoLzItb3B0cy5oZWlnaHQvMiktKC14K3RIZWlnaHQrNStvcHRzLmhlaWdodC8yKSt0SGVpZ2h0LChvcHRzLmhlaWdodC8yLW9wdHMud2lkdGgvMikrKHktNS10V2lkdGgrb3B0cy53aWR0aC8yKSt0V2lkdGgrNV07XHJcbiAgICAgICAgICAgICAgaXNDb2xsaXNpb24gPSBjb2xsaXNpb25OZXcoYXJlYXYscG9pbnRzLG9wdHMuaGVpZ2h0LG9wdHMud2lkdGgpO1xyXG4gICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHggPSBub3JtYWxJbnQoLW9wdHMud2lkdGgvMiwgb3B0cy53aWR0aC8yLDUpIC0gdFdpZHRoLzI7XHJcbiAgICAgICAgICAgIHkgPSBub3JtYWxJbnQoLW9wdHMuaGVpZ2h0LzIsIG9wdHMuaGVpZ2h0LzIsNSkrdEhlaWdodC8yO1xyXG4gICAgICAgICAgICBhcmVhPVt4LTUrb3B0cy53aWR0aC8yLHktNS10SGVpZ2h0K29wdHMuaGVpZ2h0LzIseCt0V2lkdGgrNStvcHRzLndpZHRoLzIseSs1K29wdHMuaGVpZ2h0LzJdO1xyXG4gICAgICAgICAgICBpc0NvbGxpc2lvbiA9IGNvbGxpc2lvbk5ldyhhcmVhLHBvaW50cyxvcHRzLndpZHRoLG9wdHMuaGVpZ2h0KTtcclxuICAgICAgICAgIH0gXHJcbiAgICAgICAgICBpZiAoIWlzQ29sbGlzaW9uKSBicmVhaztcclxuICAgICAgICAgIGlmIChicmVha251bT09MTAwMCl7XHJcbiAgICAgICAgICAgIGFyZWE9Wy0xMDAwLC0xMDAwLC0xMDAwLC0xMDAwXTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoaXNTcGluKSB7XHJcbiAgICAgICAgICBwb2ludHNbaV0uYXJlYT1hcmVhdjtcclxuICAgICAgICAgIHBvaW50c1tpXS5hcmVhdj1hcmVhO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgcG9pbnRzW2ldLmFyZWE9YXJlYTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcG9pbnRzW2ldLnJvdGF0ZT1pc1NwaW47XHJcbiAgICAgIH07XHJcbiAgICBicmVhaztcclxuICB9XHJcbiAgcmV0dXJuIHBvaW50cztcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGRyYXdXb3JkQ2xvdWREYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcbiAgbGV0IHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IDE7XHJcbiAgbGV0IHdvcmRPcHRpb24gPSBhc3NpZ24oe30se1xyXG4gICAgdHlwZTogJ25vcm1hbCcsXHJcbiAgICBhdXRvQ29sb3JzOiB0cnVlXHJcbiAgfSxvcHRzLmV4dHJhLndvcmQpO1xyXG4gIFxyXG4gIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgY29udGV4dC5zZXRGaWxsU3R5bGUob3B0cy5iYWNrZ3JvdW5kfHwnI0ZGRkZGRicpO1xyXG4gIGNvbnRleHQucmVjdCgwLDAsb3B0cy53aWR0aCxvcHRzLmhlaWdodCk7XHJcbiAgY29udGV4dC5maWxsKCk7XHJcbiAgY29udGV4dC5zYXZlKCk7XHJcbiAgbGV0IHBvaW50cyA9IG9wdHMuY2hhcnREYXRhLndvcmRDbG91ZERhdGE7XHJcbiAgY29udGV4dC50cmFuc2xhdGUob3B0cy53aWR0aC8yLG9wdHMuaGVpZ2h0LzIpO1xyXG4gIFxyXG4gIGZvcihsZXQgaT0wO2k8cG9pbnRzLmxlbmd0aDtpKyspe1xyXG4gICAgICBjb250ZXh0LnNhdmUoKTtcclxuICAgICAgaWYocG9pbnRzW2ldLnJvdGF0ZSl7XHJcbiAgICAgICAgY29udGV4dC5yb3RhdGUoOTAgKiBNYXRoLlBJIC8gMTgwKTtcclxuICAgICAgfVxyXG4gICAgICBsZXQgdGV4dCA9IHBvaW50c1tpXS5uYW1lO1xyXG4gICAgICBsZXQgdEhlaWdodCA9IHBvaW50c1tpXS50ZXh0U2l6ZTtcclxuICAgICAgbGV0IHRXaWR0aCA9IG1lYXN1cmVUZXh0KHRleHQsdEhlaWdodCk7XHJcbiAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUocG9pbnRzW2ldLmNvbG9yKTtcclxuICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUocG9pbnRzW2ldLmNvbG9yKTtcclxuICAgICAgY29udGV4dC5zZXRGb250U2l6ZSh0SGVpZ2h0KTtcclxuICAgICAgaWYocG9pbnRzW2ldLnJvdGF0ZSl7XHJcbiAgICAgICAgaWYocG9pbnRzW2ldLmFyZWF2WzBdPjApe1xyXG4gICAgICAgICAgaWYgKG9wdHMudG9vbHRpcCkge1xyXG4gICAgICAgICAgICBpZiAob3B0cy50b29sdGlwLmluZGV4ID09IGkpIHtcclxuICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZVRleHQodGV4dCwocG9pbnRzW2ldLmFyZWF2WzBdKzUtb3B0cy53aWR0aC8yKSpwcm9jZXNzLXRXaWR0aCooMS1wcm9jZXNzKS8yLChwb2ludHNbaV0uYXJlYXZbMV0rNSt0SGVpZ2h0LW9wdHMuaGVpZ2h0LzIpKnByb2Nlc3MpO1xyXG4gICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5maWxsVGV4dCh0ZXh0LChwb2ludHNbaV0uYXJlYXZbMF0rNS1vcHRzLndpZHRoLzIpKnByb2Nlc3MtdFdpZHRoKigxLXByb2Nlc3MpLzIsKHBvaW50c1tpXS5hcmVhdlsxXSs1K3RIZWlnaHQtb3B0cy5oZWlnaHQvMikqcHJvY2Vzcyk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFRleHQodGV4dCwocG9pbnRzW2ldLmFyZWF2WzBdKzUtb3B0cy53aWR0aC8yKSpwcm9jZXNzLXRXaWR0aCooMS1wcm9jZXNzKS8yLChwb2ludHNbaV0uYXJlYXZbMV0rNSt0SGVpZ2h0LW9wdHMuaGVpZ2h0LzIpKnByb2Nlc3MpO1xyXG4gICAgICAgICAgfSBcclxuICAgICAgICB9XHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIGlmKHBvaW50c1tpXS5hcmVhWzBdPjApe1xyXG4gICAgICAgICAgaWYgKG9wdHMudG9vbHRpcCkge1xyXG4gICAgICAgICAgICBpZiAob3B0cy50b29sdGlwLmluZGV4ID09IGkpIHtcclxuICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZVRleHQodGV4dCwocG9pbnRzW2ldLmFyZWFbMF0rNS1vcHRzLndpZHRoLzIpKnByb2Nlc3MtdFdpZHRoKigxLXByb2Nlc3MpLzIsKHBvaW50c1tpXS5hcmVhWzFdKzUrdEhlaWdodC1vcHRzLmhlaWdodC8yKSpwcm9jZXNzKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgY29udGV4dC5maWxsVGV4dCh0ZXh0LChwb2ludHNbaV0uYXJlYVswXSs1LW9wdHMud2lkdGgvMikqcHJvY2Vzcy10V2lkdGgqKDEtcHJvY2VzcykvMiwocG9pbnRzW2ldLmFyZWFbMV0rNSt0SGVpZ2h0LW9wdHMuaGVpZ2h0LzIpKnByb2Nlc3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgY29udGV4dC5maWxsVGV4dCh0ZXh0LChwb2ludHNbaV0uYXJlYVswXSs1LW9wdHMud2lkdGgvMikqcHJvY2Vzcy10V2lkdGgqKDEtcHJvY2VzcykvMiwocG9pbnRzW2ldLmFyZWFbMV0rNSt0SGVpZ2h0LW9wdHMuaGVpZ2h0LzIpKnByb2Nlc3MpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gIH1cclxuICBjb250ZXh0LnJlc3RvcmUoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0Z1bm5lbERhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcclxuICBsZXQgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogMTtcclxuICBsZXQgZnVubmVsT3B0aW9uID0gYXNzaWduKHt9LHtcclxuICAgIGFjdGl2ZVdpZHRoOjEwLFxyXG4gICAgYWN0aXZlT3BhY2l0eTowLjMsXHJcbiAgICBib3JkZXI6ZmFsc2UsXHJcbiAgICBib3JkZXJXaWR0aDoyLFxyXG4gICAgYm9yZGVyQ29sb3I6JyNGRkZGRkYnLFxyXG4gICAgZmlsbE9wYWNpdHk6MSxcclxuICAgIGxhYmVsQWxpZ246J3JpZ2h0J1xyXG4gIH0sb3B0cy5leHRyYS5mdW5uZWwpO1xyXG4gIGxldCBlYWNoU3BhY2luZyA9IChvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVswXSAtIG9wdHMuYXJlYVsyXSkvc2VyaWVzLmxlbmd0aDtcclxuICBsZXQgY2VudGVyUG9zaXRpb24gPSB7XHJcbiAgICB4OiBvcHRzLmFyZWFbM10gKyAob3B0cy53aWR0aCAtIG9wdHMuYXJlYVsxXSAtIG9wdHMuYXJlYVszXSkgLyAyLFxyXG4gICAgeTogb3B0cy5oZWlnaHQtb3B0cy5hcmVhWzJdXHJcbiAgfTtcclxuICBsZXQgYWN0aXZlV2lkdGggPSBmdW5uZWxPcHRpb24uYWN0aXZlV2lkdGg7XHJcbiAgbGV0IHJhZGl1cyA9IE1hdGgubWluKChvcHRzLndpZHRoIC0gb3B0cy5hcmVhWzFdIC0gb3B0cy5hcmVhWzNdKSAvIDIgLSBhY3RpdmVXaWR0aCwgKG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzBdIC0gb3B0cy5hcmVhWzJdKSAvIDIgLSBhY3RpdmVXaWR0aCk7XHJcbiAgc2VyaWVzID0gZ2V0RnVubmVsRGF0YVBvaW50cyhzZXJpZXMsIHJhZGl1cywgcHJvY2Vzcyk7XHJcbiAgY29udGV4dC5zYXZlKCk7XHJcbiAgY29udGV4dC50cmFuc2xhdGUoY2VudGVyUG9zaXRpb24ueCxjZW50ZXJQb3NpdGlvbi55KTtcclxuICBmb3IobGV0IGk9MDtpPHNlcmllcy5sZW5ndGg7aSsrKXtcclxuICAgIGlmKGk9PTApe1xyXG4gICAgICBpZiAob3B0cy50b29sdGlwKSB7XHJcbiAgICAgICAgaWYgKG9wdHMudG9vbHRpcC5pbmRleCA9PSBpKSB7XHJcbiAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaGV4VG9SZ2Ioc2VyaWVzW2ldLmNvbG9yLCBmdW5uZWxPcHRpb24uYWN0aXZlT3BhY2l0eSkpO1xyXG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8oLWFjdGl2ZVdpZHRoLCAwKTtcclxuICAgICAgICAgIGNvbnRleHQubGluZVRvKC1zZXJpZXNbaV0ucmFkaXVzLWFjdGl2ZVdpZHRoLCAtZWFjaFNwYWNpbmcpO1xyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8oc2VyaWVzW2ldLnJhZGl1cythY3RpdmVXaWR0aCwgLWVhY2hTcGFjaW5nKTtcclxuICAgICAgICAgIGNvbnRleHQubGluZVRvKGFjdGl2ZVdpZHRoLCAwKTtcclxuICAgICAgICAgIGNvbnRleHQubGluZVRvKC1hY3RpdmVXaWR0aCwgMCk7XHJcbiAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHNlcmllc1tpXS5mdW5uZWxBcmVhPVtjZW50ZXJQb3NpdGlvbi54LXNlcmllc1tpXS5yYWRpdXMsY2VudGVyUG9zaXRpb24ueS1lYWNoU3BhY2luZyxjZW50ZXJQb3NpdGlvbi54K3Nlcmllc1tpXS5yYWRpdXMsY2VudGVyUG9zaXRpb24ueV07XHJcbiAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKGZ1bm5lbE9wdGlvbi5ib3JkZXJXaWR0aCAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoZnVubmVsT3B0aW9uLmJvcmRlckNvbG9yKTtcclxuICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaGV4VG9SZ2Ioc2VyaWVzW2ldLmNvbG9yLCBmdW5uZWxPcHRpb24uZmlsbE9wYWNpdHkpKTtcclxuICAgICAgY29udGV4dC5tb3ZlVG8oMCwgMCk7XHJcbiAgICAgIGNvbnRleHQubGluZVRvKC1zZXJpZXNbaV0ucmFkaXVzLCAtZWFjaFNwYWNpbmcpO1xyXG4gICAgICBjb250ZXh0LmxpbmVUbyhzZXJpZXNbaV0ucmFkaXVzLCAtZWFjaFNwYWNpbmcpO1xyXG4gICAgICBjb250ZXh0LmxpbmVUbygwLCAwKTtcclxuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgIGlmKGZ1bm5lbE9wdGlvbi5ib3JkZXIgPT0gdHJ1ZSl7XHJcbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgfVxyXG4gICAgfWVsc2V7XHJcbiAgICAgIGlmIChvcHRzLnRvb2x0aXApIHtcclxuICAgICAgICBpZiAob3B0cy50b29sdGlwLmluZGV4ID09IGkpIHtcclxuICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShoZXhUb1JnYihzZXJpZXNbaV0uY29sb3IsIGZ1bm5lbE9wdGlvbi5hY3RpdmVPcGFjaXR5KSk7XHJcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbygwLCAwKTtcclxuICAgICAgICAgIGNvbnRleHQubGluZVRvKC1zZXJpZXNbaS0xXS5yYWRpdXMtYWN0aXZlV2lkdGgsIDApO1xyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8oLXNlcmllc1tpXS5yYWRpdXMtYWN0aXZlV2lkdGgsIC1lYWNoU3BhY2luZyk7XHJcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyhzZXJpZXNbaV0ucmFkaXVzK2FjdGl2ZVdpZHRoLCAtZWFjaFNwYWNpbmcpO1xyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8oc2VyaWVzW2ktMV0ucmFkaXVzK2FjdGl2ZVdpZHRoLCAwKTtcclxuICAgICAgICAgIGNvbnRleHQubGluZVRvKDAsIDApO1xyXG4gICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBzZXJpZXNbaV0uZnVubmVsQXJlYT1bY2VudGVyUG9zaXRpb24ueC1zZXJpZXNbaV0ucmFkaXVzLGNlbnRlclBvc2l0aW9uLnktZWFjaFNwYWNpbmcqKGkrMSksY2VudGVyUG9zaXRpb24ueCtzZXJpZXNbaV0ucmFkaXVzLGNlbnRlclBvc2l0aW9uLnktZWFjaFNwYWNpbmcqaV07XHJcbiAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKGZ1bm5lbE9wdGlvbi5ib3JkZXJXaWR0aCAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoZnVubmVsT3B0aW9uLmJvcmRlckNvbG9yKTtcclxuICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaGV4VG9SZ2Ioc2VyaWVzW2ldLmNvbG9yLCBmdW5uZWxPcHRpb24uZmlsbE9wYWNpdHkpKTtcclxuICAgICAgY29udGV4dC5tb3ZlVG8oMCwgMCk7XHJcbiAgICAgIGNvbnRleHQubGluZVRvKC1zZXJpZXNbaS0xXS5yYWRpdXMsIDApO1xyXG4gICAgICBjb250ZXh0LmxpbmVUbygtc2VyaWVzW2ldLnJhZGl1cywgLWVhY2hTcGFjaW5nKTtcclxuICAgICAgY29udGV4dC5saW5lVG8oc2VyaWVzW2ldLnJhZGl1cywgLWVhY2hTcGFjaW5nKTtcclxuICAgICAgY29udGV4dC5saW5lVG8oc2VyaWVzW2ktMV0ucmFkaXVzLCAwKTtcclxuICAgICAgY29udGV4dC5saW5lVG8oMCwgMCk7XHJcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gICAgICBpZihmdW5uZWxPcHRpb24uYm9yZGVyID09IHRydWUpe1xyXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnRleHQudHJhbnNsYXRlKDAsLWVhY2hTcGFjaW5nKVxyXG4gIH1cclxuICBjb250ZXh0LnJlc3RvcmUoKTtcclxuICBcclxuICBpZiAob3B0cy5kYXRhTGFiZWwgIT09IGZhbHNlICYmIHByb2Nlc3MgPT09IDEpIHtcclxuICAgIGRyYXdGdW5uZWxUZXh0KHNlcmllcywgb3B0cywgY29udGV4dCwgZWFjaFNwYWNpbmcsIGZ1bm5lbE9wdGlvbi5sYWJlbEFsaWduLCBhY3RpdmVXaWR0aCwgY2VudGVyUG9zaXRpb24pO1xyXG4gIH1cclxuICBcclxuICByZXR1cm4ge1xyXG4gICAgY2VudGVyOiBjZW50ZXJQb3NpdGlvbixcclxuICAgIHJhZGl1czogcmFkaXVzLFxyXG4gICAgc2VyaWVzOiBzZXJpZXNcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3RnVubmVsVGV4dChzZXJpZXMsIG9wdHMsIGNvbnRleHQsIGVhY2hTcGFjaW5nLCBsYWJlbEFsaWduLGFjdGl2ZVdpZHRoLCBjZW50ZXJQb3NpdGlvbil7XHJcbiAgZm9yKGxldCBpPTA7aTxzZXJpZXMubGVuZ3RoO2krKyl7XHJcbiAgICBsZXQgaXRlbSA9IHNlcmllc1tpXTtcclxuICAgIGxldCBzdGFydFgsZW5kWCxzdGFydFksZm9udFNpemU7XHJcbiAgICBsZXQgdGV4dCA9IGl0ZW0uZm9ybWF0ID8gaXRlbS5mb3JtYXQoK2l0ZW0uX3Byb3BvcnRpb25fLnRvRml4ZWQoMikpIDogdXRpbC50b0ZpeGVkKGl0ZW0uX3Byb3BvcnRpb25fICogMTAwKSArJyUnO1xyXG4gICAgaWYobGFiZWxBbGlnbiA9PSAncmlnaHQnKXtcclxuICAgICAgaWYoaT09MCl7XHJcbiAgICAgICAgc3RhcnRYPShpdGVtLmZ1bm5lbEFyZWFbMl0rY2VudGVyUG9zaXRpb24ueCkvMjtcclxuICAgICAgfWVsc2V7XHJcbiAgICAgICAgc3RhcnRYPShpdGVtLmZ1bm5lbEFyZWFbMl0rc2VyaWVzW2ktMV0uZnVubmVsQXJlYVsyXSkvMjtcclxuICAgICAgfVxyXG4gICAgICBlbmRYPXN0YXJ0WCthY3RpdmVXaWR0aCoyO1xyXG4gICAgICBzdGFydFk9aXRlbS5mdW5uZWxBcmVhWzFdK2VhY2hTcGFjaW5nLzI7XHJcbiAgICAgIGZvbnRTaXplID0gaXRlbS50ZXh0U2l6ZSB8fCBvcHRzLmZvbnRTaXplO1xyXG4gICAgICBjb250ZXh0LnNldExpbmVXaWR0aCgxICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShpdGVtLmNvbG9yKTtcclxuICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaXRlbS5jb2xvcik7XHJcbiAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgIGNvbnRleHQubW92ZVRvKHN0YXJ0WCxzdGFydFkgKTtcclxuICAgICAgY29udGV4dC5saW5lVG8oZW5kWCxzdGFydFkpO1xyXG4gICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjb250ZXh0Lm1vdmVUbyhlbmRYLCBzdGFydFkpO1xyXG4gICAgICBjb250ZXh0LmFyYyhlbmRYLCBzdGFydFksIDIsIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgIGNvbnRleHQuc2V0Rm9udFNpemUoZm9udFNpemUpO1xyXG4gICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShpdGVtLnRleHRDb2xvciB8fCAnIzY2NjY2NicpO1xyXG4gICAgICBjb250ZXh0LmZpbGxUZXh0KHRleHQsIGVuZFgrNSwgc3RhcnRZICsgZm9udFNpemUvMiAtMik7XHJcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICB9ZWxzZXtcclxuICAgICAgaWYoaT09MCl7XHJcbiAgICAgICAgc3RhcnRYPShpdGVtLmZ1bm5lbEFyZWFbMF0rY2VudGVyUG9zaXRpb24ueCkvMjtcclxuICAgICAgfWVsc2V7XHJcbiAgICAgICAgc3RhcnRYPShpdGVtLmZ1bm5lbEFyZWFbMF0rc2VyaWVzW2ktMV0uZnVubmVsQXJlYVswXSkvMjtcclxuICAgICAgfVxyXG4gICAgICBlbmRYPXN0YXJ0WC1hY3RpdmVXaWR0aCoyO1xyXG4gICAgICBzdGFydFk9aXRlbS5mdW5uZWxBcmVhWzFdK2VhY2hTcGFjaW5nLzI7XHJcbiAgICAgIGZvbnRTaXplID0gaXRlbS50ZXh0U2l6ZSB8fCBvcHRzLmZvbnRTaXplO1xyXG4gICAgICBjb250ZXh0LnNldExpbmVXaWR0aCgxICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShpdGVtLmNvbG9yKTtcclxuICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaXRlbS5jb2xvcik7XHJcbiAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgIGNvbnRleHQubW92ZVRvKHN0YXJ0WCxzdGFydFkgKTtcclxuICAgICAgY29udGV4dC5saW5lVG8oZW5kWCxzdGFydFkpO1xyXG4gICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjb250ZXh0Lm1vdmVUbyhlbmRYLCBzdGFydFkpO1xyXG4gICAgICBjb250ZXh0LmFyYyhlbmRYLCBzdGFydFksIDIsIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgIGNvbnRleHQuc2V0Rm9udFNpemUoZm9udFNpemUpO1xyXG4gICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShpdGVtLnRleHRDb2xvciB8fCAnIzY2NjY2NicpO1xyXG4gICAgICBjb250ZXh0LmZpbGxUZXh0KHRleHQsIGVuZFgtNS1tZWFzdXJlVGV4dCh0ZXh0KSwgc3RhcnRZICsgZm9udFNpemUvMiAtMik7XHJcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICB9XHJcbiAgICBcclxuICB9XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBkcmF3Q2FudmFzKG9wdHMsIGNvbnRleHQpIHtcclxuICBjb250ZXh0LmRyYXcoKTtcclxufVxyXG5cclxudmFyIFRpbWluZyA9IHtcclxuICBlYXNlSW46IGZ1bmN0aW9uIGVhc2VJbihwb3MpIHtcclxuICAgIHJldHVybiBNYXRoLnBvdyhwb3MsIDMpO1xyXG4gIH0sXHJcbiAgZWFzZU91dDogZnVuY3Rpb24gZWFzZU91dChwb3MpIHtcclxuICAgIHJldHVybiBNYXRoLnBvdyhwb3MgLSAxLCAzKSArIDE7XHJcbiAgfSxcclxuICBlYXNlSW5PdXQ6IGZ1bmN0aW9uIGVhc2VJbk91dChwb3MpIHtcclxuICAgIGlmICgocG9zIC89IDAuNSkgPCAxKSB7XHJcbiAgICAgIHJldHVybiAwLjUgKiBNYXRoLnBvdyhwb3MsIDMpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIDAuNSAqIChNYXRoLnBvdyhwb3MgLSAyLCAzKSArIDIpO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgbGluZWFyOiBmdW5jdGlvbiBsaW5lYXIocG9zKSB7XHJcbiAgICByZXR1cm4gcG9zO1xyXG4gIH1cclxufTtcclxuXHJcbmZ1bmN0aW9uIEFuaW1hdGlvbihvcHRzKSB7XHJcbiAgdGhpcy5pc1N0b3AgPSBmYWxzZTtcclxuICBvcHRzLmR1cmF0aW9uID0gdHlwZW9mIG9wdHMuZHVyYXRpb24gPT09ICd1bmRlZmluZWQnID8gMTAwMCA6IG9wdHMuZHVyYXRpb247XHJcbiAgb3B0cy50aW1pbmcgPSBvcHRzLnRpbWluZyB8fCAnbGluZWFyJztcclxuICB2YXIgZGVsYXkgPSAxNztcclxuXHJcbiAgZnVuY3Rpb24gY3JlYXRlQW5pbWF0aW9uRnJhbWUoKSB7XHJcbiAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdGVwLCBkZWxheSkge1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICB2YXIgdGltZVN0YW1wID0gK25ldyBEYXRlKCk7XHJcbiAgICAgICAgICBzdGVwKHRpbWVTdGFtcCk7XHJcbiAgICAgICAgfSwgZGVsYXkpO1xyXG4gICAgICB9O1xyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0ZXApIHtcclxuICAgICAgICBzdGVwKG51bGwpO1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH07XHJcbiAgdmFyIGFuaW1hdGlvbkZyYW1lID0gY3JlYXRlQW5pbWF0aW9uRnJhbWUoKTtcclxuICB2YXIgc3RhcnRUaW1lU3RhbXAgPSBudWxsO1xyXG4gIHZhciBfc3RlcCA9IGZ1bmN0aW9uIHN0ZXAodGltZXN0YW1wKSB7XHJcbiAgICBpZiAodGltZXN0YW1wID09PSBudWxsIHx8IHRoaXMuaXNTdG9wID09PSB0cnVlKSB7XHJcbiAgICAgIG9wdHMub25Qcm9jZXNzICYmIG9wdHMub25Qcm9jZXNzKDEpO1xyXG4gICAgICBvcHRzLm9uQW5pbWF0aW9uRmluaXNoICYmIG9wdHMub25BbmltYXRpb25GaW5pc2goKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHN0YXJ0VGltZVN0YW1wID09PSBudWxsKSB7XHJcbiAgICAgIHN0YXJ0VGltZVN0YW1wID0gdGltZXN0YW1wO1xyXG4gICAgfVxyXG4gICAgaWYgKHRpbWVzdGFtcCAtIHN0YXJ0VGltZVN0YW1wIDwgb3B0cy5kdXJhdGlvbikge1xyXG4gICAgICB2YXIgcHJvY2VzcyA9ICh0aW1lc3RhbXAgLSBzdGFydFRpbWVTdGFtcCkgLyBvcHRzLmR1cmF0aW9uO1xyXG4gICAgICB2YXIgdGltaW5nRnVuY3Rpb24gPSBUaW1pbmdbb3B0cy50aW1pbmddO1xyXG4gICAgICBwcm9jZXNzID0gdGltaW5nRnVuY3Rpb24ocHJvY2Vzcyk7XHJcblxyXG4gICAgICBvcHRzLm9uUHJvY2VzcyAmJiBvcHRzLm9uUHJvY2Vzcyhwcm9jZXNzKTtcclxuICAgICAgYW5pbWF0aW9uRnJhbWUoX3N0ZXAsIGRlbGF5KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG9wdHMub25Qcm9jZXNzICYmIG9wdHMub25Qcm9jZXNzKDEpO1xyXG4gICAgICBvcHRzLm9uQW5pbWF0aW9uRmluaXNoICYmIG9wdHMub25BbmltYXRpb25GaW5pc2goKTtcclxuICAgIH1cclxuICB9O1xyXG4gIF9zdGVwID0gX3N0ZXAuYmluZCh0aGlzKTtcclxuICBhbmltYXRpb25GcmFtZShfc3RlcCwgZGVsYXkpO1xyXG59XHJcblxyXG4vLyBzdG9wIGFuaW1hdGlvbiBpbW1lZGlhdGVseVxyXG4vLyBhbmQgdGlnZ2VyIG9uQW5pbWF0aW9uRmluaXNoXHJcbkFuaW1hdGlvbi5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuaXNTdG9wID0gdHJ1ZTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIGRyYXdDaGFydHModHlwZSwgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcbiAgdmFyIF90aGlzID0gdGhpcztcclxuICB2YXIgc2VyaWVzID0gb3B0cy5zZXJpZXM7XHJcbiAgdmFyIGNhdGVnb3JpZXMgPSBvcHRzLmNhdGVnb3JpZXM7XHJcbiAgc2VyaWVzID0gZmlsbFNlcmllcyhzZXJpZXMsIG9wdHMsIGNvbmZpZyk7XHJcbiAgdmFyIGR1cmF0aW9uID0gb3B0cy5hbmltYXRpb24gPyBvcHRzLmR1cmF0aW9uIDogMDtcclxuICBfdGhpcy5hbmltYXRpb25JbnN0YW5jZSAmJiBfdGhpcy5hbmltYXRpb25JbnN0YW5jZS5zdG9wKCk7XHJcbiAgdmFyIHNlcmllc01BID0gbnVsbDtcclxuICBpZiAodHlwZSA9PSAnY2FuZGxlJykge1xyXG4gICAgbGV0IGF2ZXJhZ2UgPSBhc3NpZ24oe30sIG9wdHMuZXh0cmEuY2FuZGxlLmF2ZXJhZ2UpO1xyXG4gICAgaWYgKGF2ZXJhZ2Uuc2hvdykge1xyXG4gICAgICBzZXJpZXNNQSA9IGNhbENhbmRsZU1BKGF2ZXJhZ2UuZGF5LCBhdmVyYWdlLm5hbWUsIGF2ZXJhZ2UuY29sb3IsIHNlcmllc1swXS5kYXRhKTtcclxuICAgICAgc2VyaWVzTUEgPSBmaWxsU2VyaWVzKHNlcmllc01BLCBvcHRzLCBjb25maWcpO1xyXG4gICAgICBvcHRzLnNlcmllc01BID0gc2VyaWVzTUE7XHJcbiAgICB9IGVsc2UgaWYgKG9wdHMuc2VyaWVzTUEpIHtcclxuICAgICAgc2VyaWVzTUEgPSBvcHRzLnNlcmllc01BID0gZmlsbFNlcmllcyhvcHRzLnNlcmllc01BLCBvcHRzLCBjb25maWcpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc2VyaWVzTUEgPSBzZXJpZXM7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIHNlcmllc01BID0gc2VyaWVzO1xyXG4gIH1cclxuXHJcbiAgLyog6L+H5ruk5o6Jc2hvdz1mYWxzZeeahHNlcmllcyAqL1xyXG4gIG9wdHMuX3Nlcmllc18gPSBzZXJpZXMgPSBmaWx0ZXJTZXJpZXMoc2VyaWVzKTtcclxuXHJcbiAgLy/ph43mlrDorqHnrpflm77ooajljLrln59cclxuXHJcbiAgb3B0cy5hcmVhID0gbmV3IEFycmF5KDQpO1xyXG4gIC8v5aSN5L2N57uY5Zu+5Yy65Z+fXHJcbiAgZm9yIChsZXQgaiA9IDA7IGogPCA0OyBqKyspIHtcclxuICAgIG9wdHMuYXJlYVtqXSA9IG9wdHMucGFkZGluZ1tqXTtcclxuICB9XHJcblxyXG4gIC8v6YCa6L+H6K6h566X5LiJ5aSn5Yy65Z+f77ya5Zu+5L6L44CBWOi9tOOAgVnovbTnmoTlpKflsI/vvIznoa7lrprnu5jlm77ljLrln59cclxuICB2YXIgX2NhbExlZ2VuZERhdGEgPSBjYWxMZWdlbmREYXRhKHNlcmllc01BLCBvcHRzLCBjb25maWcsIG9wdHMuY2hhcnREYXRhKSxcclxuICAgIGxlZ2VuZEhlaWdodCA9IF9jYWxMZWdlbmREYXRhLmFyZWEud2hvbGVIZWlnaHQsXHJcbiAgICBsZWdlbmRXaWR0aCA9IF9jYWxMZWdlbmREYXRhLmFyZWEud2hvbGVXaWR0aDtcclxuICAgIFxyXG4gIHN3aXRjaCAob3B0cy5sZWdlbmQucG9zaXRpb24pIHtcclxuICAgIGNhc2UgJ3RvcCc6XHJcbiAgICAgIG9wdHMuYXJlYVswXSArPSBsZWdlbmRIZWlnaHQ7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnYm90dG9tJzpcclxuICAgICAgb3B0cy5hcmVhWzJdICs9IGxlZ2VuZEhlaWdodDtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdsZWZ0JzpcclxuICAgICAgb3B0cy5hcmVhWzNdICs9IGxlZ2VuZFdpZHRoO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ3JpZ2h0JzpcclxuICAgICAgb3B0cy5hcmVhWzFdICs9IGxlZ2VuZFdpZHRoO1xyXG4gICAgICBicmVhaztcclxuICB9XHJcblxyXG4gIGxldCBfY2FsWUF4aXNEYXRhID0ge30seUF4aXNXaWR0aCA9IDA7XHJcbiAgaWYgKG9wdHMudHlwZSA9PT0gJ2xpbmUnIHx8IG9wdHMudHlwZSA9PT0gJ2NvbHVtbicgfHwgb3B0cy50eXBlID09PSAnYXJlYScgfHwgb3B0cy50eXBlID09PSAnbWl4JyB8fCBvcHRzLnR5cGUgPT09ICdjYW5kbGUnKSB7XHJcbiAgICBfY2FsWUF4aXNEYXRhID0gY2FsWUF4aXNEYXRhKHNlcmllcywgb3B0cywgY29uZmlnKTtcclxuICAgIHlBeGlzV2lkdGggPSBfY2FsWUF4aXNEYXRhLnlBeGlzV2lkdGg7XHJcbiAgICAvL+WmguaenOaYvuekulnovbTmoIfpophcclxuICAgIGlmKG9wdHMueUF4aXMuc2hvd1RpdGxlKXtcclxuICAgICAgbGV0IG1heFRpdGxlSGVpZ2h0PTA7XHJcbiAgICAgIGZvcihsZXQgaT0wO2k8b3B0cy55QXhpcy5kYXRhLmxlbmd0aDtpKyspe1xyXG4gICAgICAgIG1heFRpdGxlSGVpZ2h0ID0gTWF0aC5tYXgobWF4VGl0bGVIZWlnaHQsb3B0cy55QXhpcy5kYXRhW2ldLnRpdGxlRm9udFNpemU/b3B0cy55QXhpcy5kYXRhW2ldLnRpdGxlRm9udFNpemU6Y29uZmlnLmZvbnRTaXplKVxyXG4gICAgICB9XHJcbiAgICAgIG9wdHMuYXJlYVswXSArPSAobWF4VGl0bGVIZWlnaHQrNikqb3B0cy5waXhlbFJhdGlvO1xyXG4gICAgfVxyXG4gICAgbGV0IHJpZ2h0SW5kZXg9MCxsZWZ0SW5kZXg9MDtcclxuICAgIC8v6K6h566X5Li757uY5Zu+5Yy65Z+f5bem5Y+z5L2N572uXHJcbiAgICBmb3IobGV0IGk9MDtpPHlBeGlzV2lkdGgubGVuZ3RoO2krKyl7XHJcbiAgICAgIGlmKHlBeGlzV2lkdGhbaV0ucG9zaXRpb249PSdsZWZ0Jyl7XHJcbiAgICAgICAgaWYobGVmdEluZGV4PjApe1xyXG4gICAgICAgICAgb3B0cy5hcmVhWzNdICs9IHlBeGlzV2lkdGhbaV0ud2lkdGggKyBvcHRzLnlBeGlzLnBhZGRpbmc7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBvcHRzLmFyZWFbM10gKz0geUF4aXNXaWR0aFtpXS53aWR0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGVmdEluZGV4ICs9MTtcclxuICAgICAgfWVsc2V7XHJcbiAgICAgICAgaWYocmlnaHRJbmRleD4wKXtcclxuICAgICAgICAgIG9wdHMuYXJlYVsxXSArPSB5QXhpc1dpZHRoW2ldLndpZHRoICsgb3B0cy55QXhpcy5wYWRkaW5nO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgb3B0cy5hcmVhWzFdICs9IHlBeGlzV2lkdGhbaV0ud2lkdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJpZ2h0SW5kZXggKz0xO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfWVsc2V7XHJcbiAgICBjb25maWcueUF4aXNXaWR0aCA9IHlBeGlzV2lkdGg7XHJcbiAgfVxyXG4gIG9wdHMuY2hhcnREYXRhLnlBeGlzRGF0YSA9IF9jYWxZQXhpc0RhdGE7XHJcblxyXG4gIGlmIChvcHRzLmNhdGVnb3JpZXMgJiYgb3B0cy5jYXRlZ29yaWVzLmxlbmd0aCkge1xyXG4gICAgb3B0cy5jaGFydERhdGEueEF4aXNEYXRhID0gZ2V0WEF4aXNQb2ludHMob3B0cy5jYXRlZ29yaWVzLCBvcHRzLCBjb25maWcpO1xyXG4gICAgbGV0IF9jYWxDYXRlZ29yaWVzRGF0YSA9IGNhbENhdGVnb3JpZXNEYXRhKG9wdHMuY2F0ZWdvcmllcywgb3B0cywgY29uZmlnLCBvcHRzLmNoYXJ0RGF0YS54QXhpc0RhdGEuZWFjaFNwYWNpbmcpLFxyXG4gICAgICB4QXhpc0hlaWdodCA9IF9jYWxDYXRlZ29yaWVzRGF0YS54QXhpc0hlaWdodCxcclxuICAgICAgYW5nbGUgPSBfY2FsQ2F0ZWdvcmllc0RhdGEuYW5nbGU7XHJcbiAgICBjb25maWcueEF4aXNIZWlnaHQgPSB4QXhpc0hlaWdodDtcclxuICAgIGNvbmZpZy5feEF4aXNUZXh0QW5nbGVfID0gYW5nbGU7XHJcbiAgICBvcHRzLmFyZWFbMl0gKz0geEF4aXNIZWlnaHQ7XHJcbiAgICBvcHRzLmNoYXJ0RGF0YS5jYXRlZ29yaWVzRGF0YSA9IF9jYWxDYXRlZ29yaWVzRGF0YTtcclxuICB9ZWxzZXtcclxuXHRcdGlmIChvcHRzLnR5cGUgPT09ICdsaW5lJyB8fCBvcHRzLnR5cGUgPT09ICdhcmVhJyB8fCBvcHRzLnR5cGUgPT09ICdwb2ludHMnKSB7XHJcblx0XHRcdG9wdHMuY2hhcnREYXRhLnhBeGlzRGF0YSA9IGNhbFhBeGlzRGF0YShzZXJpZXMsIG9wdHMsIGNvbmZpZyk7XHJcblx0XHRcdGNhdGVnb3JpZXM9b3B0cy5jaGFydERhdGEueEF4aXNEYXRhLnJhbmdlc0Zvcm1hdDtcclxuXHRcdFx0bGV0IF9jYWxDYXRlZ29yaWVzRGF0YSA9IGNhbENhdGVnb3JpZXNEYXRhKGNhdGVnb3JpZXMsIG9wdHMsIGNvbmZpZywgb3B0cy5jaGFydERhdGEueEF4aXNEYXRhLmVhY2hTcGFjaW5nKSxcclxuXHRcdFx0ICB4QXhpc0hlaWdodCA9IF9jYWxDYXRlZ29yaWVzRGF0YS54QXhpc0hlaWdodCxcclxuXHRcdFx0ICBhbmdsZSA9IF9jYWxDYXRlZ29yaWVzRGF0YS5hbmdsZTtcclxuXHRcdFx0Y29uZmlnLnhBeGlzSGVpZ2h0ID0geEF4aXNIZWlnaHQ7XHJcblx0XHRcdGNvbmZpZy5feEF4aXNUZXh0QW5nbGVfID0gYW5nbGU7XHJcblx0XHRcdG9wdHMuYXJlYVsyXSArPSB4QXhpc0hlaWdodDtcclxuXHRcdFx0b3B0cy5jaGFydERhdGEuY2F0ZWdvcmllc0RhdGEgPSBfY2FsQ2F0ZWdvcmllc0RhdGE7XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0b3B0cy5jaGFydERhdGEueEF4aXNEYXRhPXtcclxuXHRcdFx0XHR4QXhpc1BvaW50czogW11cclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHR9XHJcbiAgLy/orqHnrpflj7Plr7npvZDlgY/np7vot53nprtcclxuICBpZiAob3B0cy5lbmFibGVTY3JvbGwgJiYgb3B0cy54QXhpcy5zY3JvbGxBbGlnbiA9PSAncmlnaHQnICYmIG9wdHMuX3Njcm9sbERpc3RhbmNlXyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICBsZXQgb2Zmc2V0TGVmdCA9IDAsXHJcbiAgICAgIHhBeGlzUG9pbnRzID0gb3B0cy5jaGFydERhdGEueEF4aXNEYXRhLnhBeGlzUG9pbnRzLFxyXG4gICAgICBzdGFydFggPSBvcHRzLmNoYXJ0RGF0YS54QXhpc0RhdGEuc3RhcnRYLFxyXG4gICAgICBlbmRYID0gb3B0cy5jaGFydERhdGEueEF4aXNEYXRhLmVuZFgsXHJcbiAgICAgIGVhY2hTcGFjaW5nID0gb3B0cy5jaGFydERhdGEueEF4aXNEYXRhLmVhY2hTcGFjaW5nO1xyXG4gICAgbGV0IHRvdGFsV2lkdGggPSBlYWNoU3BhY2luZyAqICh4QXhpc1BvaW50cy5sZW5ndGggLSAxKTtcclxuICAgIGxldCBzY3JlZW5XaWR0aCA9IGVuZFggLSBzdGFydFg7XHJcbiAgICBvZmZzZXRMZWZ0ID0gc2NyZWVuV2lkdGggLSB0b3RhbFdpZHRoO1xyXG4gICAgX3RoaXMuc2Nyb2xsT3B0aW9uID0ge1xyXG4gICAgICBjdXJyZW50T2Zmc2V0OiBvZmZzZXRMZWZ0LFxyXG4gICAgICBzdGFydFRvdWNoWDogb2Zmc2V0TGVmdCxcclxuICAgICAgZGlzdGFuY2U6IDAsXHJcbiAgICAgIGxhc3RNb3ZlVGltZTogMFxyXG4gICAgfTtcclxuICAgIG9wdHMuX3Njcm9sbERpc3RhbmNlXyA9IG9mZnNldExlZnQ7XHJcbiAgfVxyXG5cclxuICBpZiAodHlwZSA9PT0gJ3BpZScgfHwgdHlwZSA9PT0gJ3JpbmcnIHx8IHR5cGUgPT09ICdyb3NlJykge1xyXG4gICAgY29uZmlnLl9waWVUZXh0TWF4TGVuZ3RoXyA9IG9wdHMuZGF0YUxhYmVsID09PSBmYWxzZSA/IDAgOiBnZXRQaWVUZXh0TWF4TGVuZ3RoKHNlcmllc01BKTtcclxuICB9XHJcblxyXG4gIHN3aXRjaCAodHlwZSkge1xyXG4gICAgY2FzZSAnd29yZCc6XHJcbiAgICAgIGxldCB3b3JkT3B0aW9uID0gYXNzaWduKHt9LHtcclxuICAgICAgICB0eXBlOiAnbm9ybWFsJyxcclxuICAgICAgICBhdXRvQ29sb3JzOiB0cnVlXHJcbiAgICAgIH0sb3B0cy5leHRyYS53b3JkKTtcclxuICAgICAgaWYob3B0cy51cGRhdGVEYXRhPT10cnVlIHx8IG9wdHMudXBkYXRlRGF0YT09dW5kZWZpbmVkKXtcclxuICAgICAgICBvcHRzLmNoYXJ0RGF0YS53b3JkQ2xvdWREYXRhPWdldFdvcmRDbG91ZFBvaW50KG9wdHMsd29yZE9wdGlvbi50eXBlKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmFuaW1hdGlvbkluc3RhbmNlID0gbmV3IEFuaW1hdGlvbih7XHJcbiAgICAgICAgdGltaW5nOiAnZWFzZUluT3V0JyxcclxuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXHJcbiAgICAgICAgb25Qcm9jZXNzOiBmdW5jdGlvbihwcm9jZXNzKSB7XHJcbiAgICAgICAgICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBvcHRzLndpZHRoLCBvcHRzLmhlaWdodCk7XHJcbiAgICAgICAgICBpZiAob3B0cy5yb3RhdGUpIHtcclxuICAgICAgICAgICAgY29udGV4dFJvdGF0ZShjb250ZXh0LCBvcHRzKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGRyYXdXb3JkQ2xvdWREYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LHByb2Nlc3MpO1xyXG4gICAgICAgICAgZHJhd0NhbnZhcyhvcHRzLCBjb250ZXh0KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQW5pbWF0aW9uRmluaXNoOiBmdW5jdGlvbiBvbkFuaW1hdGlvbkZpbmlzaCgpIHtcclxuICAgICAgICAgIF90aGlzLmV2ZW50LnRyaWdnZXIoJ3JlbmRlckNvbXBsZXRlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnbWFwJzpcclxuICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgb3B0cy53aWR0aCwgb3B0cy5oZWlnaHQpO1xyXG4gICAgICBkcmF3TWFwRGF0YVBvaW50cyhzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcbiAgICBicmVhaztcclxuICAgIGNhc2UgJ2Z1bm5lbCc6XHJcbiAgICAgIHRoaXMuYW5pbWF0aW9uSW5zdGFuY2UgPSBuZXcgQW5pbWF0aW9uKHtcclxuICAgICAgICB0aW1pbmc6ICdlYXNlSW5PdXQnLFxyXG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcclxuICAgICAgICBvblByb2Nlc3M6IGZ1bmN0aW9uKHByb2Nlc3MpIHtcclxuICAgICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIG9wdHMud2lkdGgsIG9wdHMuaGVpZ2h0KTtcclxuICAgICAgICAgIGlmIChvcHRzLnJvdGF0ZSkge1xyXG4gICAgICAgICAgICBjb250ZXh0Um90YXRlKGNvbnRleHQsIG9wdHMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgb3B0cy5jaGFydERhdGEuZnVubmVsRGF0YSA9IGRyYXdGdW5uZWxEYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzKTtcclxuICAgICAgICAgIGRyYXdMZWdlbmQob3B0cy5zZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgb3B0cy5jaGFydERhdGEpO1xyXG4gICAgICAgICAgZHJhd1Rvb2xUaXBCcmlkZ2Uob3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzKTtcclxuICAgICAgICAgIGRyYXdDYW52YXMob3B0cywgY29udGV4dCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkFuaW1hdGlvbkZpbmlzaDogZnVuY3Rpb24gb25BbmltYXRpb25GaW5pc2goKSB7XHJcbiAgICAgICAgICBfdGhpcy5ldmVudC50cmlnZ2VyKCdyZW5kZXJDb21wbGV0ZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICBicmVhaztcclxuICAgIGNhc2UgJ2xpbmUnOlxyXG4gICAgICB0aGlzLmFuaW1hdGlvbkluc3RhbmNlID0gbmV3IEFuaW1hdGlvbih7XHJcbiAgICAgICAgdGltaW5nOiAnZWFzZUluJyxcclxuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXHJcbiAgICAgICAgb25Qcm9jZXNzOiBmdW5jdGlvbiBvblByb2Nlc3MocHJvY2Vzcykge1xyXG4gICAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgb3B0cy53aWR0aCwgb3B0cy5oZWlnaHQpO1xyXG4gICAgICAgICAgaWYgKG9wdHMucm90YXRlKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRSb3RhdGUoY29udGV4dCwgb3B0cyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBkcmF3WUF4aXNHcmlkKGNhdGVnb3JpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcbiAgICAgICAgICBkcmF3WEF4aXMoY2F0ZWdvcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgICAgICAgIHZhciBfZHJhd0xpbmVEYXRhUG9pbnRzID0gZHJhd0xpbmVEYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzKSxcclxuICAgICAgICAgICAgeEF4aXNQb2ludHMgPSBfZHJhd0xpbmVEYXRhUG9pbnRzLnhBeGlzUG9pbnRzLFxyXG4gICAgICAgICAgICBjYWxQb2ludHMgPSBfZHJhd0xpbmVEYXRhUG9pbnRzLmNhbFBvaW50cyxcclxuICAgICAgICAgICAgZWFjaFNwYWNpbmcgPSBfZHJhd0xpbmVEYXRhUG9pbnRzLmVhY2hTcGFjaW5nO1xyXG4gICAgICAgICAgb3B0cy5jaGFydERhdGEueEF4aXNQb2ludHMgPSB4QXhpc1BvaW50cztcclxuICAgICAgICAgIG9wdHMuY2hhcnREYXRhLmNhbFBvaW50cyA9IGNhbFBvaW50cztcclxuICAgICAgICAgIG9wdHMuY2hhcnREYXRhLmVhY2hTcGFjaW5nID0gZWFjaFNwYWNpbmc7XHJcbiAgICAgICAgICBkcmF3WUF4aXMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgICAgICAgaWYgKG9wdHMuZW5hYmxlTWFya0xpbmUgIT09IGZhbHNlICYmIHByb2Nlc3MgPT09IDEpIHtcclxuICAgICAgICAgICAgZHJhd01hcmtMaW5lKG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBkcmF3TGVnZW5kKG9wdHMuc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIG9wdHMuY2hhcnREYXRhKTtcclxuICAgICAgICAgIGRyYXdUb29sVGlwQnJpZGdlKG9wdHMsIGNvbmZpZywgY29udGV4dCwgcHJvY2VzcywgZWFjaFNwYWNpbmcsIHhBeGlzUG9pbnRzKTtcclxuICAgICAgICAgIGRyYXdDYW52YXMob3B0cywgY29udGV4dCk7XHJcblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25BbmltYXRpb25GaW5pc2g6IGZ1bmN0aW9uIG9uQW5pbWF0aW9uRmluaXNoKCkge1xyXG4gICAgICAgICAgX3RoaXMuZXZlbnQudHJpZ2dlcigncmVuZGVyQ29tcGxldGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ21peCc6XHJcbiAgICAgIHRoaXMuYW5pbWF0aW9uSW5zdGFuY2UgPSBuZXcgQW5pbWF0aW9uKHtcclxuICAgICAgICB0aW1pbmc6ICdlYXNlSW4nLFxyXG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcclxuICAgICAgICBvblByb2Nlc3M6IGZ1bmN0aW9uIG9uUHJvY2Vzcyhwcm9jZXNzKSB7XHJcbiAgICAgICAgICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBvcHRzLndpZHRoLCBvcHRzLmhlaWdodCk7XHJcbiAgICAgICAgICBpZiAob3B0cy5yb3RhdGUpIHtcclxuICAgICAgICAgICAgY29udGV4dFJvdGF0ZShjb250ZXh0LCBvcHRzKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGRyYXdZQXhpc0dyaWQoY2F0ZWdvcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgICAgICAgIGRyYXdYQXhpcyhjYXRlZ29yaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgICAgICAgdmFyIF9kcmF3TWl4RGF0YVBvaW50cyA9IGRyYXdNaXhEYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzKSxcclxuICAgICAgICAgICAgeEF4aXNQb2ludHMgPSBfZHJhd01peERhdGFQb2ludHMueEF4aXNQb2ludHMsXHJcbiAgICAgICAgICAgIGNhbFBvaW50cyA9IF9kcmF3TWl4RGF0YVBvaW50cy5jYWxQb2ludHMsXHJcbiAgICAgICAgICAgIGVhY2hTcGFjaW5nID0gX2RyYXdNaXhEYXRhUG9pbnRzLmVhY2hTcGFjaW5nO1xyXG4gICAgICAgICAgb3B0cy5jaGFydERhdGEueEF4aXNQb2ludHMgPSB4QXhpc1BvaW50cztcclxuICAgICAgICAgIG9wdHMuY2hhcnREYXRhLmNhbFBvaW50cyA9IGNhbFBvaW50cztcclxuICAgICAgICAgIG9wdHMuY2hhcnREYXRhLmVhY2hTcGFjaW5nID0gZWFjaFNwYWNpbmc7XHJcbiAgICAgICAgICBkcmF3WUF4aXMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgICAgICAgaWYgKG9wdHMuZW5hYmxlTWFya0xpbmUgIT09IGZhbHNlICYmIHByb2Nlc3MgPT09IDEpIHtcclxuICAgICAgICAgICAgZHJhd01hcmtMaW5lKG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBkcmF3TGVnZW5kKG9wdHMuc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIG9wdHMuY2hhcnREYXRhKTtcclxuICAgICAgICAgIGRyYXdUb29sVGlwQnJpZGdlKG9wdHMsIGNvbmZpZywgY29udGV4dCwgcHJvY2VzcywgZWFjaFNwYWNpbmcsIHhBeGlzUG9pbnRzKTtcclxuICAgICAgICAgIGRyYXdDYW52YXMob3B0cywgY29udGV4dCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkFuaW1hdGlvbkZpbmlzaDogZnVuY3Rpb24gb25BbmltYXRpb25GaW5pc2goKSB7XHJcbiAgICAgICAgICBfdGhpcy5ldmVudC50cmlnZ2VyKCdyZW5kZXJDb21wbGV0ZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnY29sdW1uJzpcclxuICAgICAgdGhpcy5hbmltYXRpb25JbnN0YW5jZSA9IG5ldyBBbmltYXRpb24oe1xyXG4gICAgICAgIHRpbWluZzogJ2Vhc2VJbicsXHJcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxyXG4gICAgICAgIG9uUHJvY2VzczogZnVuY3Rpb24gb25Qcm9jZXNzKHByb2Nlc3MpIHtcclxuICAgICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIG9wdHMud2lkdGgsIG9wdHMuaGVpZ2h0KTtcclxuICAgICAgICAgIGlmIChvcHRzLnJvdGF0ZSkge1xyXG4gICAgICAgICAgICBjb250ZXh0Um90YXRlKGNvbnRleHQsIG9wdHMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZHJhd1lBeGlzR3JpZChjYXRlZ29yaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgICAgICAgZHJhd1hBeGlzKGNhdGVnb3JpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcbiAgICAgICAgICB2YXIgX2RyYXdDb2x1bW5EYXRhUG9pbnRzID0gZHJhd0NvbHVtbkRhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MpLFxyXG4gICAgICAgICAgICB4QXhpc1BvaW50cyA9IF9kcmF3Q29sdW1uRGF0YVBvaW50cy54QXhpc1BvaW50cyxcclxuICAgICAgICAgICAgY2FsUG9pbnRzID0gX2RyYXdDb2x1bW5EYXRhUG9pbnRzLmNhbFBvaW50cyxcclxuICAgICAgICAgICAgZWFjaFNwYWNpbmcgPSBfZHJhd0NvbHVtbkRhdGFQb2ludHMuZWFjaFNwYWNpbmc7XHJcbiAgICAgICAgICBvcHRzLmNoYXJ0RGF0YS54QXhpc1BvaW50cyA9IHhBeGlzUG9pbnRzO1xyXG4gICAgICAgICAgb3B0cy5jaGFydERhdGEuY2FsUG9pbnRzID0gY2FsUG9pbnRzO1xyXG4gICAgICAgICAgb3B0cy5jaGFydERhdGEuZWFjaFNwYWNpbmcgPSBlYWNoU3BhY2luZztcclxuICAgICAgICAgIGRyYXdZQXhpcyhzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcbiAgICAgICAgICBpZiAob3B0cy5lbmFibGVNYXJrTGluZSAhPT0gZmFsc2UgJiYgcHJvY2VzcyA9PT0gMSkge1xyXG4gICAgICAgICAgICBkcmF3TWFya0xpbmUob3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGRyYXdMZWdlbmQob3B0cy5zZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgb3B0cy5jaGFydERhdGEpO1xyXG4gICAgICAgICAgZHJhd1Rvb2xUaXBCcmlkZ2Uob3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzLCBlYWNoU3BhY2luZywgeEF4aXNQb2ludHMpO1xyXG4gICAgICAgICAgZHJhd0NhbnZhcyhvcHRzLCBjb250ZXh0KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQW5pbWF0aW9uRmluaXNoOiBmdW5jdGlvbiBvbkFuaW1hdGlvbkZpbmlzaCgpIHtcclxuICAgICAgICAgIF90aGlzLmV2ZW50LnRyaWdnZXIoJ3JlbmRlckNvbXBsZXRlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdhcmVhJzpcclxuICAgICAgdGhpcy5hbmltYXRpb25JbnN0YW5jZSA9IG5ldyBBbmltYXRpb24oe1xyXG4gICAgICAgIHRpbWluZzogJ2Vhc2VJbicsXHJcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxyXG4gICAgICAgIG9uUHJvY2VzczogZnVuY3Rpb24gb25Qcm9jZXNzKHByb2Nlc3MpIHtcclxuICAgICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIG9wdHMud2lkdGgsIG9wdHMuaGVpZ2h0KTtcclxuICAgICAgICAgIGlmIChvcHRzLnJvdGF0ZSkge1xyXG4gICAgICAgICAgICBjb250ZXh0Um90YXRlKGNvbnRleHQsIG9wdHMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZHJhd1lBeGlzR3JpZChjYXRlZ29yaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgICAgICAgZHJhd1hBeGlzKGNhdGVnb3JpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcbiAgICAgICAgICB2YXIgX2RyYXdBcmVhRGF0YVBvaW50cyA9IGRyYXdBcmVhRGF0YVBvaW50cyhzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgcHJvY2VzcyksXHJcbiAgICAgICAgICAgIHhBeGlzUG9pbnRzID0gX2RyYXdBcmVhRGF0YVBvaW50cy54QXhpc1BvaW50cyxcclxuICAgICAgICAgICAgY2FsUG9pbnRzID0gX2RyYXdBcmVhRGF0YVBvaW50cy5jYWxQb2ludHMsXHJcbiAgICAgICAgICAgIGVhY2hTcGFjaW5nID0gX2RyYXdBcmVhRGF0YVBvaW50cy5lYWNoU3BhY2luZztcclxuICAgICAgICAgIG9wdHMuY2hhcnREYXRhLnhBeGlzUG9pbnRzID0geEF4aXNQb2ludHM7XHJcbiAgICAgICAgICBvcHRzLmNoYXJ0RGF0YS5jYWxQb2ludHMgPSBjYWxQb2ludHM7XHJcbiAgICAgICAgICBvcHRzLmNoYXJ0RGF0YS5lYWNoU3BhY2luZyA9IGVhY2hTcGFjaW5nO1xyXG4gICAgICAgICAgZHJhd1lBeGlzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgICAgICAgIGlmIChvcHRzLmVuYWJsZU1hcmtMaW5lICE9PSBmYWxzZSAmJiBwcm9jZXNzID09PSAxKSB7XHJcbiAgICAgICAgICAgIGRyYXdNYXJrTGluZShvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZHJhd0xlZ2VuZChvcHRzLnNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCBvcHRzLmNoYXJ0RGF0YSk7XHJcbiAgICAgICAgICBkcmF3VG9vbFRpcEJyaWRnZShvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MsIGVhY2hTcGFjaW5nLCB4QXhpc1BvaW50cyk7XHJcbiAgICAgICAgICBkcmF3Q2FudmFzKG9wdHMsIGNvbnRleHQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25BbmltYXRpb25GaW5pc2g6IGZ1bmN0aW9uIG9uQW5pbWF0aW9uRmluaXNoKCkge1xyXG4gICAgICAgICAgX3RoaXMuZXZlbnQudHJpZ2dlcigncmVuZGVyQ29tcGxldGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ3JpbmcnOlxyXG4gICAgY2FzZSAncGllJzpcclxuICAgICAgdGhpcy5hbmltYXRpb25JbnN0YW5jZSA9IG5ldyBBbmltYXRpb24oe1xyXG4gICAgICAgIHRpbWluZzogJ2Vhc2VJbk91dCcsXHJcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxyXG4gICAgICAgIG9uUHJvY2VzczogZnVuY3Rpb24gb25Qcm9jZXNzKHByb2Nlc3MpIHtcclxuICAgICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIG9wdHMud2lkdGgsIG9wdHMuaGVpZ2h0KTtcclxuICAgICAgICAgIGlmIChvcHRzLnJvdGF0ZSkge1xyXG4gICAgICAgICAgICBjb250ZXh0Um90YXRlKGNvbnRleHQsIG9wdHMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgb3B0cy5jaGFydERhdGEucGllRGF0YSA9IGRyYXdQaWVEYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzKTtcclxuICAgICAgICAgIGRyYXdMZWdlbmQob3B0cy5zZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgb3B0cy5jaGFydERhdGEpO1xyXG4gICAgICAgICAgZHJhd1Rvb2xUaXBCcmlkZ2Uob3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzKTtcclxuICAgICAgICAgIGRyYXdDYW52YXMob3B0cywgY29udGV4dCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkFuaW1hdGlvbkZpbmlzaDogZnVuY3Rpb24gb25BbmltYXRpb25GaW5pc2goKSB7XHJcbiAgICAgICAgICBfdGhpcy5ldmVudC50cmlnZ2VyKCdyZW5kZXJDb21wbGV0ZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAncm9zZSc6XHJcbiAgICAgIHRoaXMuYW5pbWF0aW9uSW5zdGFuY2UgPSBuZXcgQW5pbWF0aW9uKHtcclxuICAgICAgICB0aW1pbmc6ICdlYXNlSW5PdXQnLFxyXG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcclxuICAgICAgICBvblByb2Nlc3M6IGZ1bmN0aW9uIG9uUHJvY2Vzcyhwcm9jZXNzKSB7XHJcbiAgICAgICAgICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBvcHRzLndpZHRoLCBvcHRzLmhlaWdodCk7XHJcbiAgICAgICAgICBpZiAob3B0cy5yb3RhdGUpIHtcclxuICAgICAgICAgICAgY29udGV4dFJvdGF0ZShjb250ZXh0LCBvcHRzKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIG9wdHMuY2hhcnREYXRhLnBpZURhdGEgPSBkcmF3Um9zZURhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MpO1xyXG4gICAgICAgICAgZHJhd0xlZ2VuZChvcHRzLnNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCBvcHRzLmNoYXJ0RGF0YSk7XHJcbiAgICAgICAgICBkcmF3VG9vbFRpcEJyaWRnZShvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MpO1xyXG4gICAgICAgICAgZHJhd0NhbnZhcyhvcHRzLCBjb250ZXh0KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQW5pbWF0aW9uRmluaXNoOiBmdW5jdGlvbiBvbkFuaW1hdGlvbkZpbmlzaCgpIHtcclxuICAgICAgICAgIF90aGlzLmV2ZW50LnRyaWdnZXIoJ3JlbmRlckNvbXBsZXRlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdyYWRhcic6XHJcbiAgICAgIHRoaXMuYW5pbWF0aW9uSW5zdGFuY2UgPSBuZXcgQW5pbWF0aW9uKHtcclxuICAgICAgICB0aW1pbmc6ICdlYXNlSW5PdXQnLFxyXG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcclxuICAgICAgICBvblByb2Nlc3M6IGZ1bmN0aW9uIG9uUHJvY2Vzcyhwcm9jZXNzKSB7XHJcbiAgICAgICAgICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBvcHRzLndpZHRoLCBvcHRzLmhlaWdodCk7XHJcbiAgICAgICAgICBpZiAob3B0cy5yb3RhdGUpIHtcclxuICAgICAgICAgICAgY29udGV4dFJvdGF0ZShjb250ZXh0LCBvcHRzKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIG9wdHMuY2hhcnREYXRhLnJhZGFyRGF0YSA9IGRyYXdSYWRhckRhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MpO1xyXG4gICAgICAgICAgZHJhd0xlZ2VuZChvcHRzLnNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCBvcHRzLmNoYXJ0RGF0YSk7XHJcbiAgICAgICAgICBkcmF3VG9vbFRpcEJyaWRnZShvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MpO1xyXG4gICAgICAgICAgZHJhd0NhbnZhcyhvcHRzLCBjb250ZXh0KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQW5pbWF0aW9uRmluaXNoOiBmdW5jdGlvbiBvbkFuaW1hdGlvbkZpbmlzaCgpIHtcclxuICAgICAgICAgIF90aGlzLmV2ZW50LnRyaWdnZXIoJ3JlbmRlckNvbXBsZXRlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdhcmNiYXInOlxyXG4gICAgICB0aGlzLmFuaW1hdGlvbkluc3RhbmNlID0gbmV3IEFuaW1hdGlvbih7XHJcbiAgICAgICAgdGltaW5nOiAnZWFzZUluT3V0JyxcclxuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXHJcbiAgICAgICAgb25Qcm9jZXNzOiBmdW5jdGlvbiBvblByb2Nlc3MocHJvY2Vzcykge1xyXG4gICAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgb3B0cy53aWR0aCwgb3B0cy5oZWlnaHQpO1xyXG4gICAgICAgICAgaWYgKG9wdHMucm90YXRlKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRSb3RhdGUoY29udGV4dCwgb3B0cyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBvcHRzLmNoYXJ0RGF0YS5hcmNiYXJEYXRhID0gZHJhd0FyY2JhckRhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MpO1xyXG4gICAgICAgICAgZHJhd0NhbnZhcyhvcHRzLCBjb250ZXh0KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQW5pbWF0aW9uRmluaXNoOiBmdW5jdGlvbiBvbkFuaW1hdGlvbkZpbmlzaCgpIHtcclxuICAgICAgICAgIF90aGlzLmV2ZW50LnRyaWdnZXIoJ3JlbmRlckNvbXBsZXRlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdnYXVnZSc6XHJcbiAgICAgIHRoaXMuYW5pbWF0aW9uSW5zdGFuY2UgPSBuZXcgQW5pbWF0aW9uKHtcclxuICAgICAgICB0aW1pbmc6ICdlYXNlSW5PdXQnLFxyXG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcclxuICAgICAgICBvblByb2Nlc3M6IGZ1bmN0aW9uIG9uUHJvY2Vzcyhwcm9jZXNzKSB7XHJcbiAgICAgICAgICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBvcHRzLndpZHRoLCBvcHRzLmhlaWdodCk7XHJcbiAgICAgICAgICBpZiAob3B0cy5yb3RhdGUpIHtcclxuICAgICAgICAgICAgY29udGV4dFJvdGF0ZShjb250ZXh0LCBvcHRzKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIG9wdHMuY2hhcnREYXRhLmdhdWdlRGF0YSA9IGRyYXdHYXVnZURhdGFQb2ludHMoY2F0ZWdvcmllcywgc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MpO1xyXG4gICAgICAgICAgZHJhd0NhbnZhcyhvcHRzLCBjb250ZXh0KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQW5pbWF0aW9uRmluaXNoOiBmdW5jdGlvbiBvbkFuaW1hdGlvbkZpbmlzaCgpIHtcclxuICAgICAgICAgIF90aGlzLmV2ZW50LnRyaWdnZXIoJ3JlbmRlckNvbXBsZXRlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdjYW5kbGUnOlxyXG4gICAgICB0aGlzLmFuaW1hdGlvbkluc3RhbmNlID0gbmV3IEFuaW1hdGlvbih7XHJcbiAgICAgICAgdGltaW5nOiAnZWFzZUluJyxcclxuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXHJcbiAgICAgICAgb25Qcm9jZXNzOiBmdW5jdGlvbiBvblByb2Nlc3MocHJvY2Vzcykge1xyXG4gICAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgb3B0cy53aWR0aCwgb3B0cy5oZWlnaHQpO1xyXG4gICAgICAgICAgaWYgKG9wdHMucm90YXRlKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRSb3RhdGUoY29udGV4dCwgb3B0cyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBkcmF3WUF4aXNHcmlkKGNhdGVnb3JpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcbiAgICAgICAgICBkcmF3WEF4aXMoY2F0ZWdvcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgICAgICAgIHZhciBfZHJhd0NhbmRsZURhdGFQb2ludHMgPSBkcmF3Q2FuZGxlRGF0YVBvaW50cyhzZXJpZXMsIHNlcmllc01BLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MpLFxyXG4gICAgICAgICAgICB4QXhpc1BvaW50cyA9IF9kcmF3Q2FuZGxlRGF0YVBvaW50cy54QXhpc1BvaW50cyxcclxuICAgICAgICAgICAgY2FsUG9pbnRzID0gX2RyYXdDYW5kbGVEYXRhUG9pbnRzLmNhbFBvaW50cyxcclxuICAgICAgICAgICAgZWFjaFNwYWNpbmcgPSBfZHJhd0NhbmRsZURhdGFQb2ludHMuZWFjaFNwYWNpbmc7XHJcbiAgICAgICAgICBvcHRzLmNoYXJ0RGF0YS54QXhpc1BvaW50cyA9IHhBeGlzUG9pbnRzO1xyXG4gICAgICAgICAgb3B0cy5jaGFydERhdGEuY2FsUG9pbnRzID0gY2FsUG9pbnRzO1xyXG4gICAgICAgICAgb3B0cy5jaGFydERhdGEuZWFjaFNwYWNpbmcgPSBlYWNoU3BhY2luZztcclxuICAgICAgICAgIGRyYXdZQXhpcyhzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcbiAgICAgICAgICBpZiAob3B0cy5lbmFibGVNYXJrTGluZSAhPT0gZmFsc2UgJiYgcHJvY2VzcyA9PT0gMSkge1xyXG4gICAgICAgICAgICBkcmF3TWFya0xpbmUob3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChzZXJpZXNNQSkge1xyXG4gICAgICAgICAgICBkcmF3TGVnZW5kKHNlcmllc01BLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIG9wdHMuY2hhcnREYXRhKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRyYXdMZWdlbmQob3B0cy5zZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgb3B0cy5jaGFydERhdGEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZHJhd1Rvb2xUaXBCcmlkZ2Uob3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzLCBlYWNoU3BhY2luZywgeEF4aXNQb2ludHMpO1xyXG4gICAgICAgICAgZHJhd0NhbnZhcyhvcHRzLCBjb250ZXh0KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQW5pbWF0aW9uRmluaXNoOiBmdW5jdGlvbiBvbkFuaW1hdGlvbkZpbmlzaCgpIHtcclxuICAgICAgICAgIF90aGlzLmV2ZW50LnRyaWdnZXIoJ3JlbmRlckNvbXBsZXRlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgYnJlYWs7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBzaW1wbGUgZXZlbnQgaW1wbGVtZW50XHJcblxyXG5mdW5jdGlvbiBFdmVudCgpIHtcclxuICB0aGlzLmV2ZW50cyA9IHt9O1xyXG59XHJcblxyXG5FdmVudC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XHJcbiAgdGhpcy5ldmVudHNbdHlwZV0gPSB0aGlzLmV2ZW50c1t0eXBlXSB8fCBbXTtcclxuICB0aGlzLmV2ZW50c1t0eXBlXS5wdXNoKGxpc3RlbmVyKTtcclxufTtcclxuXHJcbkV2ZW50LnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24oKSB7XHJcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcclxuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XHJcbiAgfVxyXG5cclxuICB2YXIgdHlwZSA9IGFyZ3NbMF07XHJcbiAgdmFyIHBhcmFtcyA9IGFyZ3Muc2xpY2UoMSk7XHJcbiAgaWYgKCEhdGhpcy5ldmVudHNbdHlwZV0pIHtcclxuICAgIHRoaXMuZXZlbnRzW3R5cGVdLmZvckVhY2goZnVuY3Rpb24obGlzdGVuZXIpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBsaXN0ZW5lci5hcHBseShudWxsLCBwYXJhbXMpO1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59O1xyXG5cclxudmFyIENoYXJ0cyA9IGZ1bmN0aW9uIENoYXJ0cyhvcHRzKSB7XHJcbiAgb3B0cy5waXhlbFJhdGlvID0gb3B0cy5waXhlbFJhdGlvID8gb3B0cy5waXhlbFJhdGlvIDogMTtcclxuICBvcHRzLmZvbnRTaXplID0gb3B0cy5mb250U2l6ZSA/IG9wdHMuZm9udFNpemUgKiBvcHRzLnBpeGVsUmF0aW8gOiAxMyAqIG9wdHMucGl4ZWxSYXRpbztcclxuICBvcHRzLnRpdGxlID0gYXNzaWduKHt9LCBvcHRzLnRpdGxlKTtcclxuICBvcHRzLnN1YnRpdGxlID0gYXNzaWduKHt9LCBvcHRzLnN1YnRpdGxlKTtcclxuICBvcHRzLmR1cmF0aW9uID0gb3B0cy5kdXJhdGlvbiA/IG9wdHMuZHVyYXRpb24gOiAxMDAwO1xyXG4gIG9wdHMueUF4aXMgPSBhc3NpZ24oe30sIHtcclxuICAgIGRhdGE6W10sXHJcbiAgICBzaG93VGl0bGU6ZmFsc2UsXHJcbiAgICBkaXNhYmxlZDpmYWxzZSxcclxuICAgIGRpc2FibGVHcmlkOmZhbHNlLFxyXG4gICAgc3BsaXROdW1iZXI6NSxcclxuICAgIGdyaWRUeXBlOiAnc29saWQnLFxyXG4gICAgZGFzaExlbmd0aDogNCAqIG9wdHMucGl4ZWxSYXRpbyxcclxuICAgIGdyaWRDb2xvcjonI2NjY2NjYycsXHJcbiAgICBwYWRkaW5nOjEwLFxyXG4gICAgZm9udENvbG9yOicjNjY2NjY2J1xyXG4gIH0sIG9wdHMueUF4aXMpO1xyXG4gIG9wdHMueUF4aXMuZGFzaExlbmd0aCAqPSBvcHRzLnBpeGVsUmF0aW87XHJcbiAgb3B0cy55QXhpcy5wYWRkaW5nICo9IG9wdHMucGl4ZWxSYXRpbztcclxuICBvcHRzLnhBeGlzID0gYXNzaWduKHt9LCB7XHJcbiAgICByb3RhdGVMYWJlbDogZmFsc2UsXHJcbiAgICB0eXBlOiAnY2FsaWJyYXRpb24nLFxyXG4gICAgZ3JpZFR5cGU6ICdzb2xpZCcsXHJcbiAgICBkYXNoTGVuZ3RoOiA0LFxyXG4gICAgc2Nyb2xsQWxpZ246ICdsZWZ0JyxcclxuICAgIGJvdW5kYXJ5R2FwOidjZW50ZXInLFxyXG4gICAgYXhpc0xpbmU6dHJ1ZSxcclxuICAgIGF4aXNMaW5lQ29sb3I6JyNjY2NjY2MnXHJcbiAgfSwgb3B0cy54QXhpcyk7XHJcbiAgb3B0cy54QXhpcy5kYXNoTGVuZ3RoICo9IG9wdHMucGl4ZWxSYXRpbztcclxuICBvcHRzLmxlZ2VuZCA9IGFzc2lnbih7fSwge1xyXG4gICAgc2hvdzogdHJ1ZSxcclxuICAgIHBvc2l0aW9uOiAnYm90dG9tJyxcclxuICAgIGZsb2F0OiAnY2VudGVyJyxcclxuICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMCknLFxyXG4gICAgYm9yZGVyQ29sb3I6ICdyZ2JhKDAsMCwwLDApJyxcclxuICAgIGJvcmRlcldpZHRoOiAwLFxyXG4gICAgcGFkZGluZzogNSxcclxuICAgIG1hcmdpbjogNSxcclxuICAgIGl0ZW1HYXA6IDEwLFxyXG4gICAgZm9udFNpemU6IG9wdHMuZm9udFNpemUsXHJcbiAgICBsaW5lSGVpZ2h0OiBvcHRzLmZvbnRTaXplLFxyXG4gICAgZm9udENvbG9yOiAnIzMzMzMzMycsXHJcbiAgICBmb3JtYXQ6IHt9LFxyXG4gICAgaGlkZGVuQ29sb3I6ICcjQ0VDRUNFJ1xyXG4gIH0sIG9wdHMubGVnZW5kKTtcclxuICBvcHRzLmxlZ2VuZC5ib3JkZXJXaWR0aCA9IG9wdHMubGVnZW5kLmJvcmRlcldpZHRoICogb3B0cy5waXhlbFJhdGlvO1xyXG4gIG9wdHMubGVnZW5kLml0ZW1HYXAgPSBvcHRzLmxlZ2VuZC5pdGVtR2FwICogb3B0cy5waXhlbFJhdGlvO1xyXG4gIG9wdHMubGVnZW5kLnBhZGRpbmcgPSBvcHRzLmxlZ2VuZC5wYWRkaW5nICogb3B0cy5waXhlbFJhdGlvO1xyXG4gIG9wdHMubGVnZW5kLm1hcmdpbiA9IG9wdHMubGVnZW5kLm1hcmdpbiAqIG9wdHMucGl4ZWxSYXRpbztcclxuICBvcHRzLmV4dHJhID0gYXNzaWduKHt9LCBvcHRzLmV4dHJhKTtcclxuICBvcHRzLnJvdGF0ZSA9IG9wdHMucm90YXRlID8gdHJ1ZSA6IGZhbHNlO1xyXG4gIG9wdHMuYW5pbWF0aW9uID0gb3B0cy5hbmltYXRpb24gPyB0cnVlIDogZmFsc2U7XHJcblx0b3B0cy5yb3RhdGUgPSBvcHRzLnJvdGF0ZSA/IHRydWUgOiBmYWxzZTtcclxuXHRvcHRzLmNhbnZhczJkID0gb3B0cy5jYW52YXMyZCA/IHRydWUgOiBmYWxzZTtcclxuXHJcbiAgbGV0IGNvbmZpZyQkMSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY29uZmlnKSk7XHJcbiAgY29uZmlnJCQxLmNvbG9ycyA9IG9wdHMuY29sb3JzID8gb3B0cy5jb2xvcnMgOiBjb25maWckJDEuY29sb3JzO1xyXG4gIGNvbmZpZyQkMS55QXhpc1RpdGxlV2lkdGggPSBvcHRzLnlBeGlzLmRpc2FibGVkICE9PSB0cnVlICYmIG9wdHMueUF4aXMudGl0bGUgPyBjb25maWckJDEueUF4aXNUaXRsZVdpZHRoIDogMDtcclxuICBpZiAob3B0cy50eXBlID09ICdwaWUnIHx8IG9wdHMudHlwZSA9PSAncmluZycpIHtcclxuICAgIGNvbmZpZyQkMS5waWVDaGFydExpbmVQYWRkaW5nID0gb3B0cy5kYXRhTGFiZWwgPT09IGZhbHNlID8gMCA6IG9wdHMuZXh0cmEucGllLmxhYmVsV2lkdGggKiBvcHRzLnBpeGVsUmF0aW8gfHwgY29uZmlnJCQxLnBpZUNoYXJ0TGluZVBhZGRpbmcgKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgfVxyXG4gIGlmIChvcHRzLnR5cGUgPT0gJ3Jvc2UnKSB7XHJcbiAgICBjb25maWckJDEucGllQ2hhcnRMaW5lUGFkZGluZyA9IG9wdHMuZGF0YUxhYmVsID09PSBmYWxzZSA/IDAgOiBvcHRzLmV4dHJhLnJvc2UubGFiZWxXaWR0aCAqIG9wdHMucGl4ZWxSYXRpbyB8fCBjb25maWckJDEucGllQ2hhcnRMaW5lUGFkZGluZyAqIG9wdHMucGl4ZWxSYXRpbztcclxuICB9XHJcbiAgY29uZmlnJCQxLnBpZUNoYXJ0VGV4dFBhZGRpbmcgPSBvcHRzLmRhdGFMYWJlbCA9PT0gZmFsc2UgPyAwIDogY29uZmlnJCQxLnBpZUNoYXJ0VGV4dFBhZGRpbmcgKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgY29uZmlnJCQxLnlBeGlzU3BsaXQgPSBvcHRzLnlBeGlzLnNwbGl0TnVtYmVyID8gb3B0cy55QXhpcy5zcGxpdE51bWJlciA6IGNvbmZpZy55QXhpc1NwbGl0O1xyXG5cclxuICAvL+Wxj+W5leaXi+i9rFxyXG4gIGNvbmZpZyQkMS5yb3RhdGUgPSBvcHRzLnJvdGF0ZTtcclxuICBpZiAob3B0cy5yb3RhdGUpIHtcclxuICAgIGxldCB0ZW1wV2lkdGggPSBvcHRzLndpZHRoO1xyXG4gICAgbGV0IHRlbXBIZWlnaHQgPSBvcHRzLmhlaWdodDtcclxuICAgIG9wdHMud2lkdGggPSB0ZW1wSGVpZ2h0O1xyXG4gICAgb3B0cy5oZWlnaHQgPSB0ZW1wV2lkdGg7XHJcbiAgfVxyXG5cclxuICAvL+mAgumFjemrmOWIhuWxj1xyXG4gIG9wdHMucGFkZGluZyA9IG9wdHMucGFkZGluZyA/IG9wdHMucGFkZGluZyA6IGNvbmZpZyQkMS5wYWRkaW5nO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XHJcbiAgICBvcHRzLnBhZGRpbmdbaV0gKj0gb3B0cy5waXhlbFJhdGlvO1xyXG4gIH1cclxuICBjb25maWckJDEueUF4aXNXaWR0aCA9IGNvbmZpZy55QXhpc1dpZHRoICogb3B0cy5waXhlbFJhdGlvO1xyXG4gIGNvbmZpZyQkMS54QXhpc0hlaWdodCA9IGNvbmZpZy54QXhpc0hlaWdodCAqIG9wdHMucGl4ZWxSYXRpbztcclxuICBpZiAob3B0cy5lbmFibGVTY3JvbGwgJiYgb3B0cy54QXhpcy5zY3JvbGxTaG93KSB7XHJcbiAgICBjb25maWckJDEueEF4aXNIZWlnaHQgKz0gNiAqIG9wdHMucGl4ZWxSYXRpbztcclxuICB9XHJcbiAgY29uZmlnJCQxLnhBeGlzTGluZUhlaWdodCA9IGNvbmZpZy54QXhpc0xpbmVIZWlnaHQgKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgY29uZmlnJCQxLmZvbnRTaXplID0gb3B0cy5mb250U2l6ZTtcclxuICBjb25maWckJDEudGl0bGVGb250U2l6ZSA9IGNvbmZpZy50aXRsZUZvbnRTaXplICogb3B0cy5waXhlbFJhdGlvO1xyXG4gIGNvbmZpZyQkMS5zdWJ0aXRsZUZvbnRTaXplID0gY29uZmlnLnN1YnRpdGxlRm9udFNpemUgKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgY29uZmlnJCQxLnRvb2xUaXBQYWRkaW5nID0gY29uZmlnLnRvb2xUaXBQYWRkaW5nICogb3B0cy5waXhlbFJhdGlvO1xyXG4gIGNvbmZpZyQkMS50b29sVGlwTGluZUhlaWdodCA9IGNvbmZpZy50b29sVGlwTGluZUhlaWdodCAqIG9wdHMucGl4ZWxSYXRpbztcclxuICBjb25maWckJDEuY29sdW1lUGFkZGluZyA9IGNvbmZpZy5jb2x1bWVQYWRkaW5nICogb3B0cy5waXhlbFJhdGlvO1xyXG4gIG9wdHMuJHRoaXMgPSBvcHRzLiR0aGlzID8gb3B0cy4kdGhpcyA6IHRoaXM7XHJcbiAgXHJcbiAgdGhpcy5jb250ZXh0ID0gb3B0cy5jb250ZXh0ID8gb3B0cy5jb250ZXh0IDogdW5pLmNyZWF0ZUNhbnZhc0NvbnRleHQob3B0cy5jYW52YXNJZCwgb3B0cy4kdGhpcyk7XHJcblx0XHJcblx0aWYob3B0cy5jYW52YXMyZCl7XHJcblx0XHR0aGlzLmNvbnRleHQuc2V0U3Ryb2tlU3R5bGUgPSBmdW5jdGlvbihlKXsgcmV0dXJuIHRoaXMuc3Ryb2tlU3R5bGU9ZTsgfVxyXG5cdFx0dGhpcy5jb250ZXh0LnNldExpbmVXaWR0aCA9IGZ1bmN0aW9uKGUpeyByZXR1cm4gdGhpcy5saW5lV2lkdGg9ZTsgfVxyXG5cdFx0dGhpcy5jb250ZXh0LnNldExpbmVDYXAgPSBmdW5jdGlvbihlKXsgcmV0dXJuIHRoaXMubGluZUNhcD1lOyB9XHJcblx0XHR0aGlzLmNvbnRleHQuc2V0Rm9udFNpemUgPSBmdW5jdGlvbihlKXsgcmV0dXJuIHRoaXMuZm9udD1lK1wicHggc2Fucy1zZXJpZlwiOyB9XHJcblx0XHR0aGlzLmNvbnRleHQuc2V0RmlsbFN0eWxlID0gZnVuY3Rpb24oZSl7IHJldHVybiB0aGlzLmZpbGxTdHlsZT1lOyB9XHJcblx0XHR0aGlzLmNvbnRleHQuZHJhdyA9IGZ1bmN0aW9uKCl7IH1cclxuXHR9XHJcbiAgLyog5YW85a655Y6f55SfSDVcclxuICB0aGlzLmNvbnRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvcHRzLmNhbnZhc0lkKS5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgdGhpcy5jb250ZXh0LnNldFN0cm9rZVN0eWxlID0gZnVuY3Rpb24oZSl7IHJldHVybiB0aGlzLnN0cm9rZVN0eWxlPWU7IH1cclxuICB0aGlzLmNvbnRleHQuc2V0TGluZVdpZHRoID0gZnVuY3Rpb24oZSl7IHJldHVybiB0aGlzLmxpbmVXaWR0aD1lOyB9XHJcbiAgdGhpcy5jb250ZXh0LnNldExpbmVDYXAgPSBmdW5jdGlvbihlKXsgcmV0dXJuIHRoaXMubGluZUNhcD1lOyB9XHJcbiAgdGhpcy5jb250ZXh0LnNldEZvbnRTaXplID0gZnVuY3Rpb24oZSl7IHJldHVybiB0aGlzLmZvbnQ9ZStcInB4IHNhbnMtc2VyaWZcIjsgfVxyXG4gIHRoaXMuY29udGV4dC5zZXRGaWxsU3R5bGUgPSBmdW5jdGlvbihlKXsgcmV0dXJuIHRoaXMuZmlsbFN0eWxlPWU7IH1cclxuICB0aGlzLmNvbnRleHQuZHJhdyA9IGZ1bmN0aW9uKCl7IH1cclxuICAqL1xyXG5cclxuICBvcHRzLmNoYXJ0RGF0YSA9IHt9O1xyXG4gIHRoaXMuZXZlbnQgPSBuZXcgRXZlbnQoKTtcclxuICB0aGlzLnNjcm9sbE9wdGlvbiA9IHtcclxuICAgIGN1cnJlbnRPZmZzZXQ6IDAsXHJcbiAgICBzdGFydFRvdWNoWDogMCxcclxuICAgIGRpc3RhbmNlOiAwLFxyXG4gICAgbGFzdE1vdmVUaW1lOiAwXHJcbiAgfTtcclxuXHJcbiAgdGhpcy5vcHRzID0gb3B0cztcclxuICB0aGlzLmNvbmZpZyA9IGNvbmZpZyQkMTtcclxuXHJcbiAgZHJhd0NoYXJ0cy5jYWxsKHRoaXMsIG9wdHMudHlwZSwgb3B0cywgY29uZmlnJCQxLCB0aGlzLmNvbnRleHQpO1xyXG59O1xyXG5cclxuQ2hhcnRzLnByb3RvdHlwZS51cGRhdGVEYXRhID0gZnVuY3Rpb24oKSB7XHJcbiAgbGV0IGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xyXG4gIHRoaXMub3B0cyA9IGFzc2lnbih7fSwgdGhpcy5vcHRzLCBkYXRhKTtcclxuICB0aGlzLm9wdHMudXBkYXRlRGF0YSA9IHRydWU7XHJcbiAgbGV0IHNjcm9sbFBvc2l0aW9uID0gZGF0YS5zY3JvbGxQb3NpdGlvbiB8fCAnY3VycmVudCc7XHJcbiAgc3dpdGNoIChzY3JvbGxQb3NpdGlvbikge1xyXG4gICAgY2FzZSAnY3VycmVudCc6XHJcbiAgICAgIHRoaXMub3B0cy5fc2Nyb2xsRGlzdGFuY2VfID0gdGhpcy5zY3JvbGxPcHRpb24uY3VycmVudE9mZnNldDtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdsZWZ0JzpcclxuICAgICAgdGhpcy5vcHRzLl9zY3JvbGxEaXN0YW5jZV8gPSAwO1xyXG4gICAgICB0aGlzLnNjcm9sbE9wdGlvbiA9IHtcclxuICAgICAgICBjdXJyZW50T2Zmc2V0OiAwLFxyXG4gICAgICAgIHN0YXJ0VG91Y2hYOiAwLFxyXG4gICAgICAgIGRpc3RhbmNlOiAwLFxyXG4gICAgICAgIGxhc3RNb3ZlVGltZTogMFxyXG4gICAgICB9O1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ3JpZ2h0JzpcclxuICAgICAgbGV0IF9jYWxZQXhpc0RhdGEgPSBjYWxZQXhpc0RhdGEodGhpcy5vcHRzLnNlcmllcywgdGhpcy5vcHRzLCB0aGlzLmNvbmZpZyksXHJcbiAgICAgICAgeUF4aXNXaWR0aCA9IF9jYWxZQXhpc0RhdGEueUF4aXNXaWR0aDtcclxuICAgICAgdGhpcy5jb25maWcueUF4aXNXaWR0aCA9IHlBeGlzV2lkdGg7XHJcbiAgICAgIGxldCBvZmZzZXRMZWZ0ID0gMDtcclxuICAgICAgbGV0IF9nZXRYQXhpc1BvaW50czAgPSBnZXRYQXhpc1BvaW50cyh0aGlzLm9wdHMuY2F0ZWdvcmllcywgdGhpcy5vcHRzLCB0aGlzLmNvbmZpZyksXHJcbiAgICAgICAgeEF4aXNQb2ludHMgPSBfZ2V0WEF4aXNQb2ludHMwLnhBeGlzUG9pbnRzLFxyXG4gICAgICAgIHN0YXJ0WCA9IF9nZXRYQXhpc1BvaW50czAuc3RhcnRYLFxyXG4gICAgICAgIGVuZFggPSBfZ2V0WEF4aXNQb2ludHMwLmVuZFgsXHJcbiAgICAgICAgZWFjaFNwYWNpbmcgPSBfZ2V0WEF4aXNQb2ludHMwLmVhY2hTcGFjaW5nO1xyXG4gICAgICBsZXQgdG90YWxXaWR0aCA9IGVhY2hTcGFjaW5nICogKHhBeGlzUG9pbnRzLmxlbmd0aCAtIDEpO1xyXG4gICAgICBsZXQgc2NyZWVuV2lkdGggPSBlbmRYIC0gc3RhcnRYO1xyXG4gICAgICBvZmZzZXRMZWZ0ID0gc2NyZWVuV2lkdGggLSB0b3RhbFdpZHRoO1xyXG4gICAgICB0aGlzLnNjcm9sbE9wdGlvbiA9IHtcclxuICAgICAgICBjdXJyZW50T2Zmc2V0OiBvZmZzZXRMZWZ0LFxyXG4gICAgICAgIHN0YXJ0VG91Y2hYOiBvZmZzZXRMZWZ0LFxyXG4gICAgICAgIGRpc3RhbmNlOiAwLFxyXG4gICAgICAgIGxhc3RNb3ZlVGltZTogMFxyXG4gICAgICB9O1xyXG4gICAgICB0aGlzLm9wdHMuX3Njcm9sbERpc3RhbmNlXyA9IG9mZnNldExlZnQ7XHJcbiAgICAgIGJyZWFrO1xyXG4gIH1cclxuICBkcmF3Q2hhcnRzLmNhbGwodGhpcywgdGhpcy5vcHRzLnR5cGUsIHRoaXMub3B0cywgdGhpcy5jb25maWcsIHRoaXMuY29udGV4dCk7XHJcbn07XHJcblxyXG5DaGFydHMucHJvdG90eXBlLnpvb20gPSBmdW5jdGlvbigpIHtcclxuICB2YXIgdmFsID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0aGlzLm9wdHMueEF4aXMuaXRlbUNvdW50O1xyXG4gIGlmICh0aGlzLm9wdHMuZW5hYmxlU2Nyb2xsICE9PSB0cnVlKSB7XHJcbiAgICBjb25zb2xlLmxvZygn6K+35ZCv55So5rua5Yqo5p2h5ZCO5L2/55So77yBJylcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLy/lvZPliY3lsY/luZXkuK3pl7TngrlcclxuICBsZXQgY2VudGVyUG9pbnQgPSBNYXRoLnJvdW5kKE1hdGguYWJzKHRoaXMuc2Nyb2xsT3B0aW9uLmN1cnJlbnRPZmZzZXQpIC8gdGhpcy5vcHRzLmNoYXJ0RGF0YS5lYWNoU3BhY2luZykgKyBNYXRoLnJvdW5kKFxyXG4gICAgdGhpcy5vcHRzLnhBeGlzLml0ZW1Db3VudCAvIDIpO1xyXG4gIHRoaXMub3B0cy5hbmltYXRpb24gPSBmYWxzZTtcclxuICB0aGlzLm9wdHMueEF4aXMuaXRlbUNvdW50ID0gdmFsLml0ZW1Db3VudDtcclxuICAvL+mHjeaWsOiuoeeul3jovbTlgY/np7vot53nprtcclxuICBsZXQgX2NhbFlBeGlzRGF0YSA9IGNhbFlBeGlzRGF0YSh0aGlzLm9wdHMuc2VyaWVzLCB0aGlzLm9wdHMsIHRoaXMuY29uZmlnKSxcclxuICAgIHlBeGlzV2lkdGggPSBfY2FsWUF4aXNEYXRhLnlBeGlzV2lkdGg7XHJcbiAgdGhpcy5jb25maWcueUF4aXNXaWR0aCA9IHlBeGlzV2lkdGg7XHJcbiAgbGV0IG9mZnNldExlZnQgPSAwO1xyXG4gIGxldCBfZ2V0WEF4aXNQb2ludHMwID0gZ2V0WEF4aXNQb2ludHModGhpcy5vcHRzLmNhdGVnb3JpZXMsIHRoaXMub3B0cywgdGhpcy5jb25maWcpLFxyXG4gICAgeEF4aXNQb2ludHMgPSBfZ2V0WEF4aXNQb2ludHMwLnhBeGlzUG9pbnRzLFxyXG4gICAgc3RhcnRYID0gX2dldFhBeGlzUG9pbnRzMC5zdGFydFgsXHJcbiAgICBlbmRYID0gX2dldFhBeGlzUG9pbnRzMC5lbmRYLFxyXG4gICAgZWFjaFNwYWNpbmcgPSBfZ2V0WEF4aXNQb2ludHMwLmVhY2hTcGFjaW5nO1xyXG4gIGxldCBjZW50ZXJMZWZ0ID0gZWFjaFNwYWNpbmcgKiBjZW50ZXJQb2ludDtcclxuICBsZXQgc2NyZWVuV2lkdGggPSBlbmRYIC0gc3RhcnRYO1xyXG4gIGxldCBNYXhMZWZ0ID0gc2NyZWVuV2lkdGggLSBlYWNoU3BhY2luZyAqICh4QXhpc1BvaW50cy5sZW5ndGggLSAxKTtcclxuICBvZmZzZXRMZWZ0ID0gc2NyZWVuV2lkdGggLyAyIC0gY2VudGVyTGVmdDtcclxuICBpZiAob2Zmc2V0TGVmdCA+IDApIHtcclxuICAgIG9mZnNldExlZnQgPSAwO1xyXG4gIH1cclxuICBpZiAob2Zmc2V0TGVmdCA8IE1heExlZnQpIHtcclxuICAgIG9mZnNldExlZnQgPSBNYXhMZWZ0O1xyXG4gIH1cclxuICB0aGlzLnNjcm9sbE9wdGlvbiA9IHtcclxuICAgIGN1cnJlbnRPZmZzZXQ6IG9mZnNldExlZnQsXHJcbiAgICBzdGFydFRvdWNoWDogb2Zmc2V0TGVmdCxcclxuICAgIGRpc3RhbmNlOiAwLFxyXG4gICAgbGFzdE1vdmVUaW1lOiAwXHJcbiAgfTtcclxuICB0aGlzLm9wdHMuX3Njcm9sbERpc3RhbmNlXyA9IG9mZnNldExlZnQ7XHJcbiAgZHJhd0NoYXJ0cy5jYWxsKHRoaXMsIHRoaXMub3B0cy50eXBlLCB0aGlzLm9wdHMsIHRoaXMuY29uZmlnLCB0aGlzLmNvbnRleHQpO1xyXG59O1xyXG5cclxuQ2hhcnRzLnByb3RvdHlwZS5zdG9wQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5hbmltYXRpb25JbnN0YW5jZSAmJiB0aGlzLmFuaW1hdGlvbkluc3RhbmNlLnN0b3AoKTtcclxufTtcclxuXHJcbkNoYXJ0cy5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XHJcbiAgdGhpcy5ldmVudC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKTtcclxufTtcclxuXHJcbkNoYXJ0cy5wcm90b3R5cGUuZ2V0Q3VycmVudERhdGFJbmRleCA9IGZ1bmN0aW9uKGUpIHtcclxuICB2YXIgdG91Y2hlcyA9IG51bGw7XHJcbiAgaWYgKGUuY2hhbmdlZFRvdWNoZXMpIHtcclxuICAgIHRvdWNoZXMgPSBlLmNoYW5nZWRUb3VjaGVzWzBdO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0b3VjaGVzID0gZS5tcC5jaGFuZ2VkVG91Y2hlc1swXTtcclxuICB9XHJcbiAgaWYgKHRvdWNoZXMpIHtcclxuICAgIGxldCBfdG91Y2hlcyQgPSBnZXRUb3VjaGVzKHRvdWNoZXMsIHRoaXMub3B0cywgZSk7XHJcbiAgICBpZiAodGhpcy5vcHRzLnR5cGUgPT09ICdwaWUnIHx8IHRoaXMub3B0cy50eXBlID09PSAncmluZycgfHwgdGhpcy5vcHRzLnR5cGUgPT09ICdyb3NlJykge1xyXG4gICAgICByZXR1cm4gZmluZFBpZUNoYXJ0Q3VycmVudEluZGV4KHtcclxuICAgICAgICB4OiBfdG91Y2hlcyQueCxcclxuICAgICAgICB5OiBfdG91Y2hlcyQueVxyXG4gICAgICB9LCB0aGlzLm9wdHMuY2hhcnREYXRhLnBpZURhdGEpO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLm9wdHMudHlwZSA9PT0gJ3JhZGFyJykge1xyXG4gICAgICByZXR1cm4gZmluZFJhZGFyQ2hhcnRDdXJyZW50SW5kZXgoe1xyXG4gICAgICAgIHg6IF90b3VjaGVzJC54LFxyXG4gICAgICAgIHk6IF90b3VjaGVzJC55XHJcbiAgICAgIH0sIHRoaXMub3B0cy5jaGFydERhdGEucmFkYXJEYXRhLCB0aGlzLm9wdHMuY2F0ZWdvcmllcy5sZW5ndGgpO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLm9wdHMudHlwZSA9PT0gJ2Z1bm5lbCcpIHtcclxuICAgICAgcmV0dXJuIGZpbmRGdW5uZWxDaGFydEN1cnJlbnRJbmRleCh7XHJcbiAgICAgICAgeDogX3RvdWNoZXMkLngsXHJcbiAgICAgICAgeTogX3RvdWNoZXMkLnlcclxuICAgICAgfSwgdGhpcy5vcHRzLmNoYXJ0RGF0YS5mdW5uZWxEYXRhKTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5vcHRzLnR5cGUgPT09ICdtYXAnKSB7XHJcbiAgICAgIHJldHVybiBmaW5kTWFwQ2hhcnRDdXJyZW50SW5kZXgoe1xyXG4gICAgICAgIHg6IF90b3VjaGVzJC54LFxyXG4gICAgICAgIHk6IF90b3VjaGVzJC55XHJcbiAgICAgIH0sIHRoaXMub3B0cyk7XHJcbiAgICB9ZWxzZSBpZiAodGhpcy5vcHRzLnR5cGUgPT09ICd3b3JkJykge1xyXG4gICAgICByZXR1cm4gZmluZFdvcmRDaGFydEN1cnJlbnRJbmRleCh7XHJcbiAgICAgICAgeDogX3RvdWNoZXMkLngsXHJcbiAgICAgICAgeTogX3RvdWNoZXMkLnlcclxuICAgICAgfSwgdGhpcy5vcHRzLmNoYXJ0RGF0YS53b3JkQ2xvdWREYXRhKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBmaW5kQ3VycmVudEluZGV4KHtcclxuICAgICAgICB4OiBfdG91Y2hlcyQueCxcclxuICAgICAgICB5OiBfdG91Y2hlcyQueVxyXG4gICAgICB9LCB0aGlzLm9wdHMuY2hhcnREYXRhLmNhbFBvaW50cywgdGhpcy5vcHRzLCB0aGlzLmNvbmZpZywgTWF0aC5hYnModGhpcy5zY3JvbGxPcHRpb24uY3VycmVudE9mZnNldCkpO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gLTE7XHJcbn07XHJcblxyXG5DaGFydHMucHJvdG90eXBlLmdldExlZ2VuZERhdGFJbmRleCA9IGZ1bmN0aW9uKGUpIHtcclxuICB2YXIgdG91Y2hlcyA9IG51bGw7XHJcbiAgaWYgKGUuY2hhbmdlZFRvdWNoZXMpIHtcclxuICAgIHRvdWNoZXMgPSBlLmNoYW5nZWRUb3VjaGVzWzBdO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0b3VjaGVzID0gZS5tcC5jaGFuZ2VkVG91Y2hlc1swXTtcclxuICB9XHJcbiAgaWYgKHRvdWNoZXMpIHtcclxuICAgIGxldCBfdG91Y2hlcyQgPSBnZXRUb3VjaGVzKHRvdWNoZXMsIHRoaXMub3B0cywgZSk7XHJcbiAgICByZXR1cm4gZmluZExlZ2VuZEluZGV4KHtcclxuICAgICAgeDogX3RvdWNoZXMkLngsXHJcbiAgICAgIHk6IF90b3VjaGVzJC55XHJcbiAgICB9LCB0aGlzLm9wdHMuY2hhcnREYXRhLmxlZ2VuZERhdGEpO1xyXG4gIH1cclxuICByZXR1cm4gLTE7XHJcbn07XHJcblxyXG5DaGFydHMucHJvdG90eXBlLnRvdWNoTGVnZW5kID0gZnVuY3Rpb24oZSkge1xyXG4gIHZhciBvcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xyXG4gIHZhciB0b3VjaGVzID0gbnVsbDtcclxuICBpZiAoZS5jaGFuZ2VkVG91Y2hlcykge1xyXG4gICAgdG91Y2hlcyA9IGUuY2hhbmdlZFRvdWNoZXNbMF07XHJcbiAgfSBlbHNlIHtcclxuICAgIHRvdWNoZXMgPSBlLm1wLmNoYW5nZWRUb3VjaGVzWzBdO1xyXG4gIH1cclxuICBpZiAodG91Y2hlcykge1xyXG4gICAgdmFyIF90b3VjaGVzJCA9IGdldFRvdWNoZXModG91Y2hlcywgdGhpcy5vcHRzLCBlKTtcclxuICAgIHZhciBpbmRleCA9IHRoaXMuZ2V0TGVnZW5kRGF0YUluZGV4KGUpO1xyXG4gICAgaWYgKGluZGV4ID49IDApIHtcclxuICAgICAgdGhpcy5vcHRzLnNlcmllc1tpbmRleF0uc2hvdyA9ICF0aGlzLm9wdHMuc2VyaWVzW2luZGV4XS5zaG93O1xyXG4gICAgICB0aGlzLm9wdHMuYW5pbWF0aW9uID0gb3B0aW9uLmFuaW1hdGlvbiA/IHRydWUgOiBmYWxzZTtcclxuXHRcdFx0dGhpcy5vcHRzLl9zY3JvbGxEaXN0YW5jZV89IHRoaXMuc2Nyb2xsT3B0aW9uLmN1cnJlbnRPZmZzZXQ7XHJcbiAgICAgIGRyYXdDaGFydHMuY2FsbCh0aGlzLCB0aGlzLm9wdHMudHlwZSwgdGhpcy5vcHRzLCB0aGlzLmNvbmZpZywgdGhpcy5jb250ZXh0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG59O1xyXG5cclxuQ2hhcnRzLnByb3RvdHlwZS5zaG93VG9vbFRpcCA9IGZ1bmN0aW9uKGUpIHtcclxuICB2YXIgb3B0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcclxuICB2YXIgdG91Y2hlcyA9IG51bGw7XHJcbiAgaWYgKGUuY2hhbmdlZFRvdWNoZXMpIHtcclxuICAgIHRvdWNoZXMgPSBlLmNoYW5nZWRUb3VjaGVzWzBdO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0b3VjaGVzID0gZS5tcC5jaGFuZ2VkVG91Y2hlc1swXTtcclxuICB9XHJcbiAgaWYgKCF0b3VjaGVzKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcInRvdWNoRXJyb3JcIik7XHJcbiAgfVxyXG4gIHZhciBfdG91Y2hlcyQgPSBnZXRUb3VjaGVzKHRvdWNoZXMsIHRoaXMub3B0cywgZSk7XHJcbiAgdmFyIGN1cnJlbnRPZmZzZXQgPSB0aGlzLnNjcm9sbE9wdGlvbi5jdXJyZW50T2Zmc2V0O1xyXG4gIHZhciBvcHRzID0gYXNzaWduKHt9LCB0aGlzLm9wdHMsIHtcclxuICAgIF9zY3JvbGxEaXN0YW5jZV86IGN1cnJlbnRPZmZzZXQsXHJcbiAgICBhbmltYXRpb246IGZhbHNlXHJcbiAgfSk7XHJcbiAgaWYgKHRoaXMub3B0cy50eXBlID09PSAnbGluZScgfHwgdGhpcy5vcHRzLnR5cGUgPT09ICdhcmVhJyB8fCB0aGlzLm9wdHMudHlwZSA9PT0gJ2NvbHVtbicpIHtcclxuICAgIHZhciBpbmRleCA9IG9wdGlvbi5pbmRleD09dW5kZWZpbmVkPyB0aGlzLmdldEN1cnJlbnREYXRhSW5kZXgoZSk6b3B0aW9uLmluZGV4IDtcclxuICAgIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICAgIHZhciBzZXJpZXNEYXRhID0gZ2V0U2VyaWVzRGF0YUl0ZW0odGhpcy5vcHRzLnNlcmllcywgaW5kZXgpO1xyXG4gICAgICBpZiAoc2VyaWVzRGF0YS5sZW5ndGggIT09IDApIHtcclxuICAgICAgICB2YXIgX2dldFRvb2xUaXBEYXRhID0gZ2V0VG9vbFRpcERhdGEoc2VyaWVzRGF0YSwgdGhpcy5vcHRzLmNoYXJ0RGF0YS5jYWxQb2ludHMsIGluZGV4LCB0aGlzLm9wdHMuY2F0ZWdvcmllcyxvcHRpb24pLFxyXG4gICAgICAgICAgdGV4dExpc3QgPSBfZ2V0VG9vbFRpcERhdGEudGV4dExpc3QsXHJcbiAgICAgICAgICBvZmZzZXQgPSBfZ2V0VG9vbFRpcERhdGEub2Zmc2V0O1xyXG4gICAgICAgIG9mZnNldC55ID0gX3RvdWNoZXMkLnk7XHJcbiAgICAgICAgb3B0cy50b29sdGlwID0ge1xyXG4gICAgICAgICAgdGV4dExpc3Q6IG9wdGlvbi50ZXh0TGlzdD9vcHRpb24udGV4dExpc3Q6dGV4dExpc3QsXHJcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcclxuICAgICAgICAgIG9wdGlvbjogb3B0aW9uLFxyXG4gICAgICAgICAgaW5kZXg6IGluZGV4XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZHJhd0NoYXJ0cy5jYWxsKHRoaXMsIG9wdHMudHlwZSwgb3B0cywgdGhpcy5jb25maWcsIHRoaXMuY29udGV4dCk7XHJcbiAgfVxyXG4gIGlmICh0aGlzLm9wdHMudHlwZSA9PT0gJ21peCcpIHtcclxuICAgIHZhciBpbmRleCA9IG9wdGlvbi5pbmRleD09dW5kZWZpbmVkPyB0aGlzLmdldEN1cnJlbnREYXRhSW5kZXgoZSk6b3B0aW9uLmluZGV4IDtcclxuICAgIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gdGhpcy5zY3JvbGxPcHRpb24uY3VycmVudE9mZnNldDtcclxuICAgICAgdmFyIG9wdHMgPSBhc3NpZ24oe30sIHRoaXMub3B0cywge1xyXG4gICAgICAgIF9zY3JvbGxEaXN0YW5jZV86IGN1cnJlbnRPZmZzZXQsXHJcbiAgICAgICAgYW5pbWF0aW9uOiBmYWxzZVxyXG4gICAgICB9KTtcclxuICAgICAgdmFyIHNlcmllc0RhdGEgPSBnZXRTZXJpZXNEYXRhSXRlbSh0aGlzLm9wdHMuc2VyaWVzLCBpbmRleCk7XHJcbiAgICAgIGlmIChzZXJpZXNEYXRhLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgIHZhciBfZ2V0TWl4VG9vbFRpcERhdGEgPSBnZXRNaXhUb29sVGlwRGF0YShzZXJpZXNEYXRhLCB0aGlzLm9wdHMuY2hhcnREYXRhLmNhbFBvaW50cywgaW5kZXgsIHRoaXMub3B0cy5jYXRlZ29yaWVzLG9wdGlvbiksXHJcbiAgICAgICAgICB0ZXh0TGlzdCA9IF9nZXRNaXhUb29sVGlwRGF0YS50ZXh0TGlzdCxcclxuICAgICAgICAgIG9mZnNldCA9IF9nZXRNaXhUb29sVGlwRGF0YS5vZmZzZXQ7XHJcbiAgICAgICAgb2Zmc2V0LnkgPSBfdG91Y2hlcyQueTtcclxuICAgICAgICBvcHRzLnRvb2x0aXAgPSB7XHJcbiAgICAgICAgICB0ZXh0TGlzdDogb3B0aW9uLnRleHRMaXN0P29wdGlvbi50ZXh0TGlzdDp0ZXh0TGlzdCxcclxuICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxyXG4gICAgICAgICAgb3B0aW9uOiBvcHRpb24sXHJcbiAgICAgICAgICBpbmRleDogaW5kZXhcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBkcmF3Q2hhcnRzLmNhbGwodGhpcywgb3B0cy50eXBlLCBvcHRzLCB0aGlzLmNvbmZpZywgdGhpcy5jb250ZXh0KTtcclxuICB9XHJcbiAgaWYgKHRoaXMub3B0cy50eXBlID09PSAnY2FuZGxlJykge1xyXG4gICAgdmFyIGluZGV4ID0gb3B0aW9uLmluZGV4PT11bmRlZmluZWQ/IHRoaXMuZ2V0Q3VycmVudERhdGFJbmRleChlKTpvcHRpb24uaW5kZXggO1xyXG4gICAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgICAgdmFyIGN1cnJlbnRPZmZzZXQgPSB0aGlzLnNjcm9sbE9wdGlvbi5jdXJyZW50T2Zmc2V0O1xyXG4gICAgICB2YXIgb3B0cyA9IGFzc2lnbih7fSwgdGhpcy5vcHRzLCB7XHJcbiAgICAgICAgX3Njcm9sbERpc3RhbmNlXzogY3VycmVudE9mZnNldCxcclxuICAgICAgICBhbmltYXRpb246IGZhbHNlXHJcbiAgICAgIH0pO1xyXG4gICAgICB2YXIgc2VyaWVzRGF0YSA9IGdldFNlcmllc0RhdGFJdGVtKHRoaXMub3B0cy5zZXJpZXMsIGluZGV4KTtcclxuICAgICAgaWYgKHNlcmllc0RhdGEubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgdmFyIF9nZXRUb29sVGlwRGF0YSA9IGdldENhbmRsZVRvb2xUaXBEYXRhKHRoaXMub3B0cy5zZXJpZXNbMF0uZGF0YSwgc2VyaWVzRGF0YSwgdGhpcy5vcHRzLmNoYXJ0RGF0YS5jYWxQb2ludHMsXHJcbiAgICAgICAgICAgIGluZGV4LCB0aGlzLm9wdHMuY2F0ZWdvcmllcywgdGhpcy5vcHRzLmV4dHJhLmNhbmRsZSwgb3B0aW9uKSxcclxuICAgICAgICAgIHRleHRMaXN0ID0gX2dldFRvb2xUaXBEYXRhLnRleHRMaXN0LFxyXG4gICAgICAgICAgb2Zmc2V0ID0gX2dldFRvb2xUaXBEYXRhLm9mZnNldDtcclxuICAgICAgICBvZmZzZXQueSA9IF90b3VjaGVzJC55O1xyXG4gICAgICAgIG9wdHMudG9vbHRpcCA9IHtcclxuICAgICAgICAgIHRleHRMaXN0OiBvcHRpb24udGV4dExpc3Q/b3B0aW9uLnRleHRMaXN0OnRleHRMaXN0LFxyXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXHJcbiAgICAgICAgICBvcHRpb246IG9wdGlvbixcclxuICAgICAgICAgIGluZGV4OiBpbmRleFxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGRyYXdDaGFydHMuY2FsbCh0aGlzLCBvcHRzLnR5cGUsIG9wdHMsIHRoaXMuY29uZmlnLCB0aGlzLmNvbnRleHQpO1xyXG4gIH1cclxuICBpZiAodGhpcy5vcHRzLnR5cGUgPT09ICdwaWUnIHx8IHRoaXMub3B0cy50eXBlID09PSAncmluZycgfHwgdGhpcy5vcHRzLnR5cGUgPT09ICdyb3NlJ3x8dGhpcy5vcHRzLnR5cGUgPT09ICdmdW5uZWwnICkge1xyXG4gICAgdmFyIGluZGV4ID0gb3B0aW9uLmluZGV4PT11bmRlZmluZWQ/IHRoaXMuZ2V0Q3VycmVudERhdGFJbmRleChlKTpvcHRpb24uaW5kZXggO1xyXG4gICAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgICAgdmFyIGN1cnJlbnRPZmZzZXQgPSB0aGlzLnNjcm9sbE9wdGlvbi5jdXJyZW50T2Zmc2V0O1xyXG4gICAgICB2YXIgb3B0cyA9IGFzc2lnbih7fSwgdGhpcy5vcHRzLCB7XHJcbiAgICAgICAgX3Njcm9sbERpc3RhbmNlXzogY3VycmVudE9mZnNldCxcclxuICAgICAgICBhbmltYXRpb246IGZhbHNlXHJcbiAgICAgIH0pO1xyXG4gICAgICB2YXIgc2VyaWVzRGF0YSA9IHRoaXMub3B0cy5fc2VyaWVzX1tpbmRleF07XHJcbiAgICAgIHZhciB0ZXh0TGlzdCA9IFt7XHJcbiAgICAgICAgdGV4dDogb3B0aW9uLmZvcm1hdCA/IG9wdGlvbi5mb3JtYXQoc2VyaWVzRGF0YSkgOiBzZXJpZXNEYXRhLm5hbWUgKyAnOiAnICsgc2VyaWVzRGF0YS5kYXRhLFxyXG4gICAgICAgIGNvbG9yOiBzZXJpZXNEYXRhLmNvbG9yXHJcbiAgICAgIH1dO1xyXG4gICAgICB2YXIgb2Zmc2V0ID0ge1xyXG4gICAgICAgIHg6IF90b3VjaGVzJC54LFxyXG4gICAgICAgIHk6IF90b3VjaGVzJC55XHJcbiAgICAgIH07XHJcbiAgICAgIG9wdHMudG9vbHRpcCA9IHtcclxuICAgICAgICB0ZXh0TGlzdDogb3B0aW9uLnRleHRMaXN0P29wdGlvbi50ZXh0TGlzdDp0ZXh0TGlzdCxcclxuICAgICAgICBvZmZzZXQ6IG9mZnNldCxcclxuICAgICAgICBvcHRpb246IG9wdGlvbixcclxuICAgICAgICBpbmRleDogaW5kZXhcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGRyYXdDaGFydHMuY2FsbCh0aGlzLCBvcHRzLnR5cGUsIG9wdHMsIHRoaXMuY29uZmlnLCB0aGlzLmNvbnRleHQpO1xyXG4gIH1cclxuICBpZiAodGhpcy5vcHRzLnR5cGUgPT09ICdtYXAnfHx0aGlzLm9wdHMudHlwZSA9PT0gJ3dvcmQnKSB7XHJcbiAgICB2YXIgaW5kZXggPSBvcHRpb24uaW5kZXg9PXVuZGVmaW5lZD8gdGhpcy5nZXRDdXJyZW50RGF0YUluZGV4KGUpOm9wdGlvbi5pbmRleCA7XHJcbiAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICB2YXIgY3VycmVudE9mZnNldCA9IHRoaXMuc2Nyb2xsT3B0aW9uLmN1cnJlbnRPZmZzZXQ7XHJcbiAgICAgIHZhciBvcHRzID0gYXNzaWduKHt9LCB0aGlzLm9wdHMsIHtcclxuICAgICAgICBfc2Nyb2xsRGlzdGFuY2VfOiBjdXJyZW50T2Zmc2V0LFxyXG4gICAgICAgIGFuaW1hdGlvbjogZmFsc2VcclxuICAgICAgfSk7XHJcbiAgICAgIHZhciBzZXJpZXNEYXRhID0gdGhpcy5vcHRzLl9zZXJpZXNfW2luZGV4XTtcclxuICAgICAgdmFyIHRleHRMaXN0ID0gW3tcclxuICAgICAgICB0ZXh0OiBvcHRpb24uZm9ybWF0ID8gb3B0aW9uLmZvcm1hdChzZXJpZXNEYXRhKSA6IHNlcmllc0RhdGEucHJvcGVydGllcy5uYW1lICxcclxuICAgICAgICBjb2xvcjogc2VyaWVzRGF0YS5jb2xvclxyXG4gICAgICB9XTtcclxuICAgICAgdmFyIG9mZnNldCA9IHtcclxuICAgICAgICB4OiBfdG91Y2hlcyQueCxcclxuICAgICAgICB5OiBfdG91Y2hlcyQueVxyXG4gICAgICB9O1xyXG4gICAgICBvcHRzLnRvb2x0aXAgPSB7XHJcbiAgICAgICAgdGV4dExpc3Q6IG9wdGlvbi50ZXh0TGlzdD9vcHRpb24udGV4dExpc3Q6dGV4dExpc3QsXHJcbiAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXHJcbiAgICAgICAgb3B0aW9uOiBvcHRpb24sXHJcbiAgICAgICAgaW5kZXg6IGluZGV4XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBvcHRzLnVwZGF0ZURhdGEgPSBmYWxzZTtcclxuICAgIGRyYXdDaGFydHMuY2FsbCh0aGlzLCBvcHRzLnR5cGUsIG9wdHMsIHRoaXMuY29uZmlnLCB0aGlzLmNvbnRleHQpO1xyXG4gIH1cclxuICBpZiAodGhpcy5vcHRzLnR5cGUgPT09ICdyYWRhcicpIHtcclxuICAgIHZhciBpbmRleCA9IG9wdGlvbi5pbmRleD09dW5kZWZpbmVkPyB0aGlzLmdldEN1cnJlbnREYXRhSW5kZXgoZSk6b3B0aW9uLmluZGV4IDtcclxuICAgIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gdGhpcy5zY3JvbGxPcHRpb24uY3VycmVudE9mZnNldDtcclxuICAgICAgdmFyIG9wdHMgPSBhc3NpZ24oe30sIHRoaXMub3B0cywge1xyXG4gICAgICAgIF9zY3JvbGxEaXN0YW5jZV86IGN1cnJlbnRPZmZzZXQsXHJcbiAgICAgICAgYW5pbWF0aW9uOiBmYWxzZVxyXG4gICAgICB9KTtcclxuICAgICAgdmFyIHNlcmllc0RhdGEgPSBnZXRTZXJpZXNEYXRhSXRlbSh0aGlzLm9wdHMuc2VyaWVzLCBpbmRleCk7XHJcbiAgICAgIGlmIChzZXJpZXNEYXRhLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgIHZhciB0ZXh0TGlzdCA9IHNlcmllc0RhdGEubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHRleHQ6IG9wdGlvbi5mb3JtYXQgPyBvcHRpb24uZm9ybWF0KGl0ZW0pIDogaXRlbS5uYW1lICsgJzogJyArIGl0ZW0uZGF0YSxcclxuICAgICAgICAgICAgY29sb3I6IGl0ZW0uY29sb3JcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIG9mZnNldCA9IHtcclxuICAgICAgICAgIHg6IF90b3VjaGVzJC54LFxyXG4gICAgICAgICAgeTogX3RvdWNoZXMkLnlcclxuICAgICAgICB9O1xyXG4gICAgICAgIG9wdHMudG9vbHRpcCA9IHtcclxuICAgICAgICAgIHRleHRMaXN0OiBvcHRpb24udGV4dExpc3Q/b3B0aW9uLnRleHRMaXN0OnRleHRMaXN0LFxyXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXHJcbiAgICAgICAgICBvcHRpb246IG9wdGlvbixcclxuICAgICAgICAgIGluZGV4OiBpbmRleFxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGRyYXdDaGFydHMuY2FsbCh0aGlzLCBvcHRzLnR5cGUsIG9wdHMsIHRoaXMuY29uZmlnLCB0aGlzLmNvbnRleHQpO1xyXG4gIH1cclxufTtcclxuXHJcbkNoYXJ0cy5wcm90b3R5cGUudHJhbnNsYXRlID0gZnVuY3Rpb24oZGlzdGFuY2UpIHtcclxuICB0aGlzLnNjcm9sbE9wdGlvbiA9IHtcclxuICAgIGN1cnJlbnRPZmZzZXQ6IGRpc3RhbmNlLFxyXG4gICAgc3RhcnRUb3VjaFg6IGRpc3RhbmNlLFxyXG4gICAgZGlzdGFuY2U6IDAsXHJcbiAgICBsYXN0TW92ZVRpbWU6IDBcclxuICB9O1xyXG4gIGxldCBvcHRzID0gYXNzaWduKHt9LCB0aGlzLm9wdHMsIHtcclxuICAgIF9zY3JvbGxEaXN0YW5jZV86IGRpc3RhbmNlLFxyXG4gICAgYW5pbWF0aW9uOiBmYWxzZVxyXG4gIH0pO1xyXG4gIGRyYXdDaGFydHMuY2FsbCh0aGlzLCB0aGlzLm9wdHMudHlwZSwgb3B0cywgdGhpcy5jb25maWcsIHRoaXMuY29udGV4dCk7XHJcbn07XHJcblxyXG5DaGFydHMucHJvdG90eXBlLnNjcm9sbFN0YXJ0ID0gZnVuY3Rpb24oZSkge1xyXG4gIHZhciB0b3VjaGVzID0gbnVsbDtcclxuICBpZiAoZS5jaGFuZ2VkVG91Y2hlcykge1xyXG4gICAgdG91Y2hlcyA9IGUuY2hhbmdlZFRvdWNoZXNbMF07XHJcbiAgfSBlbHNlIHtcclxuICAgIHRvdWNoZXMgPSBlLm1wLmNoYW5nZWRUb3VjaGVzWzBdO1xyXG4gIH1cclxuICB2YXIgX3RvdWNoZXMkID0gZ2V0VG91Y2hlcyh0b3VjaGVzLCB0aGlzLm9wdHMsIGUpO1xyXG4gIGlmICh0b3VjaGVzICYmIHRoaXMub3B0cy5lbmFibGVTY3JvbGwgPT09IHRydWUpIHtcclxuICAgIHRoaXMuc2Nyb2xsT3B0aW9uLnN0YXJ0VG91Y2hYID0gX3RvdWNoZXMkLng7XHJcbiAgfVxyXG59O1xyXG5cclxuQ2hhcnRzLnByb3RvdHlwZS5zY3JvbGwgPSBmdW5jdGlvbihlKSB7XHJcbiAgaWYgKHRoaXMuc2Nyb2xsT3B0aW9uLmxhc3RNb3ZlVGltZSA9PT0gMCkge1xyXG4gICAgdGhpcy5zY3JvbGxPcHRpb24ubGFzdE1vdmVUaW1lID0gRGF0ZS5ub3coKTtcclxuICB9XHJcbiAgbGV0IExpbWl0ID0gdGhpcy5vcHRzLmV4dHJhLnRvdWNoTW92ZUxpbWl0IHx8IDIwO1xyXG4gIGxldCBjdXJyTW92ZVRpbWUgPSBEYXRlLm5vdygpO1xyXG4gIGxldCBkdXJhdGlvbiA9IGN1cnJNb3ZlVGltZSAtIHRoaXMuc2Nyb2xsT3B0aW9uLmxhc3RNb3ZlVGltZTtcclxuICBpZiAoZHVyYXRpb24gPCBNYXRoLmZsb29yKDEwMDAgLyBMaW1pdCkpIHJldHVybjtcclxuICB0aGlzLnNjcm9sbE9wdGlvbi5sYXN0TW92ZVRpbWUgPSBjdXJyTW92ZVRpbWU7XHJcbiAgdmFyIHRvdWNoZXMgPSBudWxsO1xyXG4gIGlmIChlLmNoYW5nZWRUb3VjaGVzKSB7XHJcbiAgICB0b3VjaGVzID0gZS5jaGFuZ2VkVG91Y2hlc1swXTtcclxuICB9IGVsc2Uge1xyXG4gICAgdG91Y2hlcyA9IGUubXAuY2hhbmdlZFRvdWNoZXNbMF07XHJcbiAgfVxyXG4gIGlmICh0b3VjaGVzICYmIHRoaXMub3B0cy5lbmFibGVTY3JvbGwgPT09IHRydWUpIHtcclxuICAgIHZhciBfdG91Y2hlcyQgPSBnZXRUb3VjaGVzKHRvdWNoZXMsIHRoaXMub3B0cywgZSk7XHJcbiAgICB2YXIgX2Rpc3RhbmNlO1xyXG4gICAgX2Rpc3RhbmNlID0gX3RvdWNoZXMkLnggLSB0aGlzLnNjcm9sbE9wdGlvbi5zdGFydFRvdWNoWDtcclxuICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gdGhpcy5zY3JvbGxPcHRpb24uY3VycmVudE9mZnNldDtcclxuICAgIHZhciB2YWxpZERpc3RhbmNlID0gY2FsVmFsaWREaXN0YW5jZSh0aGlzLGN1cnJlbnRPZmZzZXQgKyBfZGlzdGFuY2UsIHRoaXMub3B0cy5jaGFydERhdGEsIHRoaXMuY29uZmlnLCB0aGlzLm9wdHMpO1xyXG4gICAgdGhpcy5zY3JvbGxPcHRpb24uZGlzdGFuY2UgPSBfZGlzdGFuY2UgPSB2YWxpZERpc3RhbmNlIC0gY3VycmVudE9mZnNldDtcclxuICAgIHZhciBvcHRzID0gYXNzaWduKHt9LCB0aGlzLm9wdHMsIHtcclxuICAgICAgX3Njcm9sbERpc3RhbmNlXzogY3VycmVudE9mZnNldCArIF9kaXN0YW5jZSxcclxuICAgICAgYW5pbWF0aW9uOiBmYWxzZVxyXG4gICAgfSk7XHJcbiAgICBkcmF3Q2hhcnRzLmNhbGwodGhpcywgb3B0cy50eXBlLCBvcHRzLCB0aGlzLmNvbmZpZywgdGhpcy5jb250ZXh0KTtcclxuICAgIHJldHVybiBjdXJyZW50T2Zmc2V0ICsgX2Rpc3RhbmNlO1xyXG4gIH1cclxufTtcclxuXHJcbkNoYXJ0cy5wcm90b3R5cGUuc2Nyb2xsRW5kID0gZnVuY3Rpb24oZSkge1xyXG4gIGlmICh0aGlzLm9wdHMuZW5hYmxlU2Nyb2xsID09PSB0cnVlKSB7XHJcbiAgICB2YXIgX3Njcm9sbE9wdGlvbiA9IHRoaXMuc2Nyb2xsT3B0aW9uLFxyXG4gICAgICBjdXJyZW50T2Zmc2V0ID0gX3Njcm9sbE9wdGlvbi5jdXJyZW50T2Zmc2V0LFxyXG4gICAgICBkaXN0YW5jZSA9IF9zY3JvbGxPcHRpb24uZGlzdGFuY2U7XHJcbiAgICB0aGlzLnNjcm9sbE9wdGlvbi5jdXJyZW50T2Zmc2V0ID0gY3VycmVudE9mZnNldCArIGRpc3RhbmNlO1xyXG4gICAgdGhpcy5zY3JvbGxPcHRpb24uZGlzdGFuY2UgPSAwO1xyXG4gIH1cclxufTtcclxuaWYgKHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiKSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBDaGFydHM7XHJcbiAgLy9leHBvcnQgZGVmYXVsdCBDaGFydHM7Ly/lu7rorq7kvb/nlKhub2RlanPnmoRtb2R1bGXlr7zlh7rmlrnlvI/vvIzlpoLmiqXplJnor7fkvb/nlKhleHBvcnTmlrnlvI/lr7zlh7pcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/*!***************************************************************!*\
  !*** D:/GitProject/kabu/components/uni-segmented-control.vue ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _uni_segmented_control_vue_vue_type_template_id_3e12d15a_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./uni-segmented-control.vue?vue&type=template&id=3e12d15a&scoped=true& */ 10);\n/* harmony import */ var _uni_segmented_control_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./uni-segmented-control.vue?vue&type=script&lang=js& */ 12);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _uni_segmented_control_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _uni_segmented_control_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js */ 14);\n\nvar renderjs\n\n\n\n\n/* normalize component */\n\nvar component = Object(_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _uni_segmented_control_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _uni_segmented_control_vue_vue_type_template_id_3e12d15a_scoped_true___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _uni_segmented_control_vue_vue_type_template_id_3e12d15a_scoped_true___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  \"3e12d15a\",\n  null,\n  false,\n  _uni_segmented_control_vue_vue_type_template_id_3e12d15a_scoped_true___WEBPACK_IMPORTED_MODULE_0__[\"components\"],\n  renderjs\n)\n\ncomponent.options.__file = \"components/uni-segmented-control.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBOEk7QUFDOUk7QUFDeUU7QUFDTDs7O0FBR3BFO0FBQ21NO0FBQ25NLGdCQUFnQix3TUFBVTtBQUMxQixFQUFFLDJGQUFNO0FBQ1IsRUFBRSw0R0FBTTtBQUNSLEVBQUUscUhBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsZ0hBQVU7QUFDWjtBQUNBOztBQUVBO0FBQ2UsZ0YiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zLCByZWN5Y2xhYmxlUmVuZGVyLCBjb21wb25lbnRzIH0gZnJvbSBcIi4vdW5pLXNlZ21lbnRlZC1jb250cm9sLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zZTEyZDE1YSZzY29wZWQ9dHJ1ZSZcIlxudmFyIHJlbmRlcmpzXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL3VuaS1zZWdtZW50ZWQtY29udHJvbC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL3VuaS1zZWdtZW50ZWQtY29udHJvbC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIUU6XFxcXOW8gOWPkVxcXFxIQnVpbGRlclguMi43LjkuMjAyMDA1MjdcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx2dWUtbG9hZGVyXFxcXGxpYlxcXFxydW50aW1lXFxcXGNvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjNlMTJkMTVhXCIsXG4gIG51bGwsXG4gIGZhbHNlLFxuICBjb21wb25lbnRzLFxuICByZW5kZXJqc1xuKVxuXG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcImNvbXBvbmVudHMvdW5pLXNlZ21lbnRlZC1jb250cm9sLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/*!**********************************************************************************************************!*\
  !*** D:/GitProject/kabu/components/uni-segmented-control.vue?vue&type=template&id=3e12d15a&scoped=true& ***!
  \**********************************************************************************************************/
/*! exports provided: render, staticRenderFns, recyclableRender, components */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_uni_segmented_control_vue_vue_type_template_id_3e12d15a_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--10-0!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/filter-modules-template.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./uni-segmented-control.vue?vue&type=template&id=3e12d15a&scoped=true& */ 11);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_uni_segmented_control_vue_vue_type_template_id_3e12d15a_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_uni_segmented_control_vue_vue_type_template_id_3e12d15a_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "recyclableRender", function() { return _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_uni_segmented_control_vue_vue_type_template_id_3e12d15a_scoped_true___WEBPACK_IMPORTED_MODULE_0__["recyclableRender"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "components", function() { return _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_uni_segmented_control_vue_vue_type_template_id_3e12d15a_scoped_true___WEBPACK_IMPORTED_MODULE_0__["components"]; });



/***/ }),
/* 11 */
/*!**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--10-0!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/filter-modules-template.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!D:/GitProject/kabu/components/uni-segmented-control.vue?vue&type=template&id=3e12d15a&scoped=true& ***!

/*! exports provided: render, staticRenderFns, recyclableRender, components */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "recyclableRender", function() { return recyclableRender; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "components", function() { return components; });
var components
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "view",
    {
      staticClass: _vm._$s(0, "sc", "segmented-control"),
      class: _vm._$s(0, "c", [
        _vm.styleType === "text"
          ? "segmented-control--text"
          : "segmented-control--button"
      ]),
      style: _vm._$s(0, "s", {
        borderColor: _vm.styleType === "text" ? "" : _vm.activeColor
      }),
      attrs: { _i: 0 }
    },
    _vm._l(_vm._$s(1, "f", { forItems: _vm.values }), function(
      item,
      index,
      $20,
      $30
    ) {
      return _c(
        "view",
        {
          key: _vm._$s(1, "f", { forIndex: $20, key: index }),
          staticClass: _vm._$s("1-" + $30, "sc", "segmented-control__item"),
          class: _vm._$s("1-" + $30, "c", [
            _vm.styleType === "text"
              ? "segmented-control__item--text"
              : "segmented-control__item--button",
            index === _vm.currentIndex && _vm.styleType === "button"
              ? "segmented-control__item--button--active"
              : "",
            index === 0 && _vm.styleType === "button"
              ? "segmented-control__item--button--first"
              : "",
            index === _vm.values.length - 1 && _vm.styleType === "button"
              ? "segmented-control__item--button--last"
              : ""
          ]),
          style: _vm._$s("1-" + $30, "s", {
            backgroundColor:
              index === _vm.currentIndex && _vm.styleType === "button"
                ? _vm.activeColor
                : "",
            borderColor:
              (index === _vm.currentIndex && _vm.styleType === "text") ||
              _vm.styleType === "button"
                ? _vm.activeColor
                : "transparent"
          }),
          attrs: { _i: "1-" + $30 },
          on: {
            click: function($event) {
              return _vm._onClick(index)
            }
          }
        },
        [
          _c(
            "text",
            {
              staticClass: _vm._$s("2-" + $30, "sc", "segmented-control__text"),
              style: _vm._$s("2-" + $30, "s", {
                color:
                  index === _vm.currentIndex
                    ? _vm.styleType === "text"
                      ? _vm.activeColor
                      : "#fff"
                    : _vm.styleType === "text"
                    ? "#000"
                    : _vm.activeColor
              }),
              attrs: { _i: "2-" + $30 }
            },
            [_vm._v(_vm._$s("2-" + $30, "t0-0", _vm._s(item)))]
          )
        ]
      )
    }),
    0
  )
}
var recyclableRender = false
var staticRenderFns = []
render._withStripped = true



/***/ }),
/* 12 */
/*!****************************************************************************************!*\
  !*** D:/GitProject/kabu/components/uni-segmented-control.vue?vue&type=script&lang=js& ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_uni_segmented_control_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./uni-segmented-control.vue?vue&type=script&lang=js& */ 13);\n/* harmony import */ var _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_uni_segmented_control_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_uni_segmented_control_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_uni_segmented_control_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_uni_segmented_control_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_uni_segmented_control_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQXdxQixDQUFnQix1ckJBQUcsRUFBQyIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2QgZnJvbSBcIi0hRTpcXFxc5byA5Y+RXFxcXEhCdWlsZGVyWC4yLjcuOS4yMDIwMDUyN1xcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxiYWJlbC1sb2FkZXJcXFxcbGliXFxcXGluZGV4LmpzIUU6XFxcXOW8gOWPkVxcXFxIQnVpbGRlclguMi43LjkuMjAyMDA1MjdcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx3ZWJwYWNrLXByZXByb2Nlc3MtbG9hZGVyXFxcXGluZGV4LmpzPz9yZWYtLTYtMSFFOlxcXFzlvIDlj5FcXFxcSEJ1aWxkZXJYLjIuNy45LjIwMjAwNTI3XFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay11bmktYXBwLWxvYWRlclxcXFx1c2luZy1jb21wb25lbnRzLmpzIUU6XFxcXOW8gOWPkVxcXFxIQnVpbGRlclguMi43LjkuMjAyMDA1MjdcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx2dWUtbG9hZGVyXFxcXGxpYlxcXFxpbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vdW5pLXNlZ21lbnRlZC1jb250cm9sLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSFFOlxcXFzlvIDlj5FcXFxcSEJ1aWxkZXJYLjIuNy45LjIwMjAwNTI3XFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXGJhYmVsLWxvYWRlclxcXFxsaWJcXFxcaW5kZXguanMhRTpcXFxc5byA5Y+RXFxcXEhCdWlsZGVyWC4yLjcuOS4yMDIwMDUyN1xcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHdlYnBhY2stcHJlcHJvY2Vzcy1sb2FkZXJcXFxcaW5kZXguanM/P3JlZi0tNi0xIUU6XFxcXOW8gOWPkVxcXFxIQnVpbGRlclguMi43LjkuMjAyMDA1MjdcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx3ZWJwYWNrLXVuaS1hcHAtbG9hZGVyXFxcXHVzaW5nLWNvbXBvbmVudHMuanMhRTpcXFxc5byA5Y+RXFxcXEhCdWlsZGVyWC4yLjcuOS4yMDIwMDUyN1xcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHZ1ZS1sb2FkZXJcXFxcbGliXFxcXGluZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi91bmktc2VnbWVudGVkLWNvbnRyb2wudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!D:/GitProject/kabu/components/uni-segmented-control.vue?vue&type=script&lang=js& ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/**\n * SegmentedControl 分段器\n * @description 用作不同视图的显示\n * @tutorial https://ext.dcloud.net.cn/plugin?id=54\n * @property {Number} current 当前选中的tab索引值，从0计数\n * @property {String} styleType = [button|text] 分段器样式类型\n * \t@value button 按钮类型\n * \t@value text 文字类型\n * @property {String} activeColor 选中的标签背景色与边框颜色\n * @property {Array} values 选项数组\n * @event {Function} clickItem 组件触发点击事件时触发，e={currentIndex}\n */var _default2 =\n\n{\n  name: 'UniSegmentedControl',\n  props: {\n    current: {\n      type: Number,\n      default: 0 },\n\n    values: {\n      type: Array,\n      default: function _default() {\n        return [];\n      } },\n\n    activeColor: {\n      type: String,\n      default: '#007aff' },\n\n    styleType: {\n      type: String,\n      default: 'button' } },\n\n\n  data: function data() {\n    return {\n      currentIndex: 0 };\n\n  },\n  watch: {\n    current: function current(val) {\n      if (val !== this.currentIndex) {\n        this.currentIndex = val;\n      }\n    } },\n\n  created: function created() {\n    this.currentIndex = this.current;\n  },\n  methods: {\n    _onClick: function _onClick(index) {\n      if (this.currentIndex !== index) {\n        this.currentIndex = index;\n        this.$emit('clickItem', {\n          currentIndex: index });\n\n      }\n    } } };exports.default = _default2;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy91bmktc2VnbWVudGVkLWNvbnRyb2wudnVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkE7Ozs7Ozs7Ozs7Ozs7QUFhQTtBQUNBLDZCQURBO0FBRUE7QUFDQTtBQUNBLGtCQURBO0FBRUEsZ0JBRkEsRUFEQTs7QUFLQTtBQUNBLGlCQURBO0FBRUEsYUFGQSxzQkFFQTtBQUNBO0FBQ0EsT0FKQSxFQUxBOztBQVdBO0FBQ0Esa0JBREE7QUFFQSx3QkFGQSxFQVhBOztBQWVBO0FBQ0Esa0JBREE7QUFFQSx1QkFGQSxFQWZBLEVBRkE7OztBQXNCQSxNQXRCQSxrQkFzQkE7QUFDQTtBQUNBLHFCQURBOztBQUdBLEdBMUJBO0FBMkJBO0FBQ0EsV0FEQSxtQkFDQSxHQURBLEVBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUxBLEVBM0JBOztBQWtDQSxTQWxDQSxxQkFrQ0E7QUFDQTtBQUNBLEdBcENBO0FBcUNBO0FBQ0EsWUFEQSxvQkFDQSxLQURBLEVBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFEQTs7QUFHQTtBQUNBLEtBUkEsRUFyQ0EsRSIsImZpbGUiOiIxMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cclxuXHQ8dmlldyA6Y2xhc3M9XCJbc3R5bGVUeXBlID09PSAndGV4dCc/J3NlZ21lbnRlZC1jb250cm9sLS10ZXh0JyA6ICdzZWdtZW50ZWQtY29udHJvbC0tYnV0dG9uJyBdXCIgOnN0eWxlPVwieyBib3JkZXJDb2xvcjogc3R5bGVUeXBlID09PSAndGV4dCcgPyAnJyA6IGFjdGl2ZUNvbG9yIH1cIlxyXG5cdCBjbGFzcz1cInNlZ21lbnRlZC1jb250cm9sXCI+XHJcblx0XHQ8dmlldyB2LWZvcj1cIihpdGVtLCBpbmRleCkgaW4gdmFsdWVzXCIgOmNsYXNzPVwiWyBzdHlsZVR5cGUgPT09ICd0ZXh0Jz8nc2VnbWVudGVkLWNvbnRyb2xfX2l0ZW0tLXRleHQnOiAnc2VnbWVudGVkLWNvbnRyb2xfX2l0ZW0tLWJ1dHRvbicgLCBpbmRleCA9PT0gY3VycmVudEluZGV4JiZzdHlsZVR5cGUgPT09ICdidXR0b24nPydzZWdtZW50ZWQtY29udHJvbF9faXRlbS0tYnV0dG9uLS1hY3RpdmUnOiAnJyAsIGluZGV4ID09PSAwJiZzdHlsZVR5cGUgPT09ICdidXR0b24nPydzZWdtZW50ZWQtY29udHJvbF9faXRlbS0tYnV0dG9uLS1maXJzdCc6ICcnLGluZGV4ID09PSB2YWx1ZXMubGVuZ3RoIC0gMSYmc3R5bGVUeXBlID09PSAnYnV0dG9uJz8nc2VnbWVudGVkLWNvbnRyb2xfX2l0ZW0tLWJ1dHRvbi0tbGFzdCc6ICcnIF1cIlxyXG5cdFx0IDprZXk9XCJpbmRleFwiIDpzdHlsZT1cIntcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGluZGV4ID09PSBjdXJyZW50SW5kZXggJiYgc3R5bGVUeXBlID09PSAnYnV0dG9uJyA/IGFjdGl2ZUNvbG9yIDogJycsYm9yZGVyQ29sb3I6IGluZGV4ID09PSBjdXJyZW50SW5kZXgmJnN0eWxlVHlwZSA9PT0gJ3RleHQnfHxzdHlsZVR5cGUgPT09ICdidXR0b24nP2FjdGl2ZUNvbG9yOid0cmFuc3BhcmVudCdcclxuICAgICAgfVwiXHJcblx0XHQgY2xhc3M9XCJzZWdtZW50ZWQtY29udHJvbF9faXRlbVwiIEBjbGljaz1cIl9vbkNsaWNrKGluZGV4KVwiPlxyXG5cdFx0XHQ8dGV4dCA6c3R5bGU9XCJ7Y29sb3I6XHJcbiAgICAgICAgICBpbmRleCA9PT0gY3VycmVudEluZGV4XHJcbiAgICAgICAgICAgID8gc3R5bGVUeXBlID09PSAndGV4dCdcclxuICAgICAgICAgICAgICA/IGFjdGl2ZUNvbG9yXHJcbiAgICAgICAgICAgICAgOiAnI2ZmZidcclxuICAgICAgICAgICAgOiBzdHlsZVR5cGUgPT09ICd0ZXh0J1xyXG4gICAgICAgICAgICAgID8gJyMwMDAnXHJcbiAgICAgICAgICAgICAgOiBhY3RpdmVDb2xvcn1cIlxyXG5cdFx0XHQgY2xhc3M9XCJzZWdtZW50ZWQtY29udHJvbF9fdGV4dFwiPnt7IGl0ZW0gfX08L3RleHQ+XHJcblx0XHQ8L3ZpZXc+XHJcblx0PC92aWV3PlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuXHQvKipcclxuXHQgKiBTZWdtZW50ZWRDb250cm9sIOWIhuauteWZqFxyXG5cdCAqIEBkZXNjcmlwdGlvbiDnlKjkvZzkuI3lkIzop4blm77nmoTmmL7npLpcclxuXHQgKiBAdHV0b3JpYWwgaHR0cHM6Ly9leHQuZGNsb3VkLm5ldC5jbi9wbHVnaW4/aWQ9NTRcclxuXHQgKiBAcHJvcGVydHkge051bWJlcn0gY3VycmVudCDlvZPliY3pgInkuK3nmoR0YWLntKLlvJXlgLzvvIzku44w6K6h5pWwXHJcblx0ICogQHByb3BlcnR5IHtTdHJpbmd9IHN0eWxlVHlwZSA9IFtidXR0b258dGV4dF0g5YiG5q615Zmo5qC35byP57G75Z6LXHJcblx0ICogXHRAdmFsdWUgYnV0dG9uIOaMiemSruexu+Wei1xyXG5cdCAqIFx0QHZhbHVlIHRleHQg5paH5a2X57G75Z6LXHJcblx0ICogQHByb3BlcnR5IHtTdHJpbmd9IGFjdGl2ZUNvbG9yIOmAieS4reeahOagh+etvuiDjOaZr+iJsuS4jui+ueahhuminOiJslxyXG5cdCAqIEBwcm9wZXJ0eSB7QXJyYXl9IHZhbHVlcyDpgInpobnmlbDnu4RcclxuXHQgKiBAZXZlbnQge0Z1bmN0aW9ufSBjbGlja0l0ZW0g57uE5Lu26Kem5Y+R54K55Ye75LqL5Lu25pe26Kem5Y+R77yMZT17Y3VycmVudEluZGV4fVxyXG5cdCAqL1xyXG5cclxuXHRleHBvcnQgZGVmYXVsdCB7XHJcblx0XHRuYW1lOiAnVW5pU2VnbWVudGVkQ29udHJvbCcsXHJcblx0XHRwcm9wczoge1xyXG5cdFx0XHRjdXJyZW50OiB7XHJcblx0XHRcdFx0dHlwZTogTnVtYmVyLFxyXG5cdFx0XHRcdGRlZmF1bHQ6IDBcclxuXHRcdFx0fSxcclxuXHRcdFx0dmFsdWVzOiB7XHJcblx0XHRcdFx0dHlwZTogQXJyYXksXHJcblx0XHRcdFx0ZGVmYXVsdCAoKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gW11cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdGFjdGl2ZUNvbG9yOiB7XHJcblx0XHRcdFx0dHlwZTogU3RyaW5nLFxyXG5cdFx0XHRcdGRlZmF1bHQ6ICcjMDA3YWZmJ1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRzdHlsZVR5cGU6IHtcclxuXHRcdFx0XHR0eXBlOiBTdHJpbmcsXHJcblx0XHRcdFx0ZGVmYXVsdDogJ2J1dHRvbidcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdGRhdGEoKSB7XHJcblx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0Y3VycmVudEluZGV4OiAwXHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHR3YXRjaDoge1xyXG5cdFx0XHRjdXJyZW50KHZhbCkge1xyXG5cdFx0XHRcdGlmICh2YWwgIT09IHRoaXMuY3VycmVudEluZGV4KSB7XHJcblx0XHRcdFx0XHR0aGlzLmN1cnJlbnRJbmRleCA9IHZhbFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdGNyZWF0ZWQoKSB7XHJcblx0XHRcdHRoaXMuY3VycmVudEluZGV4ID0gdGhpcy5jdXJyZW50XHJcblx0XHR9LFxyXG5cdFx0bWV0aG9kczoge1xyXG5cdFx0XHRfb25DbGljayhpbmRleCkge1xyXG5cdFx0XHRcdGlmICh0aGlzLmN1cnJlbnRJbmRleCAhPT0gaW5kZXgpIHtcclxuXHRcdFx0XHRcdHRoaXMuY3VycmVudEluZGV4ID0gaW5kZXhcclxuXHRcdFx0XHRcdHRoaXMuJGVtaXQoJ2NsaWNrSXRlbScsIHtcclxuXHRcdFx0XHRcdFx0Y3VycmVudEluZGV4OiBpbmRleFxyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPlxyXG5cclxuXHQuc2VnbWVudGVkLWNvbnRyb2wge1xyXG5cdFx0LyogI2lmbmRlZiBBUFAtTlZVRSAqL1xyXG5cdFx0ZGlzcGxheTogZmxleDtcclxuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcblx0XHQvKiAjZW5kaWYgKi9cclxuXHRcdGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcblx0XHRoZWlnaHQ6IDM2cHg7XHJcblx0XHRvdmVyZmxvdzogaGlkZGVuO1xyXG5cdFx0LyogI2lmZGVmIEg1ICovXHJcblx0XHRjdXJzb3I6IHBvaW50ZXI7XHJcblx0XHQvKiAjZW5kaWYgKi9cclxuXHR9XHJcblxyXG5cdC5zZWdtZW50ZWQtY29udHJvbF9faXRlbSB7XHJcblx0XHQvKiAjaWZuZGVmIEFQUC1OVlVFICovXHJcblx0XHRkaXNwbGF5OiBpbmxpbmUtZmxleDtcclxuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcblx0XHQvKiAjZW5kaWYgKi9cclxuXHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuXHRcdGZsZXg6IDE7XHJcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuXHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcblx0fVxyXG5cclxuXHQuc2VnbWVudGVkLWNvbnRyb2xfX2l0ZW0tLWJ1dHRvbiB7XHJcblx0XHRib3JkZXItc3R5bGU6IHNvbGlkO1xyXG5cdFx0Ym9yZGVyLXRvcC13aWR0aDogMXB4O1xyXG5cdFx0Ym9yZGVyLWJvdHRvbS13aWR0aDogMXB4O1xyXG5cdFx0Ym9yZGVyLXJpZ2h0LXdpZHRoOiAxcHg7XHJcblx0XHRib3JkZXItbGVmdC13aWR0aDogMDtcclxuXHR9XHJcblxyXG5cdC5zZWdtZW50ZWQtY29udHJvbF9faXRlbS0tYnV0dG9uLS1maXJzdCB7XHJcblx0XHRib3JkZXItbGVmdC13aWR0aDogMXB4O1xyXG5cdFx0Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czogNXB4O1xyXG5cdFx0Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogNXB4O1xyXG5cdH1cclxuXHJcblx0LnNlZ21lbnRlZC1jb250cm9sX19pdGVtLS1idXR0b24tLWxhc3Qge1xyXG5cdFx0Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDVweDtcclxuXHRcdGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiA1cHg7XHJcblx0fVxyXG5cclxuXHQuc2VnbWVudGVkLWNvbnRyb2xfX2l0ZW0tLXRleHQge1xyXG5cdFx0Ym9yZGVyLWJvdHRvbS1zdHlsZTogc29saWQ7XHJcblx0XHRib3JkZXItYm90dG9tLXdpZHRoOiAzcHg7XHJcblx0fVxyXG5cclxuXHQuc2VnbWVudGVkLWNvbnRyb2xfX3RleHQge1xyXG5cdFx0Zm9udC1zaXplOiAxNnB4O1xyXG5cdFx0bGluZS1oZWlnaHQ6IDIwcHg7XHJcblx0XHR0ZXh0LWFsaWduOiBjZW50ZXI7XHJcblx0fVxyXG48L3N0eWxlPlxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode, /* vue-cli only */
  components, // fixed by xxxxxx auto components
  renderjs // fixed by xxxxxx renderjs
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // fixed by xxxxxx auto components
  if (components) {
    if (!options.components) {
      options.components = {}
    }
    var hasOwn = Object.prototype.hasOwnProperty
    for (var name in components) {
      if (hasOwn.call(components, name) && !hasOwn.call(options.components, name)) {
        options.components[name] = components[name]
      }
    }
  }
  // fixed by xxxxxx renderjs
  if (renderjs) {
    (renderjs.beforeCreate || (renderjs.beforeCreate = [])).unshift(function() {
      this[renderjs.__module] = this
    });
    (options.mixins || (options.mixins = [])).push(renderjs)
  }

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),
/* 15 */
/*!*******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/dist/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var _package = __webpack_require__(/*! ../package.json */ 16);function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

var STAT_VERSION = _package.version;
var STAT_URL = 'https://tongji.dcloud.io/uni/stat';
var STAT_H5_URL = 'https://tongji.dcloud.io/uni/stat.gif';
var PAGE_PVER_TIME = 1800;
var APP_PVER_TIME = 300;
var OPERATING_TIME = 10;
var DIFF_TIME = 60 * 1000 * 60 * 24;

var statConfig = __webpack_require__(/*! uni-stat-config */ 17).default || __webpack_require__(/*! uni-stat-config */ 17);
var UUID_KEY = '__DC_STAT_UUID';
var UUID_VALUE = '__DC_UUID_VALUE';

function getUuid() {
  var uuid = '';
  if (getPlatformName() === 'n') {
    try {
      uuid = plus.runtime.getDCloudId();
    } catch (e) {
      uuid = '';
    }
    return uuid;
  }

  try {
    uuid = uni.getStorageSync(UUID_KEY);
  } catch (e) {
    uuid = UUID_VALUE;
  }

  if (!uuid) {
    uuid = Date.now() + '' + Math.floor(Math.random() * 1e7);
    try {
      uni.setStorageSync(UUID_KEY, uuid);
    } catch (e) {
      uni.setStorageSync(UUID_KEY, UUID_VALUE);
    }
  }
  return uuid;
}

var getSgin = function getSgin(statData) {
  var arr = Object.keys(statData);
  var sortArr = arr.sort();
  var sgin = {};
  var sginStr = '';
  for (var i in sortArr) {
    sgin[sortArr[i]] = statData[sortArr[i]];
    sginStr += sortArr[i] + '=' + statData[sortArr[i]] + '&';
  }
  // const options = sginStr.substr(0, sginStr.length - 1)
  // sginStr = sginStr.substr(0, sginStr.length - 1) + '&key=' + STAT_KEY;
  // const si = crypto.createHash('md5').update(sginStr).digest('hex');
  return {
    sign: '',
    options: sginStr.substr(0, sginStr.length - 1) };

};

var getSplicing = function getSplicing(data) {
  var str = '';
  for (var i in data) {
    str += i + '=' + data[i] + '&';
  }
  return str.substr(0, str.length - 1);
};

var getTime = function getTime() {
  return parseInt(new Date().getTime() / 1000);
};

var getPlatformName = function getPlatformName() {var _platformList;
  var aliArr = ['y', 'a', 'p', 'mp-ali'];
  var platformList = (_platformList = {
    'app-plus': 'n',
    'h5': 'h5',
    'mp-weixin': 'wx' }, _defineProperty(_platformList,
  aliArr.reverse().join(''), 'ali'), _defineProperty(_platformList,
  'mp-baidu', 'bd'), _defineProperty(_platformList,
  'mp-toutiao', 'tt'), _defineProperty(_platformList,
  'mp-qq', 'qq'), _defineProperty(_platformList,
  'quickapp-native', 'qn'), _defineProperty(_platformList,
  'mp-kuaishou', 'ks'), _platformList);

  return platformList["app-plus"];
};

var getPackName = function getPackName() {
  var packName = '';
  if (getPlatformName() === 'wx' || getPlatformName() === 'qq') {
    // 兼容微信小程序低版本基础库
    if (uni.canIUse('getAccountInfoSync')) {
      packName = uni.getAccountInfoSync().miniProgram.appId || '';
    }
  }
  return packName;
};

var getVersion = function getVersion() {
  return getPlatformName() === 'n' ? plus.runtime.version : '';
};

var getChannel = function getChannel() {
  var platformName = getPlatformName();
  var channel = '';
  if (platformName === 'n') {
    channel = plus.runtime.channel;
  }
  return channel;
};

var getScene = function getScene(options) {
  var platformName = getPlatformName();
  var scene = '';
  if (options) {
    return options;
  }
  if (platformName === 'wx') {
    scene = uni.getLaunchOptionsSync().scene;
  }
  return scene;
};
var First__Visit__Time__KEY = 'First__Visit__Time';
var Last__Visit__Time__KEY = 'Last__Visit__Time';

var getFirstVisitTime = function getFirstVisitTime() {
  var timeStorge = uni.getStorageSync(First__Visit__Time__KEY);
  var time = 0;
  if (timeStorge) {
    time = timeStorge;
  } else {
    time = getTime();
    uni.setStorageSync(First__Visit__Time__KEY, time);
    uni.removeStorageSync(Last__Visit__Time__KEY);
  }
  return time;
};

var getLastVisitTime = function getLastVisitTime() {
  var timeStorge = uni.getStorageSync(Last__Visit__Time__KEY);
  var time = 0;
  if (timeStorge) {
    time = timeStorge;
  } else {
    time = '';
  }
  uni.setStorageSync(Last__Visit__Time__KEY, getTime());
  return time;
};


var PAGE_RESIDENCE_TIME = '__page__residence__time';
var First_Page_residence_time = 0;
var Last_Page_residence_time = 0;


var setPageResidenceTime = function setPageResidenceTime() {
  First_Page_residence_time = getTime();
  if (getPlatformName() === 'n') {
    uni.setStorageSync(PAGE_RESIDENCE_TIME, getTime());
  }
  return First_Page_residence_time;
};

var getPageResidenceTime = function getPageResidenceTime() {
  Last_Page_residence_time = getTime();
  if (getPlatformName() === 'n') {
    First_Page_residence_time = uni.getStorageSync(PAGE_RESIDENCE_TIME);
  }
  return Last_Page_residence_time - First_Page_residence_time;
};
var TOTAL__VISIT__COUNT = 'Total__Visit__Count';
var getTotalVisitCount = function getTotalVisitCount() {
  var timeStorge = uni.getStorageSync(TOTAL__VISIT__COUNT);
  var count = 1;
  if (timeStorge) {
    count = timeStorge;
    count++;
  }
  uni.setStorageSync(TOTAL__VISIT__COUNT, count);
  return count;
};

var GetEncodeURIComponentOptions = function GetEncodeURIComponentOptions(statData) {
  var data = {};
  for (var prop in statData) {
    data[prop] = encodeURIComponent(statData[prop]);
  }
  return data;
};

var Set__First__Time = 0;
var Set__Last__Time = 0;

var getFirstTime = function getFirstTime() {
  var time = new Date().getTime();
  Set__First__Time = time;
  Set__Last__Time = 0;
  return time;
};


var getLastTime = function getLastTime() {
  var time = new Date().getTime();
  Set__Last__Time = time;
  return time;
};


var getResidenceTime = function getResidenceTime(type) {
  var residenceTime = 0;
  if (Set__First__Time !== 0) {
    residenceTime = Set__Last__Time - Set__First__Time;
  }

  residenceTime = parseInt(residenceTime / 1000);
  residenceTime = residenceTime < 1 ? 1 : residenceTime;
  if (type === 'app') {
    var overtime = residenceTime > APP_PVER_TIME ? true : false;
    return {
      residenceTime: residenceTime,
      overtime: overtime };

  }
  if (type === 'page') {
    var _overtime = residenceTime > PAGE_PVER_TIME ? true : false;
    return {
      residenceTime: residenceTime,
      overtime: _overtime };

  }

  return {
    residenceTime: residenceTime };


};

var getRoute = function getRoute() {
  var pages = getCurrentPages();
  var page = pages[pages.length - 1];
  if (!page) return '';
  var _self = page.$vm;

  if (getPlatformName() === 'bd') {
    return _self.$mp && _self.$mp.page.is;
  } else {
    return _self.$scope && _self.$scope.route || _self.$mp && _self.$mp.page.route;
  }
};

var getPageRoute = function getPageRoute(self) {
  var pages = getCurrentPages();
  var page = pages[pages.length - 1];
  if (!page) return '';
  var _self = page.$vm;
  var query = self._query;
  var str = query && JSON.stringify(query) !== '{}' ? '?' + JSON.stringify(query) : '';
  // clear
  self._query = '';
  if (getPlatformName() === 'bd') {
    return _self.$mp && _self.$mp.page.is + str;
  } else {
    return _self.$scope && _self.$scope.route + str || _self.$mp && _self.$mp.page.route + str;
  }
};

var getPageTypes = function getPageTypes(self) {
  if (self.mpType === 'page' || self.$mp && self.$mp.mpType === 'page' || self.$options.mpType === 'page') {
    return true;
  }
  return false;
};

var calibration = function calibration(eventName, options) {
  //  login 、 share 、pay_success 、pay_fail 、register 、title
  if (!eventName) {
    console.error("uni.report \u7F3A\u5C11 [eventName] \u53C2\u6570");
    return true;
  }
  if (typeof eventName !== 'string') {
    console.error("uni.report [eventName] \u53C2\u6570\u7C7B\u578B\u9519\u8BEF,\u53EA\u80FD\u4E3A String \u7C7B\u578B");
    return true;
  }
  if (eventName.length > 255) {
    console.error("uni.report [eventName] \u53C2\u6570\u957F\u5EA6\u4E0D\u80FD\u5927\u4E8E 255");
    return true;
  }

  if (typeof options !== 'string' && typeof options !== 'object') {
    console.error("uni.report [options] \u53C2\u6570\u7C7B\u578B\u9519\u8BEF,\u53EA\u80FD\u4E3A String \u6216 Object \u7C7B\u578B");
    return true;
  }

  if (typeof options === 'string' && options.length > 255) {
    console.error("uni.report [options] \u53C2\u6570\u957F\u5EA6\u4E0D\u80FD\u5927\u4E8E 255");
    return true;
  }

  if (eventName === 'title' && typeof options !== 'string') {
    console.error('uni.report [eventName] 参数为 title 时，[options] 参数只能为 String 类型');
    return true;
  }
};

var Report_Data_Time = 'Report_Data_Time';
var Report_Status = 'Report_Status';
var isReportData = function isReportData() {
  return new Promise(function (resolve, reject) {
    var start_time = '';
    var end_time = new Date().getTime();
    var diff_time = DIFF_TIME;
    var report_status = 1;
    try {
      start_time = uni.getStorageSync(Report_Data_Time);
      report_status = uni.getStorageSync(Report_Status);
    } catch (e) {
      start_time = '';
      report_status = 1;
    }

    if (report_status === '') {
      requestData(function (_ref)

      {var enable = _ref.enable;
        uni.setStorageSync(Report_Data_Time, end_time);
        uni.setStorageSync(Report_Status, enable);
        if (enable === 1) {
          resolve();
        }
      });
      return;
    }

    if (report_status === 1) {
      resolve();
    }

    if (!start_time) {
      uni.setStorageSync(Report_Data_Time, end_time);
      start_time = end_time;
    }

    if (end_time - start_time > diff_time) {
      requestData(function (_ref2)

      {var enable = _ref2.enable;
        uni.setStorageSync(Report_Data_Time, end_time);
        uni.setStorageSync(Report_Status, enable);
      });
    }

  });
};

var requestData = function requestData(done) {
  var formData = {
    usv: STAT_VERSION,
    conf: JSON.stringify({
      ak: statConfig.appid }) };


  uni.request({
    url: STAT_URL,
    method: 'GET',
    data: formData,
    success: function success(res) {var

      data =
      res.data;
      if (data.ret === 0) {
        typeof done === 'function' && done({
          enable: data.enable });

      }
    },
    fail: function fail(e) {
      var report_status_code = 1;
      try {
        report_status_code = uni.getStorageSync(Report_Status);
      } catch (e) {
        report_status_code = 1;
      }
      if (report_status_code === '') {
        report_status_code = 1;
      }
      typeof done === 'function' && done({
        enable: report_status_code });

    } });

};

var PagesJson = __webpack_require__(/*! uni-pages?{"type":"style"} */ 18).default;
var statConfig$1 = __webpack_require__(/*! uni-stat-config */ 17).default || __webpack_require__(/*! uni-stat-config */ 17);

var resultOptions = uni.getSystemInfoSync();var

Util = /*#__PURE__*/function () {
  function Util() {_classCallCheck(this, Util);
    this.self = '';
    this._retry = 0;
    this._platform = '';
    this._query = {};
    this._navigationBarTitle = {
      config: '',
      page: '',
      report: '',
      lt: '' };

    this._operatingTime = 0;
    this._reportingRequestData = {
      '1': [],
      '11': [] };

    this.__prevent_triggering = false;

    this.__licationHide = false;
    this.__licationShow = false;
    this._lastPageRoute = '';
    this.statData = {
      uuid: getUuid(),
      ut: getPlatformName(),
      mpn: getPackName(),
      ak: statConfig$1.appid,
      usv: STAT_VERSION,
      v: getVersion(),
      ch: getChannel(),
      cn: '',
      pn: '',
      ct: '',
      t: getTime(),
      tt: '',
      p: resultOptions.platform === 'android' ? 'a' : 'i',
      brand: resultOptions.brand || '',
      md: resultOptions.model,
      sv: resultOptions.system.replace(/(Android|iOS)\s/, ''),
      mpsdk: resultOptions.SDKVersion || '',
      mpv: resultOptions.version || '',
      lang: resultOptions.language,
      pr: resultOptions.pixelRatio,
      ww: resultOptions.windowWidth,
      wh: resultOptions.windowHeight,
      sw: resultOptions.screenWidth,
      sh: resultOptions.screenHeight };


  }_createClass(Util, [{ key: "getIsReportData", value: function getIsReportData()

    {
      return isReportData();
    } }, { key: "_applicationShow", value: function _applicationShow()

    {
      if (this.__licationHide) {
        getLastTime();
        var time = getResidenceTime('app');
        if (time.overtime) {
          var options = {
            path: this._lastPageRoute,
            scene: this.statData.sc };

          this._sendReportRequest(options);
        }
        this.__licationHide = false;
      }
    } }, { key: "_applicationHide", value: function _applicationHide(

    self, type) {

      this.__licationHide = true;
      getLastTime();
      var time = getResidenceTime();
      getFirstTime();
      var route = getPageRoute(this);
      this._sendHideRequest({
        urlref: route,
        urlref_ts: time.residenceTime },
      type);
    } }, { key: "_pageShow", value: function _pageShow()

    {
      var route = getPageRoute(this);
      var routepath = getRoute();
      this._navigationBarTitle.config = PagesJson &&
      PagesJson.pages[routepath] &&
      PagesJson.pages[routepath].titleNView &&
      PagesJson.pages[routepath].titleNView.titleText ||
      PagesJson &&
      PagesJson.pages[routepath] &&
      PagesJson.pages[routepath].navigationBarTitleText || '';

      if (this.__licationShow) {
        getFirstTime();
        this.__licationShow = false;
        // console.log('这是 onLauch 之后执行的第一次 pageShow ，为下次记录时间做准备');
        this._lastPageRoute = route;
        return;
      }

      getLastTime();
      this._lastPageRoute = route;
      var time = getResidenceTime('page');
      if (time.overtime) {
        var options = {
          path: this._lastPageRoute,
          scene: this.statData.sc };

        this._sendReportRequest(options);
      }
      getFirstTime();
    } }, { key: "_pageHide", value: function _pageHide()

    {
      if (!this.__licationHide) {
        getLastTime();
        var time = getResidenceTime('page');
        this._sendPageRequest({
          url: this._lastPageRoute,
          urlref: this._lastPageRoute,
          urlref_ts: time.residenceTime });

        this._navigationBarTitle = {
          config: '',
          page: '',
          report: '',
          lt: '' };

        return;
      }
    } }, { key: "_login", value: function _login()

    {
      this._sendEventRequest({
        key: 'login' },
      0);
    } }, { key: "_share", value: function _share()

    {
      this._sendEventRequest({
        key: 'share' },
      0);
    } }, { key: "_payment", value: function _payment(
    key) {
      this._sendEventRequest({
        key: key },
      0);
    } }, { key: "_sendReportRequest", value: function _sendReportRequest(
    options) {

      this._navigationBarTitle.lt = '1';
      var query = options.query && JSON.stringify(options.query) !== '{}' ? '?' + JSON.stringify(options.query) : '';
      this.statData.lt = '1';
      this.statData.url = options.path + query || '';
      this.statData.t = getTime();
      this.statData.sc = getScene(options.scene);
      this.statData.fvts = getFirstVisitTime();
      this.statData.lvts = getLastVisitTime();
      this.statData.tvc = getTotalVisitCount();
      if (getPlatformName() === 'n') {
        this.getProperty();
      } else {
        this.getNetworkInfo();
      }
    } }, { key: "_sendPageRequest", value: function _sendPageRequest(

    opt) {var

      url =


      opt.url,urlref = opt.urlref,urlref_ts = opt.urlref_ts;
      this._navigationBarTitle.lt = '11';
      var options = {
        ak: this.statData.ak,
        uuid: this.statData.uuid,
        lt: '11',
        ut: this.statData.ut,
        url: url,
        tt: this.statData.tt,
        urlref: urlref,
        urlref_ts: urlref_ts,
        ch: this.statData.ch,
        usv: this.statData.usv,
        t: getTime(),
        p: this.statData.p };

      this.request(options);
    } }, { key: "_sendHideRequest", value: function _sendHideRequest(

    opt, type) {var

      urlref =

      opt.urlref,urlref_ts = opt.urlref_ts;
      var options = {
        ak: this.statData.ak,
        uuid: this.statData.uuid,
        lt: '3',
        ut: this.statData.ut,
        urlref: urlref,
        urlref_ts: urlref_ts,
        ch: this.statData.ch,
        usv: this.statData.usv,
        t: getTime(),
        p: this.statData.p };

      this.request(options, type);
    } }, { key: "_sendEventRequest", value: function _sendEventRequest()



    {var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},_ref3$key = _ref3.key,key = _ref3$key === void 0 ? '' : _ref3$key,_ref3$value = _ref3.value,value = _ref3$value === void 0 ? "" : _ref3$value;
      var route = this._lastPageRoute;
      var options = {
        ak: this.statData.ak,
        uuid: this.statData.uuid,
        lt: '21',
        ut: this.statData.ut,
        url: route,
        ch: this.statData.ch,
        e_n: key,
        e_v: typeof value === 'object' ? JSON.stringify(value) : value.toString(),
        usv: this.statData.usv,
        t: getTime(),
        p: this.statData.p };

      this.request(options);
    } }, { key: "getNetworkInfo", value: function getNetworkInfo()

    {var _this = this;
      uni.getNetworkType({
        success: function success(result) {
          _this.statData.net = result.networkType;
          _this.getLocation();
        } });

    } }, { key: "getProperty", value: function getProperty()

    {var _this2 = this;
      plus.runtime.getProperty(plus.runtime.appid, function (wgtinfo) {
        _this2.statData.v = wgtinfo.version || '';
        _this2.getNetworkInfo();
      });
    } }, { key: "getLocation", value: function getLocation()

    {var _this3 = this;
      if (statConfig$1.getLocation) {
        uni.getLocation({
          type: 'wgs84',
          geocode: true,
          success: function success(result) {
            if (result.address) {
              _this3.statData.cn = result.address.country;
              _this3.statData.pn = result.address.province;
              _this3.statData.ct = result.address.city;
            }

            _this3.statData.lat = result.latitude;
            _this3.statData.lng = result.longitude;
            _this3.request(_this3.statData);
          } });

      } else {
        this.statData.lat = 0;
        this.statData.lng = 0;
        this.request(this.statData);
      }
    } }, { key: "request", value: function request(

    data, type) {var _this4 = this;
      var time = getTime();
      var title = this._navigationBarTitle;
      data.ttn = title.page;
      data.ttpj = title.config;
      data.ttc = title.report;

      var requestData = this._reportingRequestData;
      if (getPlatformName() === 'n') {
        requestData = uni.getStorageSync('__UNI__STAT__DATA') || {};
      }
      if (!requestData[data.lt]) {
        requestData[data.lt] = [];
      }
      requestData[data.lt].push(data);

      if (getPlatformName() === 'n') {
        uni.setStorageSync('__UNI__STAT__DATA', requestData);
      }
      if (getPageResidenceTime() < OPERATING_TIME && !type) {
        return;
      }
      var uniStatData = this._reportingRequestData;
      if (getPlatformName() === 'n') {
        uniStatData = uni.getStorageSync('__UNI__STAT__DATA');
      }
      // 时间超过，重新获取时间戳
      setPageResidenceTime();
      var firstArr = [];
      var contentArr = [];
      var lastArr = [];var _loop = function _loop(

      i) {
        var rd = uniStatData[i];
        rd.forEach(function (elm) {
          var newData = getSplicing(elm);
          if (i === 0) {
            firstArr.push(newData);
          } else if (i === 3) {
            lastArr.push(newData);
          } else {
            contentArr.push(newData);
          }
        });};for (var i in uniStatData) {_loop(i);
      }

      firstArr.push.apply(firstArr, contentArr.concat(lastArr));
      var optionsData = {
        usv: STAT_VERSION, //统计 SDK 版本号
        t: time, //发送请求时的时间戮
        requests: JSON.stringify(firstArr) };


      this._reportingRequestData = {};
      if (getPlatformName() === 'n') {
        uni.removeStorageSync('__UNI__STAT__DATA');
      }

      if (data.ut === 'h5') {
        this.imageRequest(optionsData);
        return;
      }

      if (getPlatformName() === 'n' && this.statData.p === 'a') {
        setTimeout(function () {
          _this4._sendRequest(optionsData);
        }, 200);
        return;
      }
      this._sendRequest(optionsData);
    } }, { key: "_sendRequest", value: function _sendRequest(
    optionsData) {var _this5 = this;
      this.getIsReportData().then(function () {
        uni.request({
          url: STAT_URL,
          method: 'POST',
          // header: {
          //   'content-type': 'application/json' // 默认值
          // },
          data: optionsData,
          success: function success() {
            // if (process.env.NODE_ENV === 'development') {
            //   console.log('stat request success');
            // }
          },
          fail: function fail(e) {
            if (++_this5._retry < 3) {
              setTimeout(function () {
                _this5._sendRequest(optionsData);
              }, 1000);
            }
          } });

      });
    }
    /**
       * h5 请求
       */ }, { key: "imageRequest", value: function imageRequest(
    data) {
      this.getIsReportData().then(function () {
        var image = new Image();
        var options = getSgin(GetEncodeURIComponentOptions(data)).options;
        image.src = STAT_H5_URL + '?' + options;
      });
    } }, { key: "sendEvent", value: function sendEvent(

    key, value) {
      // 校验 type 参数
      if (calibration(key, value)) return;

      if (key === 'title') {
        this._navigationBarTitle.report = value;
        return;
      }
      this._sendEventRequest({
        key: key,
        value: typeof value === 'object' ? JSON.stringify(value) : value },
      1);
    } }]);return Util;}();var



Stat = /*#__PURE__*/function (_Util) {_inherits(Stat, _Util);var _super = _createSuper(Stat);_createClass(Stat, null, [{ key: "getInstance", value: function getInstance()
    {
      if (!this.instance) {
        this.instance = new Stat();
      }
      return this.instance;
    } }]);
  function Stat() {var _this6;_classCallCheck(this, Stat);
    _this6 = _super.call(this);
    _this6.instance = null;
    // 注册拦截器
    if (typeof uni.addInterceptor === 'function' && "development" !== 'development') {
      _this6.addInterceptorInit();
      _this6.interceptLogin();
      _this6.interceptShare(true);
      _this6.interceptRequestPayment();
    }return _this6;
  }_createClass(Stat, [{ key: "addInterceptorInit", value: function addInterceptorInit()

    {
      var self = this;
      uni.addInterceptor('setNavigationBarTitle', {
        invoke: function invoke(args) {
          self._navigationBarTitle.page = args.title;
        } });

    } }, { key: "interceptLogin", value: function interceptLogin()

    {
      var self = this;
      uni.addInterceptor('login', {
        complete: function complete() {
          self._login();
        } });

    } }, { key: "interceptShare", value: function interceptShare(

    type) {
      var self = this;
      if (!type) {
        self._share();
        return;
      }
      uni.addInterceptor('share', {
        success: function success() {
          self._share();
        },
        fail: function fail() {
          self._share();
        } });

    } }, { key: "interceptRequestPayment", value: function interceptRequestPayment()

    {
      var self = this;
      uni.addInterceptor('requestPayment', {
        success: function success() {
          self._payment('pay_success');
        },
        fail: function fail() {
          self._payment('pay_fail');
        } });

    } }, { key: "report", value: function report(

    options, self) {
      this.self = self;
      // if (process.env.NODE_ENV === 'development') {
      //   console.log('report init');
      // }
      setPageResidenceTime();
      this.__licationShow = true;
      this._sendReportRequest(options, true);
    } }, { key: "load", value: function load(

    options, self) {
      if (!self.$scope && !self.$mp) {
        var page = getCurrentPages();
        self.$scope = page[page.length - 1];
      }
      this.self = self;
      this._query = options;
    } }, { key: "show", value: function show(

    self) {
      this.self = self;
      if (getPageTypes(self)) {
        this._pageShow(self);
      } else {
        this._applicationShow(self);
      }
    } }, { key: "ready", value: function ready(

    self) {
      // this.self = self;
      // if (getPageTypes(self)) {
      //   this._pageShow(self);
      // }
    } }, { key: "hide", value: function hide(
    self) {
      this.self = self;
      if (getPageTypes(self)) {
        this._pageHide(self);
      } else {
        this._applicationHide(self, true);
      }
    } }, { key: "error", value: function error(
    em) {
      if (this._platform === 'devtools') {
        if (true) {
          console.info('当前运行环境为开发者工具，不上报数据。');
        }
        // return;
      }
      var emVal = '';
      if (!em.message) {
        emVal = JSON.stringify(em);
      } else {
        emVal = em.stack;
      }
      var options = {
        ak: this.statData.ak,
        uuid: this.statData.uuid,
        lt: '31',
        ut: this.statData.ut,
        ch: this.statData.ch,
        mpsdk: this.statData.mpsdk,
        mpv: this.statData.mpv,
        v: this.statData.v,
        em: emVal,
        usv: this.statData.usv,
        t: getTime(),
        p: this.statData.p };

      this.request(options);
    } }]);return Stat;}(Util);


var stat = Stat.getInstance();
var isHide = false;
var lifecycle = {
  onLaunch: function onLaunch(options) {
    stat.report(options, this);
  },
  onReady: function onReady() {
    stat.ready(this);
  },
  onLoad: function onLoad(options) {
    stat.load(options, this);
    // 重写分享，获取分享上报事件
    if (this.$scope && this.$scope.onShareAppMessage) {
      var oldShareAppMessage = this.$scope.onShareAppMessage;
      this.$scope.onShareAppMessage = function (options) {
        stat.interceptShare(false);
        return oldShareAppMessage.call(this, options);
      };
    }
  },
  onShow: function onShow() {
    isHide = false;
    stat.show(this);
  },
  onHide: function onHide() {
    isHide = true;
    stat.hide(this);
  },
  onUnload: function onUnload() {
    if (isHide) {
      isHide = false;
      return;
    }
    stat.hide(this);
  },
  onError: function onError(e) {
    stat.error(e);
  } };


function main() {
  if (true) {
    uni.report = function (type, options) {};
  } else { var Vue; }
}

main();

/***/ }),
/* 16 */
/*!******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/package.json ***!
  \******************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, deprecated, description, devDependencies, files, gitHead, homepage, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"_from\":\"@dcloudio/uni-stat@next\",\"_id\":\"@dcloudio/uni-stat@2.0.0-31220210205002\",\"_inBundle\":false,\"_integrity\":\"sha512-WBvYtSrQhr92SpBeuMrQ1cp5xA5IBNnuoRTimHLL8A6EPEQXHoUIXY1We3+AtbjzSWk2YFk8OHZ0X7tpe+0XuA==\",\"_location\":\"/@dcloudio/uni-stat\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"tag\",\"registry\":true,\"raw\":\"@dcloudio/uni-stat@next\",\"name\":\"@dcloudio/uni-stat\",\"escapedName\":\"@dcloudio%2funi-stat\",\"scope\":\"@dcloudio\",\"rawSpec\":\"next\",\"saveSpec\":null,\"fetchSpec\":\"next\"},\"_requiredBy\":[\"#USER\",\"/\",\"/@dcloudio/vue-cli-plugin-uni\"],\"_resolved\":\"https://registry.npmjs.org/@dcloudio/uni-stat/-/uni-stat-2.0.0-31220210205002.tgz\",\"_shasum\":\"70131e223a20d4d07fb61a178c10b63720ab8202\",\"_spec\":\"@dcloudio/uni-stat@next\",\"_where\":\"/Users/guoshengqiang/Documents/dcloud-plugins-new/release/uniapp-cli\",\"author\":\"\",\"bugs\":{\"url\":\"https://github.com/dcloudio/uni-app/issues\"},\"bundleDependencies\":false,\"deprecated\":false,\"description\":\"\",\"devDependencies\":{\"@babel/core\":\"^7.5.5\",\"@babel/preset-env\":\"^7.5.5\",\"eslint\":\"^6.1.0\",\"rollup\":\"^1.19.3\",\"rollup-plugin-babel\":\"^4.3.3\",\"rollup-plugin-clear\":\"^2.0.7\",\"rollup-plugin-commonjs\":\"^10.0.2\",\"rollup-plugin-copy\":\"^3.1.0\",\"rollup-plugin-eslint\":\"^7.0.0\",\"rollup-plugin-json\":\"^4.0.0\",\"rollup-plugin-node-resolve\":\"^5.2.0\",\"rollup-plugin-replace\":\"^2.2.0\",\"rollup-plugin-uglify\":\"^6.0.2\"},\"files\":[\"dist\",\"package.json\",\"LICENSE\"],\"gitHead\":\"bde22ddf072b2d19efccf05143c13cb9f45fa42f\",\"homepage\":\"https://github.com/dcloudio/uni-app#readme\",\"license\":\"Apache-2.0\",\"main\":\"dist/index.js\",\"name\":\"@dcloudio/uni-stat\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dcloudio/uni-app.git\",\"directory\":\"packages/uni-stat\"},\"scripts\":{\"build\":\"NODE_ENV=production rollup -c rollup.config.js\",\"dev\":\"NODE_ENV=development rollup -w -c rollup.config.js\"},\"version\":\"2.0.0-31220210205002\"}");

/***/ }),
/* 17 */
/*!*****************************************************!*\
  !*** D:/GitProject/kabu/pages.json?{"type":"stat"} ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _default = { "appid": "" };exports.default = _default;

/***/ }),
/* 18 */
/*!******************************************************!*\
  !*** D:/GitProject/kabu/pages.json?{"type":"style"} ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _default = { "pages": {}, "globalStyle": {} };exports.default = _default;

/***/ }),
/* 19 */
/*!**********************!*\
  !*** external "Vue" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = Vue;

/***/ }),
/* 20 */
/*!**********************************!*\
  !*** D:/GitProject/kabu/App.vue ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./App.vue?vue&type=script&lang=js& */ 21);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js */ 14);\nvar render, staticRenderFns, recyclableRender, components\nvar renderjs\n\n\n\n\n/* normalize component */\n\nvar component = Object(_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\n  _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"App.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUN1RDtBQUNMOzs7QUFHbEQ7QUFDbU07QUFDbk0sZ0JBQWdCLHdNQUFVO0FBQzFCLEVBQUUseUVBQU07QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNlLGdGIiwiZmlsZSI6IjIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciwgc3RhdGljUmVuZGVyRm5zLCByZWN5Y2xhYmxlUmVuZGVyLCBjb21wb25lbnRzXG52YXIgcmVuZGVyanNcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhRTpcXFxc5byA5Y+RXFxcXEhCdWlsZGVyWC4yLjcuOS4yMDIwMDUyN1xcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHZ1ZS1sb2FkZXJcXFxcbGliXFxcXHJ1bnRpbWVcXFxcY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGwsXG4gIGZhbHNlLFxuICBjb21wb25lbnRzLFxuICByZW5kZXJqc1xuKVxuXG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcIkFwcC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/*!***********************************************************!*\
  !*** D:/GitProject/kabu/App.vue?vue&type=script&lang=js& ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./App.vue?vue&type=script&lang=js& */ 22);\n/* harmony import */ var _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_HBuilderX_2_7_9_20200527_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQXNwQixDQUFnQixxcUJBQUcsRUFBQyIsImZpbGUiOiIyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2QgZnJvbSBcIi0hRTpcXFxc5byA5Y+RXFxcXEhCdWlsZGVyWC4yLjcuOS4yMDIwMDUyN1xcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxiYWJlbC1sb2FkZXJcXFxcbGliXFxcXGluZGV4LmpzIUU6XFxcXOW8gOWPkVxcXFxIQnVpbGRlclguMi43LjkuMjAyMDA1MjdcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx3ZWJwYWNrLXByZXByb2Nlc3MtbG9hZGVyXFxcXGluZGV4LmpzPz9yZWYtLTYtMSFFOlxcXFzlvIDlj5FcXFxcSEJ1aWxkZXJYLjIuNy45LjIwMjAwNTI3XFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay11bmktYXBwLWxvYWRlclxcXFx1c2luZy1jb21wb25lbnRzLmpzIUU6XFxcXOW8gOWPkVxcXFxIQnVpbGRlclguMi43LjkuMjAyMDA1MjdcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx2dWUtbG9hZGVyXFxcXGxpYlxcXFxpbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSFFOlxcXFzlvIDlj5FcXFxcSEJ1aWxkZXJYLjIuNy45LjIwMjAwNTI3XFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXGJhYmVsLWxvYWRlclxcXFxsaWJcXFxcaW5kZXguanMhRTpcXFxc5byA5Y+RXFxcXEhCdWlsZGVyWC4yLjcuOS4yMDIwMDUyN1xcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHdlYnBhY2stcHJlcHJvY2Vzcy1sb2FkZXJcXFxcaW5kZXguanM/P3JlZi0tNi0xIUU6XFxcXOW8gOWPkVxcXFxIQnVpbGRlclguMi43LjkuMjAyMDA1MjdcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx3ZWJwYWNrLXVuaS1hcHAtbG9hZGVyXFxcXHVzaW5nLWNvbXBvbmVudHMuanMhRTpcXFxc5byA5Y+RXFxcXEhCdWlsZGVyWC4yLjcuOS4yMDIwMDUyN1xcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHZ1ZS1sb2FkZXJcXFxcbGliXFxcXGluZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/*!****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!D:/GitProject/kabu/App.vue?vue&type=script&lang=js& ***!
  \****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default =\n{\n  onLaunch: function onLaunch() {\n    __f__(\"log\", 'App Launch', \" at App.vue:4\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  },\n  onShow: function onShow() {\n    __f__(\"log\", 'App Show', \" at App.vue:43\");\n  },\n  onHide: function onHide() {\n    __f__(\"log\", 'App Hide', \" at App.vue:46\");\n  } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 7)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vQXBwLnZ1ZSJdLCJuYW1lcyI6WyJvbkxhdW5jaCIsIm9uU2hvdyIsIm9uSGlkZSJdLCJtYXBwaW5ncyI6IjtBQUNlO0FBQ2RBLFVBQVEsRUFBRSxvQkFBVztBQUNwQixpQkFBWSxZQUFaOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUNBLEdBdkNhO0FBd0NkQyxRQUFNLEVBQUUsa0JBQVc7QUFDbEIsaUJBQVksVUFBWjtBQUNBLEdBMUNhO0FBMkNkQyxRQUFNLEVBQUUsa0JBQVc7QUFDbEIsaUJBQVksVUFBWjtBQUNBLEdBN0NhLEUiLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBkZWZhdWx0IHtcblx0b25MYXVuY2g6IGZ1bmN0aW9uKCkge1xuXHRcdGNvbnNvbGUubG9nKCdBcHAgTGF1bmNoJyk7XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cdH0sXG5cdG9uU2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0Y29uc29sZS5sb2coJ0FwcCBTaG93Jylcblx0fSxcblx0b25IaWRlOiBmdW5jdGlvbigpIHtcblx0XHRjb25zb2xlLmxvZygnQXBwIEhpZGUnKVxuXHR9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///22\n");

/***/ })
],[[0,"app-config"]]]);